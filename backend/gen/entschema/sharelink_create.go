// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/sharelink"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShareLinkCreate is the builder for creating a ShareLink entity.
type ShareLinkCreate struct {
	config
	mutation *ShareLinkMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (slc *ShareLinkCreate) SetUID(s string) *ShareLinkCreate {
	slc.mutation.SetUID(s)
	return slc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (slc *ShareLinkCreate) SetNillableUID(s *string) *ShareLinkCreate {
	if s != nil {
		slc.SetUID(*s)
	}
	return slc
}

// SetCreatedAt sets the "created_at" field.
func (slc *ShareLinkCreate) SetCreatedAt(t time.Time) *ShareLinkCreate {
	slc.mutation.SetCreatedAt(t)
	return slc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (slc *ShareLinkCreate) SetNillableCreatedAt(t *time.Time) *ShareLinkCreate {
	if t != nil {
		slc.SetCreatedAt(*t)
	}
	return slc
}

// SetUpdatedAt sets the "updated_at" field.
func (slc *ShareLinkCreate) SetUpdatedAt(t time.Time) *ShareLinkCreate {
	slc.mutation.SetUpdatedAt(t)
	return slc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (slc *ShareLinkCreate) SetNillableUpdatedAt(t *time.Time) *ShareLinkCreate {
	if t != nil {
		slc.SetUpdatedAt(*t)
	}
	return slc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (slc *ShareLinkCreate) SetDeactivatedAt(t time.Time) *ShareLinkCreate {
	slc.mutation.SetDeactivatedAt(t)
	return slc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (slc *ShareLinkCreate) SetNillableDeactivatedAt(t *time.Time) *ShareLinkCreate {
	if t != nil {
		slc.SetDeactivatedAt(*t)
	}
	return slc
}

// SetFolderUID sets the "folder_uid" field.
func (slc *ShareLinkCreate) SetFolderUID(s string) *ShareLinkCreate {
	slc.mutation.SetFolderUID(s)
	return slc
}

// SetUserUID sets the "user_uid" field.
func (slc *ShareLinkCreate) SetUserUID(s string) *ShareLinkCreate {
	slc.mutation.SetUserUID(s)
	return slc
}

// SetAuthority sets the "authority" field.
func (slc *ShareLinkCreate) SetAuthority(s string) *ShareLinkCreate {
	slc.mutation.SetAuthority(s)
	return slc
}

// SetValidDay sets the "valid_day" field.
func (slc *ShareLinkCreate) SetValidDay(i int) *ShareLinkCreate {
	slc.mutation.SetValidDay(i)
	return slc
}

// SetExpiredAt sets the "expired_at" field.
func (slc *ShareLinkCreate) SetExpiredAt(t time.Time) *ShareLinkCreate {
	slc.mutation.SetExpiredAt(t)
	return slc
}

// SetRecentAt sets the "recent_at" field.
func (slc *ShareLinkCreate) SetRecentAt(t time.Time) *ShareLinkCreate {
	slc.mutation.SetRecentAt(t)
	return slc
}

// SetFolderNumber sets the "folder_number" field.
func (slc *ShareLinkCreate) SetFolderNumber(s string) *ShareLinkCreate {
	slc.mutation.SetFolderNumber(s)
	return slc
}

// SetID sets the "id" field.
func (slc *ShareLinkCreate) SetID(u uint64) *ShareLinkCreate {
	slc.mutation.SetID(u)
	return slc
}

// Mutation returns the ShareLinkMutation object of the builder.
func (slc *ShareLinkCreate) Mutation() *ShareLinkMutation {
	return slc.mutation
}

// Save creates the ShareLink in the database.
func (slc *ShareLinkCreate) Save(ctx context.Context) (*ShareLink, error) {
	var (
		err  error
		node *ShareLink
	)
	slc.defaults()
	if len(slc.hooks) == 0 {
		if err = slc.check(); err != nil {
			return nil, err
		}
		node, err = slc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShareLinkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = slc.check(); err != nil {
				return nil, err
			}
			slc.mutation = mutation
			if node, err = slc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(slc.hooks) - 1; i >= 0; i-- {
			if slc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = slc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, slc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (slc *ShareLinkCreate) SaveX(ctx context.Context) *ShareLink {
	v, err := slc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slc *ShareLinkCreate) Exec(ctx context.Context) error {
	_, err := slc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slc *ShareLinkCreate) ExecX(ctx context.Context) {
	if err := slc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slc *ShareLinkCreate) defaults() {
	if _, ok := slc.mutation.UID(); !ok {
		v := sharelink.DefaultUID()
		slc.mutation.SetUID(v)
	}
	if _, ok := slc.mutation.CreatedAt(); !ok {
		v := sharelink.DefaultCreatedAt()
		slc.mutation.SetCreatedAt(v)
	}
	if _, ok := slc.mutation.UpdatedAt(); !ok {
		v := sharelink.DefaultUpdatedAt()
		slc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slc *ShareLinkCreate) check() error {
	if _, ok := slc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "ShareLink.uid"`)}
	}
	if v, ok := slc.mutation.UID(); ok {
		if err := sharelink.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "ShareLink.uid": %w`, err)}
		}
	}
	if _, ok := slc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "ShareLink.created_at"`)}
	}
	if _, ok := slc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "ShareLink.updated_at"`)}
	}
	if _, ok := slc.mutation.FolderUID(); !ok {
		return &ValidationError{Name: "folder_uid", err: errors.New(`entschema: missing required field "ShareLink.folder_uid"`)}
	}
	if _, ok := slc.mutation.UserUID(); !ok {
		return &ValidationError{Name: "user_uid", err: errors.New(`entschema: missing required field "ShareLink.user_uid"`)}
	}
	if _, ok := slc.mutation.Authority(); !ok {
		return &ValidationError{Name: "authority", err: errors.New(`entschema: missing required field "ShareLink.authority"`)}
	}
	if _, ok := slc.mutation.ValidDay(); !ok {
		return &ValidationError{Name: "valid_day", err: errors.New(`entschema: missing required field "ShareLink.valid_day"`)}
	}
	if _, ok := slc.mutation.ExpiredAt(); !ok {
		return &ValidationError{Name: "expired_at", err: errors.New(`entschema: missing required field "ShareLink.expired_at"`)}
	}
	if _, ok := slc.mutation.RecentAt(); !ok {
		return &ValidationError{Name: "recent_at", err: errors.New(`entschema: missing required field "ShareLink.recent_at"`)}
	}
	if _, ok := slc.mutation.FolderNumber(); !ok {
		return &ValidationError{Name: "folder_number", err: errors.New(`entschema: missing required field "ShareLink.folder_number"`)}
	}
	if v, ok := slc.mutation.FolderNumber(); ok {
		if err := sharelink.FolderNumberValidator(v); err != nil {
			return &ValidationError{Name: "folder_number", err: fmt.Errorf(`entschema: validator failed for field "ShareLink.folder_number": %w`, err)}
		}
	}
	return nil
}

func (slc *ShareLinkCreate) sqlSave(ctx context.Context) (*ShareLink, error) {
	_node, _spec := slc.createSpec()
	if err := sqlgraph.CreateNode(ctx, slc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (slc *ShareLinkCreate) createSpec() (*ShareLink, *sqlgraph.CreateSpec) {
	var (
		_node = &ShareLink{config: slc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sharelink.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: sharelink.FieldID,
			},
		}
	)
	_spec.OnConflict = slc.conflict
	if id, ok := slc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := slc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sharelink.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := slc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sharelink.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := slc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sharelink.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := slc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sharelink.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := slc.mutation.FolderUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sharelink.FieldFolderUID,
		})
		_node.FolderUID = value
	}
	if value, ok := slc.mutation.UserUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sharelink.FieldUserUID,
		})
		_node.UserUID = value
	}
	if value, ok := slc.mutation.Authority(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sharelink.FieldAuthority,
		})
		_node.Authority = value
	}
	if value, ok := slc.mutation.ValidDay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sharelink.FieldValidDay,
		})
		_node.ValidDay = value
	}
	if value, ok := slc.mutation.ExpiredAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sharelink.FieldExpiredAt,
		})
		_node.ExpiredAt = value
	}
	if value, ok := slc.mutation.RecentAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sharelink.FieldRecentAt,
		})
		_node.RecentAt = value
	}
	if value, ok := slc.mutation.FolderNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sharelink.FieldFolderNumber,
		})
		_node.FolderNumber = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShareLink.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShareLinkUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (slc *ShareLinkCreate) OnConflict(opts ...sql.ConflictOption) *ShareLinkUpsertOne {
	slc.conflict = opts
	return &ShareLinkUpsertOne{
		create: slc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShareLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (slc *ShareLinkCreate) OnConflictColumns(columns ...string) *ShareLinkUpsertOne {
	slc.conflict = append(slc.conflict, sql.ConflictColumns(columns...))
	return &ShareLinkUpsertOne{
		create: slc,
	}
}

type (
	// ShareLinkUpsertOne is the builder for "upsert"-ing
	//  one ShareLink node.
	ShareLinkUpsertOne struct {
		create *ShareLinkCreate
	}

	// ShareLinkUpsert is the "OnConflict" setter.
	ShareLinkUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *ShareLinkUpsert) SetUID(v string) *ShareLinkUpsert {
	u.Set(sharelink.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *ShareLinkUpsert) UpdateUID() *ShareLinkUpsert {
	u.SetExcluded(sharelink.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ShareLinkUpsert) SetCreatedAt(v time.Time) *ShareLinkUpsert {
	u.Set(sharelink.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ShareLinkUpsert) UpdateCreatedAt() *ShareLinkUpsert {
	u.SetExcluded(sharelink.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ShareLinkUpsert) SetUpdatedAt(v time.Time) *ShareLinkUpsert {
	u.Set(sharelink.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ShareLinkUpsert) UpdateUpdatedAt() *ShareLinkUpsert {
	u.SetExcluded(sharelink.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *ShareLinkUpsert) SetDeactivatedAt(v time.Time) *ShareLinkUpsert {
	u.Set(sharelink.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *ShareLinkUpsert) UpdateDeactivatedAt() *ShareLinkUpsert {
	u.SetExcluded(sharelink.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *ShareLinkUpsert) ClearDeactivatedAt() *ShareLinkUpsert {
	u.SetNull(sharelink.FieldDeactivatedAt)
	return u
}

// SetFolderUID sets the "folder_uid" field.
func (u *ShareLinkUpsert) SetFolderUID(v string) *ShareLinkUpsert {
	u.Set(sharelink.FieldFolderUID, v)
	return u
}

// UpdateFolderUID sets the "folder_uid" field to the value that was provided on create.
func (u *ShareLinkUpsert) UpdateFolderUID() *ShareLinkUpsert {
	u.SetExcluded(sharelink.FieldFolderUID)
	return u
}

// SetUserUID sets the "user_uid" field.
func (u *ShareLinkUpsert) SetUserUID(v string) *ShareLinkUpsert {
	u.Set(sharelink.FieldUserUID, v)
	return u
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *ShareLinkUpsert) UpdateUserUID() *ShareLinkUpsert {
	u.SetExcluded(sharelink.FieldUserUID)
	return u
}

// SetAuthority sets the "authority" field.
func (u *ShareLinkUpsert) SetAuthority(v string) *ShareLinkUpsert {
	u.Set(sharelink.FieldAuthority, v)
	return u
}

// UpdateAuthority sets the "authority" field to the value that was provided on create.
func (u *ShareLinkUpsert) UpdateAuthority() *ShareLinkUpsert {
	u.SetExcluded(sharelink.FieldAuthority)
	return u
}

// SetValidDay sets the "valid_day" field.
func (u *ShareLinkUpsert) SetValidDay(v int) *ShareLinkUpsert {
	u.Set(sharelink.FieldValidDay, v)
	return u
}

// UpdateValidDay sets the "valid_day" field to the value that was provided on create.
func (u *ShareLinkUpsert) UpdateValidDay() *ShareLinkUpsert {
	u.SetExcluded(sharelink.FieldValidDay)
	return u
}

// AddValidDay adds v to the "valid_day" field.
func (u *ShareLinkUpsert) AddValidDay(v int) *ShareLinkUpsert {
	u.Add(sharelink.FieldValidDay, v)
	return u
}

// SetExpiredAt sets the "expired_at" field.
func (u *ShareLinkUpsert) SetExpiredAt(v time.Time) *ShareLinkUpsert {
	u.Set(sharelink.FieldExpiredAt, v)
	return u
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *ShareLinkUpsert) UpdateExpiredAt() *ShareLinkUpsert {
	u.SetExcluded(sharelink.FieldExpiredAt)
	return u
}

// SetRecentAt sets the "recent_at" field.
func (u *ShareLinkUpsert) SetRecentAt(v time.Time) *ShareLinkUpsert {
	u.Set(sharelink.FieldRecentAt, v)
	return u
}

// UpdateRecentAt sets the "recent_at" field to the value that was provided on create.
func (u *ShareLinkUpsert) UpdateRecentAt() *ShareLinkUpsert {
	u.SetExcluded(sharelink.FieldRecentAt)
	return u
}

// SetFolderNumber sets the "folder_number" field.
func (u *ShareLinkUpsert) SetFolderNumber(v string) *ShareLinkUpsert {
	u.Set(sharelink.FieldFolderNumber, v)
	return u
}

// UpdateFolderNumber sets the "folder_number" field to the value that was provided on create.
func (u *ShareLinkUpsert) UpdateFolderNumber() *ShareLinkUpsert {
	u.SetExcluded(sharelink.FieldFolderNumber)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ShareLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sharelink.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ShareLinkUpsertOne) UpdateNewValues() *ShareLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sharelink.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(sharelink.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(sharelink.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ShareLink.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ShareLinkUpsertOne) Ignore() *ShareLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShareLinkUpsertOne) DoNothing() *ShareLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShareLinkCreate.OnConflict
// documentation for more info.
func (u *ShareLinkUpsertOne) Update(set func(*ShareLinkUpsert)) *ShareLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShareLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *ShareLinkUpsertOne) SetUID(v string) *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *ShareLinkUpsertOne) UpdateUID() *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ShareLinkUpsertOne) SetCreatedAt(v time.Time) *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ShareLinkUpsertOne) UpdateCreatedAt() *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ShareLinkUpsertOne) SetUpdatedAt(v time.Time) *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ShareLinkUpsertOne) UpdateUpdatedAt() *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *ShareLinkUpsertOne) SetDeactivatedAt(v time.Time) *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *ShareLinkUpsertOne) UpdateDeactivatedAt() *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *ShareLinkUpsertOne) ClearDeactivatedAt() *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetFolderUID sets the "folder_uid" field.
func (u *ShareLinkUpsertOne) SetFolderUID(v string) *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetFolderUID(v)
	})
}

// UpdateFolderUID sets the "folder_uid" field to the value that was provided on create.
func (u *ShareLinkUpsertOne) UpdateFolderUID() *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateFolderUID()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *ShareLinkUpsertOne) SetUserUID(v string) *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *ShareLinkUpsertOne) UpdateUserUID() *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateUserUID()
	})
}

// SetAuthority sets the "authority" field.
func (u *ShareLinkUpsertOne) SetAuthority(v string) *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetAuthority(v)
	})
}

// UpdateAuthority sets the "authority" field to the value that was provided on create.
func (u *ShareLinkUpsertOne) UpdateAuthority() *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateAuthority()
	})
}

// SetValidDay sets the "valid_day" field.
func (u *ShareLinkUpsertOne) SetValidDay(v int) *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetValidDay(v)
	})
}

// AddValidDay adds v to the "valid_day" field.
func (u *ShareLinkUpsertOne) AddValidDay(v int) *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.AddValidDay(v)
	})
}

// UpdateValidDay sets the "valid_day" field to the value that was provided on create.
func (u *ShareLinkUpsertOne) UpdateValidDay() *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateValidDay()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *ShareLinkUpsertOne) SetExpiredAt(v time.Time) *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *ShareLinkUpsertOne) UpdateExpiredAt() *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateExpiredAt()
	})
}

// SetRecentAt sets the "recent_at" field.
func (u *ShareLinkUpsertOne) SetRecentAt(v time.Time) *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetRecentAt(v)
	})
}

// UpdateRecentAt sets the "recent_at" field to the value that was provided on create.
func (u *ShareLinkUpsertOne) UpdateRecentAt() *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateRecentAt()
	})
}

// SetFolderNumber sets the "folder_number" field.
func (u *ShareLinkUpsertOne) SetFolderNumber(v string) *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetFolderNumber(v)
	})
}

// UpdateFolderNumber sets the "folder_number" field to the value that was provided on create.
func (u *ShareLinkUpsertOne) UpdateFolderNumber() *ShareLinkUpsertOne {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateFolderNumber()
	})
}

// Exec executes the query.
func (u *ShareLinkUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for ShareLinkCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShareLinkUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ShareLinkUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ShareLinkUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ShareLinkCreateBulk is the builder for creating many ShareLink entities in bulk.
type ShareLinkCreateBulk struct {
	config
	builders []*ShareLinkCreate
	conflict []sql.ConflictOption
}

// Save creates the ShareLink entities in the database.
func (slcb *ShareLinkCreateBulk) Save(ctx context.Context) ([]*ShareLink, error) {
	specs := make([]*sqlgraph.CreateSpec, len(slcb.builders))
	nodes := make([]*ShareLink, len(slcb.builders))
	mutators := make([]Mutator, len(slcb.builders))
	for i := range slcb.builders {
		func(i int, root context.Context) {
			builder := slcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShareLinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, slcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = slcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, slcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, slcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (slcb *ShareLinkCreateBulk) SaveX(ctx context.Context) []*ShareLink {
	v, err := slcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slcb *ShareLinkCreateBulk) Exec(ctx context.Context) error {
	_, err := slcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slcb *ShareLinkCreateBulk) ExecX(ctx context.Context) {
	if err := slcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShareLink.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShareLinkUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (slcb *ShareLinkCreateBulk) OnConflict(opts ...sql.ConflictOption) *ShareLinkUpsertBulk {
	slcb.conflict = opts
	return &ShareLinkUpsertBulk{
		create: slcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShareLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (slcb *ShareLinkCreateBulk) OnConflictColumns(columns ...string) *ShareLinkUpsertBulk {
	slcb.conflict = append(slcb.conflict, sql.ConflictColumns(columns...))
	return &ShareLinkUpsertBulk{
		create: slcb,
	}
}

// ShareLinkUpsertBulk is the builder for "upsert"-ing
// a bulk of ShareLink nodes.
type ShareLinkUpsertBulk struct {
	create *ShareLinkCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ShareLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sharelink.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ShareLinkUpsertBulk) UpdateNewValues() *ShareLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sharelink.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(sharelink.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(sharelink.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShareLink.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ShareLinkUpsertBulk) Ignore() *ShareLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShareLinkUpsertBulk) DoNothing() *ShareLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShareLinkCreateBulk.OnConflict
// documentation for more info.
func (u *ShareLinkUpsertBulk) Update(set func(*ShareLinkUpsert)) *ShareLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShareLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *ShareLinkUpsertBulk) SetUID(v string) *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *ShareLinkUpsertBulk) UpdateUID() *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ShareLinkUpsertBulk) SetCreatedAt(v time.Time) *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ShareLinkUpsertBulk) UpdateCreatedAt() *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ShareLinkUpsertBulk) SetUpdatedAt(v time.Time) *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ShareLinkUpsertBulk) UpdateUpdatedAt() *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *ShareLinkUpsertBulk) SetDeactivatedAt(v time.Time) *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *ShareLinkUpsertBulk) UpdateDeactivatedAt() *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *ShareLinkUpsertBulk) ClearDeactivatedAt() *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetFolderUID sets the "folder_uid" field.
func (u *ShareLinkUpsertBulk) SetFolderUID(v string) *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetFolderUID(v)
	})
}

// UpdateFolderUID sets the "folder_uid" field to the value that was provided on create.
func (u *ShareLinkUpsertBulk) UpdateFolderUID() *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateFolderUID()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *ShareLinkUpsertBulk) SetUserUID(v string) *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *ShareLinkUpsertBulk) UpdateUserUID() *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateUserUID()
	})
}

// SetAuthority sets the "authority" field.
func (u *ShareLinkUpsertBulk) SetAuthority(v string) *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetAuthority(v)
	})
}

// UpdateAuthority sets the "authority" field to the value that was provided on create.
func (u *ShareLinkUpsertBulk) UpdateAuthority() *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateAuthority()
	})
}

// SetValidDay sets the "valid_day" field.
func (u *ShareLinkUpsertBulk) SetValidDay(v int) *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetValidDay(v)
	})
}

// AddValidDay adds v to the "valid_day" field.
func (u *ShareLinkUpsertBulk) AddValidDay(v int) *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.AddValidDay(v)
	})
}

// UpdateValidDay sets the "valid_day" field to the value that was provided on create.
func (u *ShareLinkUpsertBulk) UpdateValidDay() *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateValidDay()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *ShareLinkUpsertBulk) SetExpiredAt(v time.Time) *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *ShareLinkUpsertBulk) UpdateExpiredAt() *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateExpiredAt()
	})
}

// SetRecentAt sets the "recent_at" field.
func (u *ShareLinkUpsertBulk) SetRecentAt(v time.Time) *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetRecentAt(v)
	})
}

// UpdateRecentAt sets the "recent_at" field to the value that was provided on create.
func (u *ShareLinkUpsertBulk) UpdateRecentAt() *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateRecentAt()
	})
}

// SetFolderNumber sets the "folder_number" field.
func (u *ShareLinkUpsertBulk) SetFolderNumber(v string) *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.SetFolderNumber(v)
	})
}

// UpdateFolderNumber sets the "folder_number" field to the value that was provided on create.
func (u *ShareLinkUpsertBulk) UpdateFolderNumber() *ShareLinkUpsertBulk {
	return u.Update(func(s *ShareLinkUpsert) {
		s.UpdateFolderNumber()
	})
}

// Exec executes the query.
func (u *ShareLinkUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the ShareLinkCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for ShareLinkCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShareLinkUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
