// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/predicate"
	"tabelf/backend/gen/entschema/urlcrawl"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UrlCrawlUpdate is the builder for updating UrlCrawl entities.
type UrlCrawlUpdate struct {
	config
	hooks    []Hook
	mutation *UrlCrawlMutation
}

// Where appends a list predicates to the UrlCrawlUpdate builder.
func (ucu *UrlCrawlUpdate) Where(ps ...predicate.UrlCrawl) *UrlCrawlUpdate {
	ucu.mutation.Where(ps...)
	return ucu
}

// SetUpdatedAt sets the "updated_at" field.
func (ucu *UrlCrawlUpdate) SetUpdatedAt(t time.Time) *UrlCrawlUpdate {
	ucu.mutation.SetUpdatedAt(t)
	return ucu
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (ucu *UrlCrawlUpdate) SetDeactivatedAt(t time.Time) *UrlCrawlUpdate {
	ucu.mutation.SetDeactivatedAt(t)
	return ucu
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (ucu *UrlCrawlUpdate) SetNillableDeactivatedAt(t *time.Time) *UrlCrawlUpdate {
	if t != nil {
		ucu.SetDeactivatedAt(*t)
	}
	return ucu
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (ucu *UrlCrawlUpdate) ClearDeactivatedAt() *UrlCrawlUpdate {
	ucu.mutation.ClearDeactivatedAt()
	return ucu
}

// SetURL sets the "url" field.
func (ucu *UrlCrawlUpdate) SetURL(s string) *UrlCrawlUpdate {
	ucu.mutation.SetURL(s)
	return ucu
}

// SetCommunityUID sets the "community_uid" field.
func (ucu *UrlCrawlUpdate) SetCommunityUID(s string) *UrlCrawlUpdate {
	ucu.mutation.SetCommunityUID(s)
	return ucu
}

// SetNillableCommunityUID sets the "community_uid" field if the given value is not nil.
func (ucu *UrlCrawlUpdate) SetNillableCommunityUID(s *string) *UrlCrawlUpdate {
	if s != nil {
		ucu.SetCommunityUID(*s)
	}
	return ucu
}

// ClearCommunityUID clears the value of the "community_uid" field.
func (ucu *UrlCrawlUpdate) ClearCommunityUID() *UrlCrawlUpdate {
	ucu.mutation.ClearCommunityUID()
	return ucu
}

// SetCount sets the "count" field.
func (ucu *UrlCrawlUpdate) SetCount(i int) *UrlCrawlUpdate {
	ucu.mutation.ResetCount()
	ucu.mutation.SetCount(i)
	return ucu
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (ucu *UrlCrawlUpdate) SetNillableCount(i *int) *UrlCrawlUpdate {
	if i != nil {
		ucu.SetCount(*i)
	}
	return ucu
}

// AddCount adds i to the "count" field.
func (ucu *UrlCrawlUpdate) AddCount(i int) *UrlCrawlUpdate {
	ucu.mutation.AddCount(i)
	return ucu
}

// SetHasComplete sets the "has_complete" field.
func (ucu *UrlCrawlUpdate) SetHasComplete(b bool) *UrlCrawlUpdate {
	ucu.mutation.SetHasComplete(b)
	return ucu
}

// SetNillableHasComplete sets the "has_complete" field if the given value is not nil.
func (ucu *UrlCrawlUpdate) SetNillableHasComplete(b *bool) *UrlCrawlUpdate {
	if b != nil {
		ucu.SetHasComplete(*b)
	}
	return ucu
}

// Mutation returns the UrlCrawlMutation object of the builder.
func (ucu *UrlCrawlUpdate) Mutation() *UrlCrawlMutation {
	return ucu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucu *UrlCrawlUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ucu.defaults()
	if len(ucu.hooks) == 0 {
		affected, err = ucu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UrlCrawlMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ucu.mutation = mutation
			affected, err = ucu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ucu.hooks) - 1; i >= 0; i-- {
			if ucu.hooks[i] == nil {
				return 0, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = ucu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ucu *UrlCrawlUpdate) SaveX(ctx context.Context) int {
	affected, err := ucu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucu *UrlCrawlUpdate) Exec(ctx context.Context) error {
	_, err := ucu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucu *UrlCrawlUpdate) ExecX(ctx context.Context) {
	if err := ucu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucu *UrlCrawlUpdate) defaults() {
	if _, ok := ucu.mutation.UpdatedAt(); !ok {
		v := urlcrawl.UpdateDefaultUpdatedAt()
		ucu.mutation.SetUpdatedAt(v)
	}
}

func (ucu *UrlCrawlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   urlcrawl.Table,
			Columns: urlcrawl.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: urlcrawl.FieldID,
			},
		},
	}
	if ps := ucu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: urlcrawl.FieldUpdatedAt,
		})
	}
	if value, ok := ucu.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: urlcrawl.FieldDeactivatedAt,
		})
	}
	if ucu.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: urlcrawl.FieldDeactivatedAt,
		})
	}
	if value, ok := ucu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: urlcrawl.FieldURL,
		})
	}
	if value, ok := ucu.mutation.CommunityUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: urlcrawl.FieldCommunityUID,
		})
	}
	if ucu.mutation.CommunityUIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: urlcrawl.FieldCommunityUID,
		})
	}
	if value, ok := ucu.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: urlcrawl.FieldCount,
		})
	}
	if value, ok := ucu.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: urlcrawl.FieldCount,
		})
	}
	if value, ok := ucu.mutation.HasComplete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: urlcrawl.FieldHasComplete,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{urlcrawl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UrlCrawlUpdateOne is the builder for updating a single UrlCrawl entity.
type UrlCrawlUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UrlCrawlMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ucuo *UrlCrawlUpdateOne) SetUpdatedAt(t time.Time) *UrlCrawlUpdateOne {
	ucuo.mutation.SetUpdatedAt(t)
	return ucuo
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (ucuo *UrlCrawlUpdateOne) SetDeactivatedAt(t time.Time) *UrlCrawlUpdateOne {
	ucuo.mutation.SetDeactivatedAt(t)
	return ucuo
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (ucuo *UrlCrawlUpdateOne) SetNillableDeactivatedAt(t *time.Time) *UrlCrawlUpdateOne {
	if t != nil {
		ucuo.SetDeactivatedAt(*t)
	}
	return ucuo
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (ucuo *UrlCrawlUpdateOne) ClearDeactivatedAt() *UrlCrawlUpdateOne {
	ucuo.mutation.ClearDeactivatedAt()
	return ucuo
}

// SetURL sets the "url" field.
func (ucuo *UrlCrawlUpdateOne) SetURL(s string) *UrlCrawlUpdateOne {
	ucuo.mutation.SetURL(s)
	return ucuo
}

// SetCommunityUID sets the "community_uid" field.
func (ucuo *UrlCrawlUpdateOne) SetCommunityUID(s string) *UrlCrawlUpdateOne {
	ucuo.mutation.SetCommunityUID(s)
	return ucuo
}

// SetNillableCommunityUID sets the "community_uid" field if the given value is not nil.
func (ucuo *UrlCrawlUpdateOne) SetNillableCommunityUID(s *string) *UrlCrawlUpdateOne {
	if s != nil {
		ucuo.SetCommunityUID(*s)
	}
	return ucuo
}

// ClearCommunityUID clears the value of the "community_uid" field.
func (ucuo *UrlCrawlUpdateOne) ClearCommunityUID() *UrlCrawlUpdateOne {
	ucuo.mutation.ClearCommunityUID()
	return ucuo
}

// SetCount sets the "count" field.
func (ucuo *UrlCrawlUpdateOne) SetCount(i int) *UrlCrawlUpdateOne {
	ucuo.mutation.ResetCount()
	ucuo.mutation.SetCount(i)
	return ucuo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (ucuo *UrlCrawlUpdateOne) SetNillableCount(i *int) *UrlCrawlUpdateOne {
	if i != nil {
		ucuo.SetCount(*i)
	}
	return ucuo
}

// AddCount adds i to the "count" field.
func (ucuo *UrlCrawlUpdateOne) AddCount(i int) *UrlCrawlUpdateOne {
	ucuo.mutation.AddCount(i)
	return ucuo
}

// SetHasComplete sets the "has_complete" field.
func (ucuo *UrlCrawlUpdateOne) SetHasComplete(b bool) *UrlCrawlUpdateOne {
	ucuo.mutation.SetHasComplete(b)
	return ucuo
}

// SetNillableHasComplete sets the "has_complete" field if the given value is not nil.
func (ucuo *UrlCrawlUpdateOne) SetNillableHasComplete(b *bool) *UrlCrawlUpdateOne {
	if b != nil {
		ucuo.SetHasComplete(*b)
	}
	return ucuo
}

// Mutation returns the UrlCrawlMutation object of the builder.
func (ucuo *UrlCrawlUpdateOne) Mutation() *UrlCrawlMutation {
	return ucuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucuo *UrlCrawlUpdateOne) Select(field string, fields ...string) *UrlCrawlUpdateOne {
	ucuo.fields = append([]string{field}, fields...)
	return ucuo
}

// Save executes the query and returns the updated UrlCrawl entity.
func (ucuo *UrlCrawlUpdateOne) Save(ctx context.Context) (*UrlCrawl, error) {
	var (
		err  error
		node *UrlCrawl
	)
	ucuo.defaults()
	if len(ucuo.hooks) == 0 {
		node, err = ucuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UrlCrawlMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ucuo.mutation = mutation
			node, err = ucuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ucuo.hooks) - 1; i >= 0; i-- {
			if ucuo.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = ucuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ucuo *UrlCrawlUpdateOne) SaveX(ctx context.Context) *UrlCrawl {
	node, err := ucuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucuo *UrlCrawlUpdateOne) Exec(ctx context.Context) error {
	_, err := ucuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucuo *UrlCrawlUpdateOne) ExecX(ctx context.Context) {
	if err := ucuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucuo *UrlCrawlUpdateOne) defaults() {
	if _, ok := ucuo.mutation.UpdatedAt(); !ok {
		v := urlcrawl.UpdateDefaultUpdatedAt()
		ucuo.mutation.SetUpdatedAt(v)
	}
}

func (ucuo *UrlCrawlUpdateOne) sqlSave(ctx context.Context) (_node *UrlCrawl, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   urlcrawl.Table,
			Columns: urlcrawl.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: urlcrawl.FieldID,
			},
		},
	}
	id, ok := ucuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entschema: missing "UrlCrawl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, urlcrawl.FieldID)
		for _, f := range fields {
			if !urlcrawl.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entschema: invalid field %q for query", f)}
			}
			if f != urlcrawl.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: urlcrawl.FieldUpdatedAt,
		})
	}
	if value, ok := ucuo.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: urlcrawl.FieldDeactivatedAt,
		})
	}
	if ucuo.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: urlcrawl.FieldDeactivatedAt,
		})
	}
	if value, ok := ucuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: urlcrawl.FieldURL,
		})
	}
	if value, ok := ucuo.mutation.CommunityUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: urlcrawl.FieldCommunityUID,
		})
	}
	if ucuo.mutation.CommunityUIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: urlcrawl.FieldCommunityUID,
		})
	}
	if value, ok := ucuo.mutation.Count(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: urlcrawl.FieldCount,
		})
	}
	if value, ok := ucuo.mutation.AddedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: urlcrawl.FieldCount,
		})
	}
	if value, ok := ucuo.mutation.HasComplete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: urlcrawl.FieldHasComplete,
		})
	}
	_node = &UrlCrawl{config: ucuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{urlcrawl.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
