// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"fmt"
	"strings"
	"tabelf/backend/gen/entschema/collaboration"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Collaboration is the model entity for the Collaboration schema.
type Collaboration struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeactivatedAt holds the value of the "deactivated_at" field.
	DeactivatedAt *time.Time `json:"deactivated_at,omitempty"`
	// ShardUID holds the value of the "shard_uid" field.
	// 分享链接uid
	ShardUID string `json:"shard_uid,omitempty"`
	// FolderUID holds the value of the "folder_uid" field.
	// 文件uid
	FolderUID string `json:"folder_uid,omitempty"`
	// UserUID holds the value of the "user_uid" field.
	// 用户uid
	UserUID string `json:"user_uid,omitempty"`
	// Authority holds the value of the "authority" field.
	// 权限: 0 只读权限, 1 编辑权限
	Authority string `json:"authority,omitempty"`
	// FolderNumber holds the value of the "folder_number" field.
	// 文件编号
	FolderNumber string `json:"folder_number,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Collaboration) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case collaboration.FieldID:
			values[i] = new(sql.NullInt64)
		case collaboration.FieldUID, collaboration.FieldShardUID, collaboration.FieldFolderUID, collaboration.FieldUserUID, collaboration.FieldAuthority, collaboration.FieldFolderNumber:
			values[i] = new(sql.NullString)
		case collaboration.FieldCreatedAt, collaboration.FieldUpdatedAt, collaboration.FieldDeactivatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Collaboration", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Collaboration fields.
func (c *Collaboration) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case collaboration.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = uint64(value.Int64)
		case collaboration.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				c.UID = value.String
			}
		case collaboration.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case collaboration.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case collaboration.FieldDeactivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deactivated_at", values[i])
			} else if value.Valid {
				c.DeactivatedAt = new(time.Time)
				*c.DeactivatedAt = value.Time
			}
		case collaboration.FieldShardUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shard_uid", values[i])
			} else if value.Valid {
				c.ShardUID = value.String
			}
		case collaboration.FieldFolderUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field folder_uid", values[i])
			} else if value.Valid {
				c.FolderUID = value.String
			}
		case collaboration.FieldUserUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_uid", values[i])
			} else if value.Valid {
				c.UserUID = value.String
			}
		case collaboration.FieldAuthority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field authority", values[i])
			} else if value.Valid {
				c.Authority = value.String
			}
		case collaboration.FieldFolderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field folder_number", values[i])
			} else if value.Valid {
				c.FolderNumber = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Collaboration.
// Note that you need to call Collaboration.Unwrap() before calling this method if this Collaboration
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Collaboration) Update() *CollaborationUpdateOne {
	return (&CollaborationClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Collaboration entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Collaboration) Unwrap() *Collaboration {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("entschema: Collaboration is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Collaboration) String() string {
	var builder strings.Builder
	builder.WriteString("Collaboration(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", uid=")
	builder.WriteString(c.UID)
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	if v := c.DeactivatedAt; v != nil {
		builder.WriteString(", deactivated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", shard_uid=")
	builder.WriteString(c.ShardUID)
	builder.WriteString(", folder_uid=")
	builder.WriteString(c.FolderUID)
	builder.WriteString(", user_uid=")
	builder.WriteString(c.UserUID)
	builder.WriteString(", authority=")
	builder.WriteString(c.Authority)
	builder.WriteString(", folder_number=")
	builder.WriteString(c.FolderNumber)
	builder.WriteByte(')')
	return builder.String()
}

// Collaborations is a parsable slice of Collaboration.
type Collaborations []*Collaboration

func (c Collaborations) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
