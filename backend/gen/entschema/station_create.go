// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/station"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StationCreate is the builder for creating a Station entity.
type StationCreate struct {
	config
	mutation *StationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (sc *StationCreate) SetUID(s string) *StationCreate {
	sc.mutation.SetUID(s)
	return sc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (sc *StationCreate) SetNillableUID(s *string) *StationCreate {
	if s != nil {
		sc.SetUID(*s)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *StationCreate) SetCreatedAt(t time.Time) *StationCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StationCreate) SetNillableCreatedAt(t *time.Time) *StationCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StationCreate) SetUpdatedAt(t time.Time) *StationCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StationCreate) SetNillableUpdatedAt(t *time.Time) *StationCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (sc *StationCreate) SetDeactivatedAt(t time.Time) *StationCreate {
	sc.mutation.SetDeactivatedAt(t)
	return sc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (sc *StationCreate) SetNillableDeactivatedAt(t *time.Time) *StationCreate {
	if t != nil {
		sc.SetDeactivatedAt(*t)
	}
	return sc
}

// SetTitle sets the "title" field.
func (sc *StationCreate) SetTitle(s string) *StationCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *StationCreate) SetDescription(s string) *StationCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *StationCreate) SetNillableDescription(s *string) *StationCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetImage sets the "image" field.
func (sc *StationCreate) SetImage(s string) *StationCreate {
	sc.mutation.SetImage(s)
	return sc
}

// SetTags sets the "tags" field.
func (sc *StationCreate) SetTags(s []string) *StationCreate {
	sc.mutation.SetTags(s)
	return sc
}

// SetIcon sets the "icon" field.
func (sc *StationCreate) SetIcon(s string) *StationCreate {
	sc.mutation.SetIcon(s)
	return sc
}

// SetSource sets the "source" field.
func (sc *StationCreate) SetSource(s string) *StationCreate {
	sc.mutation.SetSource(s)
	return sc
}

// SetLink sets the "link" field.
func (sc *StationCreate) SetLink(s string) *StationCreate {
	sc.mutation.SetLink(s)
	return sc
}

// SetPraise sets the "praise" field.
func (sc *StationCreate) SetPraise(i int) *StationCreate {
	sc.mutation.SetPraise(i)
	return sc
}

// SetNillablePraise sets the "praise" field if the given value is not nil.
func (sc *StationCreate) SetNillablePraise(i *int) *StationCreate {
	if i != nil {
		sc.SetPraise(*i)
	}
	return sc
}

// SetStar sets the "star" field.
func (sc *StationCreate) SetStar(i int) *StationCreate {
	sc.mutation.SetStar(i)
	return sc
}

// SetNillableStar sets the "star" field if the given value is not nil.
func (sc *StationCreate) SetNillableStar(i *int) *StationCreate {
	if i != nil {
		sc.SetStar(*i)
	}
	return sc
}

// SetView sets the "view" field.
func (sc *StationCreate) SetView(i int) *StationCreate {
	sc.mutation.SetView(i)
	return sc
}

// SetNillableView sets the "view" field if the given value is not nil.
func (sc *StationCreate) SetNillableView(i *int) *StationCreate {
	if i != nil {
		sc.SetView(*i)
	}
	return sc
}

// SetUserUID sets the "user_uid" field.
func (sc *StationCreate) SetUserUID(s string) *StationCreate {
	sc.mutation.SetUserUID(s)
	return sc
}

// SetStatus sets the "status" field.
func (sc *StationCreate) SetStatus(b bool) *StationCreate {
	sc.mutation.SetStatus(b)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *StationCreate) SetNillableStatus(b *bool) *StationCreate {
	if b != nil {
		sc.SetStatus(*b)
	}
	return sc
}

// SetCategoryUID sets the "category_uid" field.
func (sc *StationCreate) SetCategoryUID(s string) *StationCreate {
	sc.mutation.SetCategoryUID(s)
	return sc
}

// SetID sets the "id" field.
func (sc *StationCreate) SetID(u uint64) *StationCreate {
	sc.mutation.SetID(u)
	return sc
}

// Mutation returns the StationMutation object of the builder.
func (sc *StationCreate) Mutation() *StationMutation {
	return sc.mutation
}

// Save creates the Station in the database.
func (sc *StationCreate) Save(ctx context.Context) (*Station, error) {
	var (
		err  error
		node *Station
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StationCreate) SaveX(ctx context.Context) *Station {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StationCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StationCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StationCreate) defaults() {
	if _, ok := sc.mutation.UID(); !ok {
		v := station.DefaultUID()
		sc.mutation.SetUID(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := station.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := station.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Praise(); !ok {
		v := station.DefaultPraise
		sc.mutation.SetPraise(v)
	}
	if _, ok := sc.mutation.Star(); !ok {
		v := station.DefaultStar
		sc.mutation.SetStar(v)
	}
	if _, ok := sc.mutation.View(); !ok {
		v := station.DefaultView
		sc.mutation.SetView(v)
	}
	if _, ok := sc.mutation.Status(); !ok {
		v := station.DefaultStatus
		sc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StationCreate) check() error {
	if _, ok := sc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "Station.uid"`)}
	}
	if v, ok := sc.mutation.UID(); ok {
		if err := station.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "Station.uid": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "Station.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "Station.updated_at"`)}
	}
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`entschema: missing required field "Station.title"`)}
	}
	if _, ok := sc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`entschema: missing required field "Station.image"`)}
	}
	if _, ok := sc.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New(`entschema: missing required field "Station.icon"`)}
	}
	if _, ok := sc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`entschema: missing required field "Station.source"`)}
	}
	if _, ok := sc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`entschema: missing required field "Station.link"`)}
	}
	if _, ok := sc.mutation.Praise(); !ok {
		return &ValidationError{Name: "praise", err: errors.New(`entschema: missing required field "Station.praise"`)}
	}
	if _, ok := sc.mutation.Star(); !ok {
		return &ValidationError{Name: "star", err: errors.New(`entschema: missing required field "Station.star"`)}
	}
	if _, ok := sc.mutation.View(); !ok {
		return &ValidationError{Name: "view", err: errors.New(`entschema: missing required field "Station.view"`)}
	}
	if _, ok := sc.mutation.UserUID(); !ok {
		return &ValidationError{Name: "user_uid", err: errors.New(`entschema: missing required field "Station.user_uid"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`entschema: missing required field "Station.status"`)}
	}
	if _, ok := sc.mutation.CategoryUID(); !ok {
		return &ValidationError{Name: "category_uid", err: errors.New(`entschema: missing required field "Station.category_uid"`)}
	}
	return nil
}

func (sc *StationCreate) sqlSave(ctx context.Context) (*Station, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (sc *StationCreate) createSpec() (*Station, *sqlgraph.CreateSpec) {
	var (
		_node = &Station{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: station.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: station.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: station.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: station.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: station.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := sc.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := sc.mutation.Tags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: station.FieldTags,
		})
		_node.Tags = value
	}
	if value, ok := sc.mutation.Icon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldIcon,
		})
		_node.Icon = value
	}
	if value, ok := sc.mutation.Source(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldSource,
		})
		_node.Source = value
	}
	if value, ok := sc.mutation.Link(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldLink,
		})
		_node.Link = value
	}
	if value, ok := sc.mutation.Praise(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: station.FieldPraise,
		})
		_node.Praise = value
	}
	if value, ok := sc.mutation.Star(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: station.FieldStar,
		})
		_node.Star = value
	}
	if value, ok := sc.mutation.View(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: station.FieldView,
		})
		_node.View = value
	}
	if value, ok := sc.mutation.UserUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldUserUID,
		})
		_node.UserUID = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: station.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := sc.mutation.CategoryUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldCategoryUID,
		})
		_node.CategoryUID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Station.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StationUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (sc *StationCreate) OnConflict(opts ...sql.ConflictOption) *StationUpsertOne {
	sc.conflict = opts
	return &StationUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Station.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *StationCreate) OnConflictColumns(columns ...string) *StationUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &StationUpsertOne{
		create: sc,
	}
}

type (
	// StationUpsertOne is the builder for "upsert"-ing
	//  one Station node.
	StationUpsertOne struct {
		create *StationCreate
	}

	// StationUpsert is the "OnConflict" setter.
	StationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *StationUpsert) SetUID(v string) *StationUpsert {
	u.Set(station.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *StationUpsert) UpdateUID() *StationUpsert {
	u.SetExcluded(station.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StationUpsert) SetCreatedAt(v time.Time) *StationUpsert {
	u.Set(station.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StationUpsert) UpdateCreatedAt() *StationUpsert {
	u.SetExcluded(station.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StationUpsert) SetUpdatedAt(v time.Time) *StationUpsert {
	u.Set(station.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StationUpsert) UpdateUpdatedAt() *StationUpsert {
	u.SetExcluded(station.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *StationUpsert) SetDeactivatedAt(v time.Time) *StationUpsert {
	u.Set(station.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *StationUpsert) UpdateDeactivatedAt() *StationUpsert {
	u.SetExcluded(station.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *StationUpsert) ClearDeactivatedAt() *StationUpsert {
	u.SetNull(station.FieldDeactivatedAt)
	return u
}

// SetTitle sets the "title" field.
func (u *StationUpsert) SetTitle(v string) *StationUpsert {
	u.Set(station.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *StationUpsert) UpdateTitle() *StationUpsert {
	u.SetExcluded(station.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *StationUpsert) SetDescription(v string) *StationUpsert {
	u.Set(station.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *StationUpsert) UpdateDescription() *StationUpsert {
	u.SetExcluded(station.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *StationUpsert) ClearDescription() *StationUpsert {
	u.SetNull(station.FieldDescription)
	return u
}

// SetImage sets the "image" field.
func (u *StationUpsert) SetImage(v string) *StationUpsert {
	u.Set(station.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *StationUpsert) UpdateImage() *StationUpsert {
	u.SetExcluded(station.FieldImage)
	return u
}

// SetTags sets the "tags" field.
func (u *StationUpsert) SetTags(v []string) *StationUpsert {
	u.Set(station.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *StationUpsert) UpdateTags() *StationUpsert {
	u.SetExcluded(station.FieldTags)
	return u
}

// ClearTags clears the value of the "tags" field.
func (u *StationUpsert) ClearTags() *StationUpsert {
	u.SetNull(station.FieldTags)
	return u
}

// SetIcon sets the "icon" field.
func (u *StationUpsert) SetIcon(v string) *StationUpsert {
	u.Set(station.FieldIcon, v)
	return u
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *StationUpsert) UpdateIcon() *StationUpsert {
	u.SetExcluded(station.FieldIcon)
	return u
}

// SetSource sets the "source" field.
func (u *StationUpsert) SetSource(v string) *StationUpsert {
	u.Set(station.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *StationUpsert) UpdateSource() *StationUpsert {
	u.SetExcluded(station.FieldSource)
	return u
}

// SetLink sets the "link" field.
func (u *StationUpsert) SetLink(v string) *StationUpsert {
	u.Set(station.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *StationUpsert) UpdateLink() *StationUpsert {
	u.SetExcluded(station.FieldLink)
	return u
}

// SetPraise sets the "praise" field.
func (u *StationUpsert) SetPraise(v int) *StationUpsert {
	u.Set(station.FieldPraise, v)
	return u
}

// UpdatePraise sets the "praise" field to the value that was provided on create.
func (u *StationUpsert) UpdatePraise() *StationUpsert {
	u.SetExcluded(station.FieldPraise)
	return u
}

// AddPraise adds v to the "praise" field.
func (u *StationUpsert) AddPraise(v int) *StationUpsert {
	u.Add(station.FieldPraise, v)
	return u
}

// SetStar sets the "star" field.
func (u *StationUpsert) SetStar(v int) *StationUpsert {
	u.Set(station.FieldStar, v)
	return u
}

// UpdateStar sets the "star" field to the value that was provided on create.
func (u *StationUpsert) UpdateStar() *StationUpsert {
	u.SetExcluded(station.FieldStar)
	return u
}

// AddStar adds v to the "star" field.
func (u *StationUpsert) AddStar(v int) *StationUpsert {
	u.Add(station.FieldStar, v)
	return u
}

// SetView sets the "view" field.
func (u *StationUpsert) SetView(v int) *StationUpsert {
	u.Set(station.FieldView, v)
	return u
}

// UpdateView sets the "view" field to the value that was provided on create.
func (u *StationUpsert) UpdateView() *StationUpsert {
	u.SetExcluded(station.FieldView)
	return u
}

// AddView adds v to the "view" field.
func (u *StationUpsert) AddView(v int) *StationUpsert {
	u.Add(station.FieldView, v)
	return u
}

// SetUserUID sets the "user_uid" field.
func (u *StationUpsert) SetUserUID(v string) *StationUpsert {
	u.Set(station.FieldUserUID, v)
	return u
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *StationUpsert) UpdateUserUID() *StationUpsert {
	u.SetExcluded(station.FieldUserUID)
	return u
}

// SetStatus sets the "status" field.
func (u *StationUpsert) SetStatus(v bool) *StationUpsert {
	u.Set(station.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *StationUpsert) UpdateStatus() *StationUpsert {
	u.SetExcluded(station.FieldStatus)
	return u
}

// SetCategoryUID sets the "category_uid" field.
func (u *StationUpsert) SetCategoryUID(v string) *StationUpsert {
	u.Set(station.FieldCategoryUID, v)
	return u
}

// UpdateCategoryUID sets the "category_uid" field to the value that was provided on create.
func (u *StationUpsert) UpdateCategoryUID() *StationUpsert {
	u.SetExcluded(station.FieldCategoryUID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Station.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(station.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *StationUpsertOne) UpdateNewValues() *StationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(station.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(station.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(station.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Station.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *StationUpsertOne) Ignore() *StationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StationUpsertOne) DoNothing() *StationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StationCreate.OnConflict
// documentation for more info.
func (u *StationUpsertOne) Update(set func(*StationUpsert)) *StationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *StationUpsertOne) SetUID(v string) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateUID() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *StationUpsertOne) SetCreatedAt(v time.Time) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateCreatedAt() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StationUpsertOne) SetUpdatedAt(v time.Time) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateUpdatedAt() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *StationUpsertOne) SetDeactivatedAt(v time.Time) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateDeactivatedAt() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *StationUpsertOne) ClearDeactivatedAt() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetTitle sets the "title" field.
func (u *StationUpsertOne) SetTitle(v string) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateTitle() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *StationUpsertOne) SetDescription(v string) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateDescription() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *StationUpsertOne) ClearDescription() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.ClearDescription()
	})
}

// SetImage sets the "image" field.
func (u *StationUpsertOne) SetImage(v string) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateImage() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateImage()
	})
}

// SetTags sets the "tags" field.
func (u *StationUpsertOne) SetTags(v []string) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateTags() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateTags()
	})
}

// ClearTags clears the value of the "tags" field.
func (u *StationUpsertOne) ClearTags() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.ClearTags()
	})
}

// SetIcon sets the "icon" field.
func (u *StationUpsertOne) SetIcon(v string) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateIcon() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateIcon()
	})
}

// SetSource sets the "source" field.
func (u *StationUpsertOne) SetSource(v string) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateSource() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateSource()
	})
}

// SetLink sets the "link" field.
func (u *StationUpsertOne) SetLink(v string) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateLink() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateLink()
	})
}

// SetPraise sets the "praise" field.
func (u *StationUpsertOne) SetPraise(v int) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetPraise(v)
	})
}

// AddPraise adds v to the "praise" field.
func (u *StationUpsertOne) AddPraise(v int) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.AddPraise(v)
	})
}

// UpdatePraise sets the "praise" field to the value that was provided on create.
func (u *StationUpsertOne) UpdatePraise() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdatePraise()
	})
}

// SetStar sets the "star" field.
func (u *StationUpsertOne) SetStar(v int) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetStar(v)
	})
}

// AddStar adds v to the "star" field.
func (u *StationUpsertOne) AddStar(v int) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.AddStar(v)
	})
}

// UpdateStar sets the "star" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateStar() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateStar()
	})
}

// SetView sets the "view" field.
func (u *StationUpsertOne) SetView(v int) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetView(v)
	})
}

// AddView adds v to the "view" field.
func (u *StationUpsertOne) AddView(v int) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.AddView(v)
	})
}

// UpdateView sets the "view" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateView() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateView()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *StationUpsertOne) SetUserUID(v string) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateUserUID() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateUserUID()
	})
}

// SetStatus sets the "status" field.
func (u *StationUpsertOne) SetStatus(v bool) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateStatus() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateStatus()
	})
}

// SetCategoryUID sets the "category_uid" field.
func (u *StationUpsertOne) SetCategoryUID(v string) *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.SetCategoryUID(v)
	})
}

// UpdateCategoryUID sets the "category_uid" field to the value that was provided on create.
func (u *StationUpsertOne) UpdateCategoryUID() *StationUpsertOne {
	return u.Update(func(s *StationUpsert) {
		s.UpdateCategoryUID()
	})
}

// Exec executes the query.
func (u *StationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for StationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StationUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StationUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StationCreateBulk is the builder for creating many Station entities in bulk.
type StationCreateBulk struct {
	config
	builders []*StationCreate
	conflict []sql.ConflictOption
}

// Save creates the Station entities in the database.
func (scb *StationCreateBulk) Save(ctx context.Context) ([]*Station, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Station, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StationCreateBulk) SaveX(ctx context.Context) []*Station {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StationCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StationCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Station.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StationUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (scb *StationCreateBulk) OnConflict(opts ...sql.ConflictOption) *StationUpsertBulk {
	scb.conflict = opts
	return &StationUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Station.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *StationCreateBulk) OnConflictColumns(columns ...string) *StationUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &StationUpsertBulk{
		create: scb,
	}
}

// StationUpsertBulk is the builder for "upsert"-ing
// a bulk of Station nodes.
type StationUpsertBulk struct {
	create *StationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Station.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(station.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *StationUpsertBulk) UpdateNewValues() *StationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(station.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(station.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(station.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Station.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *StationUpsertBulk) Ignore() *StationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StationUpsertBulk) DoNothing() *StationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StationCreateBulk.OnConflict
// documentation for more info.
func (u *StationUpsertBulk) Update(set func(*StationUpsert)) *StationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *StationUpsertBulk) SetUID(v string) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateUID() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *StationUpsertBulk) SetCreatedAt(v time.Time) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateCreatedAt() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StationUpsertBulk) SetUpdatedAt(v time.Time) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateUpdatedAt() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *StationUpsertBulk) SetDeactivatedAt(v time.Time) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateDeactivatedAt() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *StationUpsertBulk) ClearDeactivatedAt() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetTitle sets the "title" field.
func (u *StationUpsertBulk) SetTitle(v string) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateTitle() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *StationUpsertBulk) SetDescription(v string) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateDescription() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *StationUpsertBulk) ClearDescription() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.ClearDescription()
	})
}

// SetImage sets the "image" field.
func (u *StationUpsertBulk) SetImage(v string) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateImage() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateImage()
	})
}

// SetTags sets the "tags" field.
func (u *StationUpsertBulk) SetTags(v []string) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateTags() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateTags()
	})
}

// ClearTags clears the value of the "tags" field.
func (u *StationUpsertBulk) ClearTags() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.ClearTags()
	})
}

// SetIcon sets the "icon" field.
func (u *StationUpsertBulk) SetIcon(v string) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateIcon() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateIcon()
	})
}

// SetSource sets the "source" field.
func (u *StationUpsertBulk) SetSource(v string) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateSource() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateSource()
	})
}

// SetLink sets the "link" field.
func (u *StationUpsertBulk) SetLink(v string) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateLink() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateLink()
	})
}

// SetPraise sets the "praise" field.
func (u *StationUpsertBulk) SetPraise(v int) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetPraise(v)
	})
}

// AddPraise adds v to the "praise" field.
func (u *StationUpsertBulk) AddPraise(v int) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.AddPraise(v)
	})
}

// UpdatePraise sets the "praise" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdatePraise() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdatePraise()
	})
}

// SetStar sets the "star" field.
func (u *StationUpsertBulk) SetStar(v int) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetStar(v)
	})
}

// AddStar adds v to the "star" field.
func (u *StationUpsertBulk) AddStar(v int) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.AddStar(v)
	})
}

// UpdateStar sets the "star" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateStar() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateStar()
	})
}

// SetView sets the "view" field.
func (u *StationUpsertBulk) SetView(v int) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetView(v)
	})
}

// AddView adds v to the "view" field.
func (u *StationUpsertBulk) AddView(v int) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.AddView(v)
	})
}

// UpdateView sets the "view" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateView() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateView()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *StationUpsertBulk) SetUserUID(v string) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateUserUID() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateUserUID()
	})
}

// SetStatus sets the "status" field.
func (u *StationUpsertBulk) SetStatus(v bool) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateStatus() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateStatus()
	})
}

// SetCategoryUID sets the "category_uid" field.
func (u *StationUpsertBulk) SetCategoryUID(v string) *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.SetCategoryUID(v)
	})
}

// UpdateCategoryUID sets the "category_uid" field to the value that was provided on create.
func (u *StationUpsertBulk) UpdateCategoryUID() *StationUpsertBulk {
	return u.Update(func(s *StationUpsert) {
		s.UpdateCategoryUID()
	})
}

// Exec executes the query.
func (u *StationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the StationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for StationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
