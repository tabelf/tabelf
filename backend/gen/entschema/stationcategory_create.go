// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/stationcategory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StationCategoryCreate is the builder for creating a StationCategory entity.
type StationCategoryCreate struct {
	config
	mutation *StationCategoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (scc *StationCategoryCreate) SetUID(s string) *StationCategoryCreate {
	scc.mutation.SetUID(s)
	return scc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (scc *StationCategoryCreate) SetNillableUID(s *string) *StationCategoryCreate {
	if s != nil {
		scc.SetUID(*s)
	}
	return scc
}

// SetCreatedAt sets the "created_at" field.
func (scc *StationCategoryCreate) SetCreatedAt(t time.Time) *StationCategoryCreate {
	scc.mutation.SetCreatedAt(t)
	return scc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scc *StationCategoryCreate) SetNillableCreatedAt(t *time.Time) *StationCategoryCreate {
	if t != nil {
		scc.SetCreatedAt(*t)
	}
	return scc
}

// SetUpdatedAt sets the "updated_at" field.
func (scc *StationCategoryCreate) SetUpdatedAt(t time.Time) *StationCategoryCreate {
	scc.mutation.SetUpdatedAt(t)
	return scc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scc *StationCategoryCreate) SetNillableUpdatedAt(t *time.Time) *StationCategoryCreate {
	if t != nil {
		scc.SetUpdatedAt(*t)
	}
	return scc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (scc *StationCategoryCreate) SetDeactivatedAt(t time.Time) *StationCategoryCreate {
	scc.mutation.SetDeactivatedAt(t)
	return scc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (scc *StationCategoryCreate) SetNillableDeactivatedAt(t *time.Time) *StationCategoryCreate {
	if t != nil {
		scc.SetDeactivatedAt(*t)
	}
	return scc
}

// SetName sets the "name" field.
func (scc *StationCategoryCreate) SetName(s string) *StationCategoryCreate {
	scc.mutation.SetName(s)
	return scc
}

// SetStatus sets the "status" field.
func (scc *StationCategoryCreate) SetStatus(b bool) *StationCategoryCreate {
	scc.mutation.SetStatus(b)
	return scc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (scc *StationCategoryCreate) SetNillableStatus(b *bool) *StationCategoryCreate {
	if b != nil {
		scc.SetStatus(*b)
	}
	return scc
}

// SetSequence sets the "sequence" field.
func (scc *StationCategoryCreate) SetSequence(i int) *StationCategoryCreate {
	scc.mutation.SetSequence(i)
	return scc
}

// SetID sets the "id" field.
func (scc *StationCategoryCreate) SetID(u uint64) *StationCategoryCreate {
	scc.mutation.SetID(u)
	return scc
}

// Mutation returns the StationCategoryMutation object of the builder.
func (scc *StationCategoryCreate) Mutation() *StationCategoryMutation {
	return scc.mutation
}

// Save creates the StationCategory in the database.
func (scc *StationCategoryCreate) Save(ctx context.Context) (*StationCategory, error) {
	var (
		err  error
		node *StationCategory
	)
	scc.defaults()
	if len(scc.hooks) == 0 {
		if err = scc.check(); err != nil {
			return nil, err
		}
		node, err = scc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StationCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scc.check(); err != nil {
				return nil, err
			}
			scc.mutation = mutation
			if node, err = scc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(scc.hooks) - 1; i >= 0; i-- {
			if scc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = scc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (scc *StationCategoryCreate) SaveX(ctx context.Context) *StationCategory {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *StationCategoryCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *StationCategoryCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *StationCategoryCreate) defaults() {
	if _, ok := scc.mutation.UID(); !ok {
		v := stationcategory.DefaultUID()
		scc.mutation.SetUID(v)
	}
	if _, ok := scc.mutation.CreatedAt(); !ok {
		v := stationcategory.DefaultCreatedAt()
		scc.mutation.SetCreatedAt(v)
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		v := stationcategory.DefaultUpdatedAt()
		scc.mutation.SetUpdatedAt(v)
	}
	if _, ok := scc.mutation.Status(); !ok {
		v := stationcategory.DefaultStatus
		scc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *StationCategoryCreate) check() error {
	if _, ok := scc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "StationCategory.uid"`)}
	}
	if v, ok := scc.mutation.UID(); ok {
		if err := stationcategory.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "StationCategory.uid": %w`, err)}
		}
	}
	if _, ok := scc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "StationCategory.created_at"`)}
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "StationCategory.updated_at"`)}
	}
	if _, ok := scc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`entschema: missing required field "StationCategory.name"`)}
	}
	if _, ok := scc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`entschema: missing required field "StationCategory.status"`)}
	}
	if _, ok := scc.mutation.Sequence(); !ok {
		return &ValidationError{Name: "sequence", err: errors.New(`entschema: missing required field "StationCategory.sequence"`)}
	}
	return nil
}

func (scc *StationCategoryCreate) sqlSave(ctx context.Context) (*StationCategory, error) {
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (scc *StationCategoryCreate) createSpec() (*StationCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &StationCategory{config: scc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: stationcategory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: stationcategory.FieldID,
			},
		}
	)
	_spec.OnConflict = scc.conflict
	if id, ok := scc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := scc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stationcategory.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := scc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stationcategory.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := scc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stationcategory.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := scc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stationcategory.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := scc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stationcategory.FieldName,
		})
		_node.Name = value
	}
	if value, ok := scc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: stationcategory.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := scc.mutation.Sequence(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stationcategory.FieldSequence,
		})
		_node.Sequence = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.StationCategory.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StationCategoryUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (scc *StationCategoryCreate) OnConflict(opts ...sql.ConflictOption) *StationCategoryUpsertOne {
	scc.conflict = opts
	return &StationCategoryUpsertOne{
		create: scc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.StationCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scc *StationCategoryCreate) OnConflictColumns(columns ...string) *StationCategoryUpsertOne {
	scc.conflict = append(scc.conflict, sql.ConflictColumns(columns...))
	return &StationCategoryUpsertOne{
		create: scc,
	}
}

type (
	// StationCategoryUpsertOne is the builder for "upsert"-ing
	//  one StationCategory node.
	StationCategoryUpsertOne struct {
		create *StationCategoryCreate
	}

	// StationCategoryUpsert is the "OnConflict" setter.
	StationCategoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *StationCategoryUpsert) SetUID(v string) *StationCategoryUpsert {
	u.Set(stationcategory.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *StationCategoryUpsert) UpdateUID() *StationCategoryUpsert {
	u.SetExcluded(stationcategory.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StationCategoryUpsert) SetCreatedAt(v time.Time) *StationCategoryUpsert {
	u.Set(stationcategory.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StationCategoryUpsert) UpdateCreatedAt() *StationCategoryUpsert {
	u.SetExcluded(stationcategory.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StationCategoryUpsert) SetUpdatedAt(v time.Time) *StationCategoryUpsert {
	u.Set(stationcategory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StationCategoryUpsert) UpdateUpdatedAt() *StationCategoryUpsert {
	u.SetExcluded(stationcategory.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *StationCategoryUpsert) SetDeactivatedAt(v time.Time) *StationCategoryUpsert {
	u.Set(stationcategory.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *StationCategoryUpsert) UpdateDeactivatedAt() *StationCategoryUpsert {
	u.SetExcluded(stationcategory.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *StationCategoryUpsert) ClearDeactivatedAt() *StationCategoryUpsert {
	u.SetNull(stationcategory.FieldDeactivatedAt)
	return u
}

// SetName sets the "name" field.
func (u *StationCategoryUpsert) SetName(v string) *StationCategoryUpsert {
	u.Set(stationcategory.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StationCategoryUpsert) UpdateName() *StationCategoryUpsert {
	u.SetExcluded(stationcategory.FieldName)
	return u
}

// SetStatus sets the "status" field.
func (u *StationCategoryUpsert) SetStatus(v bool) *StationCategoryUpsert {
	u.Set(stationcategory.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *StationCategoryUpsert) UpdateStatus() *StationCategoryUpsert {
	u.SetExcluded(stationcategory.FieldStatus)
	return u
}

// SetSequence sets the "sequence" field.
func (u *StationCategoryUpsert) SetSequence(v int) *StationCategoryUpsert {
	u.Set(stationcategory.FieldSequence, v)
	return u
}

// UpdateSequence sets the "sequence" field to the value that was provided on create.
func (u *StationCategoryUpsert) UpdateSequence() *StationCategoryUpsert {
	u.SetExcluded(stationcategory.FieldSequence)
	return u
}

// AddSequence adds v to the "sequence" field.
func (u *StationCategoryUpsert) AddSequence(v int) *StationCategoryUpsert {
	u.Add(stationcategory.FieldSequence, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.StationCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(stationcategory.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *StationCategoryUpsertOne) UpdateNewValues() *StationCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(stationcategory.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(stationcategory.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(stationcategory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.StationCategory.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *StationCategoryUpsertOne) Ignore() *StationCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StationCategoryUpsertOne) DoNothing() *StationCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StationCategoryCreate.OnConflict
// documentation for more info.
func (u *StationCategoryUpsertOne) Update(set func(*StationCategoryUpsert)) *StationCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StationCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *StationCategoryUpsertOne) SetUID(v string) *StationCategoryUpsertOne {
	return u.Update(func(s *StationCategoryUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *StationCategoryUpsertOne) UpdateUID() *StationCategoryUpsertOne {
	return u.Update(func(s *StationCategoryUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *StationCategoryUpsertOne) SetCreatedAt(v time.Time) *StationCategoryUpsertOne {
	return u.Update(func(s *StationCategoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StationCategoryUpsertOne) UpdateCreatedAt() *StationCategoryUpsertOne {
	return u.Update(func(s *StationCategoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StationCategoryUpsertOne) SetUpdatedAt(v time.Time) *StationCategoryUpsertOne {
	return u.Update(func(s *StationCategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StationCategoryUpsertOne) UpdateUpdatedAt() *StationCategoryUpsertOne {
	return u.Update(func(s *StationCategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *StationCategoryUpsertOne) SetDeactivatedAt(v time.Time) *StationCategoryUpsertOne {
	return u.Update(func(s *StationCategoryUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *StationCategoryUpsertOne) UpdateDeactivatedAt() *StationCategoryUpsertOne {
	return u.Update(func(s *StationCategoryUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *StationCategoryUpsertOne) ClearDeactivatedAt() *StationCategoryUpsertOne {
	return u.Update(func(s *StationCategoryUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetName sets the "name" field.
func (u *StationCategoryUpsertOne) SetName(v string) *StationCategoryUpsertOne {
	return u.Update(func(s *StationCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StationCategoryUpsertOne) UpdateName() *StationCategoryUpsertOne {
	return u.Update(func(s *StationCategoryUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *StationCategoryUpsertOne) SetStatus(v bool) *StationCategoryUpsertOne {
	return u.Update(func(s *StationCategoryUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *StationCategoryUpsertOne) UpdateStatus() *StationCategoryUpsertOne {
	return u.Update(func(s *StationCategoryUpsert) {
		s.UpdateStatus()
	})
}

// SetSequence sets the "sequence" field.
func (u *StationCategoryUpsertOne) SetSequence(v int) *StationCategoryUpsertOne {
	return u.Update(func(s *StationCategoryUpsert) {
		s.SetSequence(v)
	})
}

// AddSequence adds v to the "sequence" field.
func (u *StationCategoryUpsertOne) AddSequence(v int) *StationCategoryUpsertOne {
	return u.Update(func(s *StationCategoryUpsert) {
		s.AddSequence(v)
	})
}

// UpdateSequence sets the "sequence" field to the value that was provided on create.
func (u *StationCategoryUpsertOne) UpdateSequence() *StationCategoryUpsertOne {
	return u.Update(func(s *StationCategoryUpsert) {
		s.UpdateSequence()
	})
}

// Exec executes the query.
func (u *StationCategoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for StationCategoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StationCategoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StationCategoryUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StationCategoryUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StationCategoryCreateBulk is the builder for creating many StationCategory entities in bulk.
type StationCategoryCreateBulk struct {
	config
	builders []*StationCategoryCreate
	conflict []sql.ConflictOption
}

// Save creates the StationCategory entities in the database.
func (sccb *StationCategoryCreateBulk) Save(ctx context.Context) ([]*StationCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*StationCategory, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StationCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *StationCategoryCreateBulk) SaveX(ctx context.Context) []*StationCategory {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *StationCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *StationCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.StationCategory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StationCategoryUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (sccb *StationCategoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *StationCategoryUpsertBulk {
	sccb.conflict = opts
	return &StationCategoryUpsertBulk{
		create: sccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.StationCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sccb *StationCategoryCreateBulk) OnConflictColumns(columns ...string) *StationCategoryUpsertBulk {
	sccb.conflict = append(sccb.conflict, sql.ConflictColumns(columns...))
	return &StationCategoryUpsertBulk{
		create: sccb,
	}
}

// StationCategoryUpsertBulk is the builder for "upsert"-ing
// a bulk of StationCategory nodes.
type StationCategoryUpsertBulk struct {
	create *StationCategoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.StationCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(stationcategory.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *StationCategoryUpsertBulk) UpdateNewValues() *StationCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(stationcategory.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(stationcategory.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(stationcategory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.StationCategory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *StationCategoryUpsertBulk) Ignore() *StationCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StationCategoryUpsertBulk) DoNothing() *StationCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StationCategoryCreateBulk.OnConflict
// documentation for more info.
func (u *StationCategoryUpsertBulk) Update(set func(*StationCategoryUpsert)) *StationCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StationCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *StationCategoryUpsertBulk) SetUID(v string) *StationCategoryUpsertBulk {
	return u.Update(func(s *StationCategoryUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *StationCategoryUpsertBulk) UpdateUID() *StationCategoryUpsertBulk {
	return u.Update(func(s *StationCategoryUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *StationCategoryUpsertBulk) SetCreatedAt(v time.Time) *StationCategoryUpsertBulk {
	return u.Update(func(s *StationCategoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StationCategoryUpsertBulk) UpdateCreatedAt() *StationCategoryUpsertBulk {
	return u.Update(func(s *StationCategoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StationCategoryUpsertBulk) SetUpdatedAt(v time.Time) *StationCategoryUpsertBulk {
	return u.Update(func(s *StationCategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StationCategoryUpsertBulk) UpdateUpdatedAt() *StationCategoryUpsertBulk {
	return u.Update(func(s *StationCategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *StationCategoryUpsertBulk) SetDeactivatedAt(v time.Time) *StationCategoryUpsertBulk {
	return u.Update(func(s *StationCategoryUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *StationCategoryUpsertBulk) UpdateDeactivatedAt() *StationCategoryUpsertBulk {
	return u.Update(func(s *StationCategoryUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *StationCategoryUpsertBulk) ClearDeactivatedAt() *StationCategoryUpsertBulk {
	return u.Update(func(s *StationCategoryUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetName sets the "name" field.
func (u *StationCategoryUpsertBulk) SetName(v string) *StationCategoryUpsertBulk {
	return u.Update(func(s *StationCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StationCategoryUpsertBulk) UpdateName() *StationCategoryUpsertBulk {
	return u.Update(func(s *StationCategoryUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *StationCategoryUpsertBulk) SetStatus(v bool) *StationCategoryUpsertBulk {
	return u.Update(func(s *StationCategoryUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *StationCategoryUpsertBulk) UpdateStatus() *StationCategoryUpsertBulk {
	return u.Update(func(s *StationCategoryUpsert) {
		s.UpdateStatus()
	})
}

// SetSequence sets the "sequence" field.
func (u *StationCategoryUpsertBulk) SetSequence(v int) *StationCategoryUpsertBulk {
	return u.Update(func(s *StationCategoryUpsert) {
		s.SetSequence(v)
	})
}

// AddSequence adds v to the "sequence" field.
func (u *StationCategoryUpsertBulk) AddSequence(v int) *StationCategoryUpsertBulk {
	return u.Update(func(s *StationCategoryUpsert) {
		s.AddSequence(v)
	})
}

// UpdateSequence sets the "sequence" field to the value that was provided on create.
func (u *StationCategoryUpsertBulk) UpdateSequence() *StationCategoryUpsertBulk {
	return u.Update(func(s *StationCategoryUpsert) {
		s.UpdateSequence()
	})
}

// Exec executes the query.
func (u *StationCategoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the StationCategoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for StationCategoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StationCategoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
