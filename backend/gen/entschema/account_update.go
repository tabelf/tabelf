// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/account"
	"tabelf/backend/gen/entschema/predicate"
	"tabelf/backend/spec/schema"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountUpdate is the builder for updating Account entities.
type AccountUpdate struct {
	config
	hooks    []Hook
	mutation *AccountMutation
}

// Where appends a list predicates to the AccountUpdate builder.
func (au *AccountUpdate) Where(ps ...predicate.Account) *AccountUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AccountUpdate) SetUpdatedAt(t time.Time) *AccountUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (au *AccountUpdate) SetDeactivatedAt(t time.Time) *AccountUpdate {
	au.mutation.SetDeactivatedAt(t)
	return au
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (au *AccountUpdate) SetNillableDeactivatedAt(t *time.Time) *AccountUpdate {
	if t != nil {
		au.SetDeactivatedAt(*t)
	}
	return au
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (au *AccountUpdate) ClearDeactivatedAt() *AccountUpdate {
	au.mutation.ClearDeactivatedAt()
	return au
}

// SetPhone sets the "phone" field.
func (au *AccountUpdate) SetPhone(s string) *AccountUpdate {
	au.mutation.SetPhone(s)
	return au
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (au *AccountUpdate) SetNillablePhone(s *string) *AccountUpdate {
	if s != nil {
		au.SetPhone(*s)
	}
	return au
}

// ClearPhone clears the value of the "phone" field.
func (au *AccountUpdate) ClearPhone() *AccountUpdate {
	au.mutation.ClearPhone()
	return au
}

// SetEmail sets the "email" field.
func (au *AccountUpdate) SetEmail(s string) *AccountUpdate {
	au.mutation.SetEmail(s)
	return au
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (au *AccountUpdate) SetNillableEmail(s *string) *AccountUpdate {
	if s != nil {
		au.SetEmail(*s)
	}
	return au
}

// ClearEmail clears the value of the "email" field.
func (au *AccountUpdate) ClearEmail() *AccountUpdate {
	au.mutation.ClearEmail()
	return au
}

// SetNickname sets the "nickname" field.
func (au *AccountUpdate) SetNickname(s string) *AccountUpdate {
	au.mutation.SetNickname(s)
	return au
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (au *AccountUpdate) SetNillableNickname(s *string) *AccountUpdate {
	if s != nil {
		au.SetNickname(*s)
	}
	return au
}

// ClearNickname clears the value of the "nickname" field.
func (au *AccountUpdate) ClearNickname() *AccountUpdate {
	au.mutation.ClearNickname()
	return au
}

// SetSex sets the "sex" field.
func (au *AccountUpdate) SetSex(i int) *AccountUpdate {
	au.mutation.ResetSex()
	au.mutation.SetSex(i)
	return au
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (au *AccountUpdate) SetNillableSex(i *int) *AccountUpdate {
	if i != nil {
		au.SetSex(*i)
	}
	return au
}

// AddSex adds i to the "sex" field.
func (au *AccountUpdate) AddSex(i int) *AccountUpdate {
	au.mutation.AddSex(i)
	return au
}

// SetPassword sets the "password" field.
func (au *AccountUpdate) SetPassword(s string) *AccountUpdate {
	au.mutation.SetPassword(s)
	return au
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (au *AccountUpdate) SetNillablePassword(s *string) *AccountUpdate {
	if s != nil {
		au.SetPassword(*s)
	}
	return au
}

// ClearPassword clears the value of the "password" field.
func (au *AccountUpdate) ClearPassword() *AccountUpdate {
	au.mutation.ClearPassword()
	return au
}

// SetWxOpenid sets the "wx_openid" field.
func (au *AccountUpdate) SetWxOpenid(s string) *AccountUpdate {
	au.mutation.SetWxOpenid(s)
	return au
}

// SetNillableWxOpenid sets the "wx_openid" field if the given value is not nil.
func (au *AccountUpdate) SetNillableWxOpenid(s *string) *AccountUpdate {
	if s != nil {
		au.SetWxOpenid(*s)
	}
	return au
}

// ClearWxOpenid clears the value of the "wx_openid" field.
func (au *AccountUpdate) ClearWxOpenid() *AccountUpdate {
	au.mutation.ClearWxOpenid()
	return au
}

// SetImage sets the "image" field.
func (au *AccountUpdate) SetImage(s string) *AccountUpdate {
	au.mutation.SetImage(s)
	return au
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (au *AccountUpdate) SetNillableImage(s *string) *AccountUpdate {
	if s != nil {
		au.SetImage(*s)
	}
	return au
}

// ClearImage clears the value of the "image" field.
func (au *AccountUpdate) ClearImage() *AccountUpdate {
	au.mutation.ClearImage()
	return au
}

// SetIndustry sets the "industry" field.
func (au *AccountUpdate) SetIndustry(s string) *AccountUpdate {
	au.mutation.SetIndustry(s)
	return au
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (au *AccountUpdate) SetNillableIndustry(s *string) *AccountUpdate {
	if s != nil {
		au.SetIndustry(*s)
	}
	return au
}

// ClearIndustry clears the value of the "industry" field.
func (au *AccountUpdate) ClearIndustry() *AccountUpdate {
	au.mutation.ClearIndustry()
	return au
}

// SetDescription sets the "description" field.
func (au *AccountUpdate) SetDescription(s string) *AccountUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AccountUpdate) SetNillableDescription(s *string) *AccountUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AccountUpdate) ClearDescription() *AccountUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetAddress sets the "address" field.
func (au *AccountUpdate) SetAddress(s schema.Address) *AccountUpdate {
	au.mutation.SetAddress(s)
	return au
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (au *AccountUpdate) SetNillableAddress(s *schema.Address) *AccountUpdate {
	if s != nil {
		au.SetAddress(*s)
	}
	return au
}

// ClearAddress clears the value of the "address" field.
func (au *AccountUpdate) ClearAddress() *AccountUpdate {
	au.mutation.ClearAddress()
	return au
}

// SetAuthCode sets the "auth_code" field.
func (au *AccountUpdate) SetAuthCode(s string) *AccountUpdate {
	au.mutation.SetAuthCode(s)
	return au
}

// SetAuthExpired sets the "auth_expired" field.
func (au *AccountUpdate) SetAuthExpired(t time.Time) *AccountUpdate {
	au.mutation.SetAuthExpired(t)
	return au
}

// SetURLCount sets the "url_count" field.
func (au *AccountUpdate) SetURLCount(i int) *AccountUpdate {
	au.mutation.ResetURLCount()
	au.mutation.SetURLCount(i)
	return au
}

// SetNillableURLCount sets the "url_count" field if the given value is not nil.
func (au *AccountUpdate) SetNillableURLCount(i *int) *AccountUpdate {
	if i != nil {
		au.SetURLCount(*i)
	}
	return au
}

// AddURLCount adds i to the "url_count" field.
func (au *AccountUpdate) AddURLCount(i int) *AccountUpdate {
	au.mutation.AddURLCount(i)
	return au
}

// SetURLLimit sets the "url_limit" field.
func (au *AccountUpdate) SetURLLimit(i int) *AccountUpdate {
	au.mutation.ResetURLLimit()
	au.mutation.SetURLLimit(i)
	return au
}

// SetNillableURLLimit sets the "url_limit" field if the given value is not nil.
func (au *AccountUpdate) SetNillableURLLimit(i *int) *AccountUpdate {
	if i != nil {
		au.SetURLLimit(*i)
	}
	return au
}

// AddURLLimit adds i to the "url_limit" field.
func (au *AccountUpdate) AddURLLimit(i int) *AccountUpdate {
	au.mutation.AddURLLimit(i)
	return au
}

// SetMemberType sets the "member_type" field.
func (au *AccountUpdate) SetMemberType(s string) *AccountUpdate {
	au.mutation.SetMemberType(s)
	return au
}

// SetNillableMemberType sets the "member_type" field if the given value is not nil.
func (au *AccountUpdate) SetNillableMemberType(s *string) *AccountUpdate {
	if s != nil {
		au.SetMemberType(*s)
	}
	return au
}

// SetMemberExpired sets the "member_expired" field.
func (au *AccountUpdate) SetMemberExpired(t time.Time) *AccountUpdate {
	au.mutation.SetMemberExpired(t)
	return au
}

// SetNillableMemberExpired sets the "member_expired" field if the given value is not nil.
func (au *AccountUpdate) SetNillableMemberExpired(t *time.Time) *AccountUpdate {
	if t != nil {
		au.SetMemberExpired(*t)
	}
	return au
}

// ClearMemberExpired clears the value of the "member_expired" field.
func (au *AccountUpdate) ClearMemberExpired() *AccountUpdate {
	au.mutation.ClearMemberExpired()
	return au
}

// SetHasEntire sets the "has_entire" field.
func (au *AccountUpdate) SetHasEntire(b bool) *AccountUpdate {
	au.mutation.SetHasEntire(b)
	return au
}

// SetNillableHasEntire sets the "has_entire" field if the given value is not nil.
func (au *AccountUpdate) SetNillableHasEntire(b *bool) *AccountUpdate {
	if b != nil {
		au.SetHasEntire(*b)
	}
	return au
}

// SetHasNew sets the "has_new" field.
func (au *AccountUpdate) SetHasNew(b bool) *AccountUpdate {
	au.mutation.SetHasNew(b)
	return au
}

// SetNillableHasNew sets the "has_new" field if the given value is not nil.
func (au *AccountUpdate) SetNillableHasNew(b *bool) *AccountUpdate {
	if b != nil {
		au.SetHasNew(*b)
	}
	return au
}

// SetHasAdmin sets the "has_admin" field.
func (au *AccountUpdate) SetHasAdmin(b bool) *AccountUpdate {
	au.mutation.SetHasAdmin(b)
	return au
}

// SetNillableHasAdmin sets the "has_admin" field if the given value is not nil.
func (au *AccountUpdate) SetNillableHasAdmin(b *bool) *AccountUpdate {
	if b != nil {
		au.SetHasAdmin(*b)
	}
	return au
}

// SetFans sets the "fans" field.
func (au *AccountUpdate) SetFans(i int) *AccountUpdate {
	au.mutation.ResetFans()
	au.mutation.SetFans(i)
	return au
}

// SetNillableFans sets the "fans" field if the given value is not nil.
func (au *AccountUpdate) SetNillableFans(i *int) *AccountUpdate {
	if i != nil {
		au.SetFans(*i)
	}
	return au
}

// AddFans adds i to the "fans" field.
func (au *AccountUpdate) AddFans(i int) *AccountUpdate {
	au.mutation.AddFans(i)
	return au
}

// SetFocus sets the "focus" field.
func (au *AccountUpdate) SetFocus(i int) *AccountUpdate {
	au.mutation.ResetFocus()
	au.mutation.SetFocus(i)
	return au
}

// SetNillableFocus sets the "focus" field if the given value is not nil.
func (au *AccountUpdate) SetNillableFocus(i *int) *AccountUpdate {
	if i != nil {
		au.SetFocus(*i)
	}
	return au
}

// AddFocus adds i to the "focus" field.
func (au *AccountUpdate) AddFocus(i int) *AccountUpdate {
	au.mutation.AddFocus(i)
	return au
}

// Mutation returns the AccountMutation object of the builder.
func (au *AccountUpdate) Mutation() *AccountMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AccountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AccountUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := account.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *AccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   account.Table,
			Columns: account.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: account.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDeactivatedAt,
		})
	}
	if au.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: account.FieldDeactivatedAt,
		})
	}
	if value, ok := au.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldPhone,
		})
	}
	if au.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldPhone,
		})
	}
	if value, ok := au.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldEmail,
		})
	}
	if au.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldEmail,
		})
	}
	if value, ok := au.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldNickname,
		})
	}
	if au.mutation.NicknameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldNickname,
		})
	}
	if value, ok := au.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldSex,
		})
	}
	if value, ok := au.mutation.AddedSex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldSex,
		})
	}
	if value, ok := au.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldPassword,
		})
	}
	if au.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldPassword,
		})
	}
	if value, ok := au.mutation.WxOpenid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldWxOpenid,
		})
	}
	if au.mutation.WxOpenidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldWxOpenid,
		})
	}
	if value, ok := au.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldImage,
		})
	}
	if au.mutation.ImageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldImage,
		})
	}
	if value, ok := au.mutation.Industry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldIndustry,
		})
	}
	if au.mutation.IndustryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldIndustry,
		})
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldDescription,
		})
	}
	if au.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldDescription,
		})
	}
	if value, ok := au.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: account.FieldAddress,
		})
	}
	if au.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: account.FieldAddress,
		})
	}
	if value, ok := au.mutation.AuthCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldAuthCode,
		})
	}
	if value, ok := au.mutation.AuthExpired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldAuthExpired,
		})
	}
	if value, ok := au.mutation.URLCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldURLCount,
		})
	}
	if value, ok := au.mutation.AddedURLCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldURLCount,
		})
	}
	if value, ok := au.mutation.URLLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldURLLimit,
		})
	}
	if value, ok := au.mutation.AddedURLLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldURLLimit,
		})
	}
	if value, ok := au.mutation.MemberType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldMemberType,
		})
	}
	if value, ok := au.mutation.MemberExpired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldMemberExpired,
		})
	}
	if au.mutation.MemberExpiredCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: account.FieldMemberExpired,
		})
	}
	if value, ok := au.mutation.HasEntire(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: account.FieldHasEntire,
		})
	}
	if value, ok := au.mutation.HasNew(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: account.FieldHasNew,
		})
	}
	if value, ok := au.mutation.HasAdmin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: account.FieldHasAdmin,
		})
	}
	if value, ok := au.mutation.Fans(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldFans,
		})
	}
	if value, ok := au.mutation.AddedFans(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldFans,
		})
	}
	if value, ok := au.mutation.Focus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldFocus,
		})
	}
	if value, ok := au.mutation.AddedFocus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldFocus,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AccountUpdateOne is the builder for updating a single Account entity.
type AccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AccountUpdateOne) SetUpdatedAt(t time.Time) *AccountUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (auo *AccountUpdateOne) SetDeactivatedAt(t time.Time) *AccountUpdateOne {
	auo.mutation.SetDeactivatedAt(t)
	return auo
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableDeactivatedAt(t *time.Time) *AccountUpdateOne {
	if t != nil {
		auo.SetDeactivatedAt(*t)
	}
	return auo
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (auo *AccountUpdateOne) ClearDeactivatedAt() *AccountUpdateOne {
	auo.mutation.ClearDeactivatedAt()
	return auo
}

// SetPhone sets the "phone" field.
func (auo *AccountUpdateOne) SetPhone(s string) *AccountUpdateOne {
	auo.mutation.SetPhone(s)
	return auo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillablePhone(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetPhone(*s)
	}
	return auo
}

// ClearPhone clears the value of the "phone" field.
func (auo *AccountUpdateOne) ClearPhone() *AccountUpdateOne {
	auo.mutation.ClearPhone()
	return auo
}

// SetEmail sets the "email" field.
func (auo *AccountUpdateOne) SetEmail(s string) *AccountUpdateOne {
	auo.mutation.SetEmail(s)
	return auo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableEmail(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetEmail(*s)
	}
	return auo
}

// ClearEmail clears the value of the "email" field.
func (auo *AccountUpdateOne) ClearEmail() *AccountUpdateOne {
	auo.mutation.ClearEmail()
	return auo
}

// SetNickname sets the "nickname" field.
func (auo *AccountUpdateOne) SetNickname(s string) *AccountUpdateOne {
	auo.mutation.SetNickname(s)
	return auo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableNickname(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetNickname(*s)
	}
	return auo
}

// ClearNickname clears the value of the "nickname" field.
func (auo *AccountUpdateOne) ClearNickname() *AccountUpdateOne {
	auo.mutation.ClearNickname()
	return auo
}

// SetSex sets the "sex" field.
func (auo *AccountUpdateOne) SetSex(i int) *AccountUpdateOne {
	auo.mutation.ResetSex()
	auo.mutation.SetSex(i)
	return auo
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableSex(i *int) *AccountUpdateOne {
	if i != nil {
		auo.SetSex(*i)
	}
	return auo
}

// AddSex adds i to the "sex" field.
func (auo *AccountUpdateOne) AddSex(i int) *AccountUpdateOne {
	auo.mutation.AddSex(i)
	return auo
}

// SetPassword sets the "password" field.
func (auo *AccountUpdateOne) SetPassword(s string) *AccountUpdateOne {
	auo.mutation.SetPassword(s)
	return auo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillablePassword(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetPassword(*s)
	}
	return auo
}

// ClearPassword clears the value of the "password" field.
func (auo *AccountUpdateOne) ClearPassword() *AccountUpdateOne {
	auo.mutation.ClearPassword()
	return auo
}

// SetWxOpenid sets the "wx_openid" field.
func (auo *AccountUpdateOne) SetWxOpenid(s string) *AccountUpdateOne {
	auo.mutation.SetWxOpenid(s)
	return auo
}

// SetNillableWxOpenid sets the "wx_openid" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableWxOpenid(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetWxOpenid(*s)
	}
	return auo
}

// ClearWxOpenid clears the value of the "wx_openid" field.
func (auo *AccountUpdateOne) ClearWxOpenid() *AccountUpdateOne {
	auo.mutation.ClearWxOpenid()
	return auo
}

// SetImage sets the "image" field.
func (auo *AccountUpdateOne) SetImage(s string) *AccountUpdateOne {
	auo.mutation.SetImage(s)
	return auo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableImage(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetImage(*s)
	}
	return auo
}

// ClearImage clears the value of the "image" field.
func (auo *AccountUpdateOne) ClearImage() *AccountUpdateOne {
	auo.mutation.ClearImage()
	return auo
}

// SetIndustry sets the "industry" field.
func (auo *AccountUpdateOne) SetIndustry(s string) *AccountUpdateOne {
	auo.mutation.SetIndustry(s)
	return auo
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableIndustry(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetIndustry(*s)
	}
	return auo
}

// ClearIndustry clears the value of the "industry" field.
func (auo *AccountUpdateOne) ClearIndustry() *AccountUpdateOne {
	auo.mutation.ClearIndustry()
	return auo
}

// SetDescription sets the "description" field.
func (auo *AccountUpdateOne) SetDescription(s string) *AccountUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableDescription(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AccountUpdateOne) ClearDescription() *AccountUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetAddress sets the "address" field.
func (auo *AccountUpdateOne) SetAddress(s schema.Address) *AccountUpdateOne {
	auo.mutation.SetAddress(s)
	return auo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableAddress(s *schema.Address) *AccountUpdateOne {
	if s != nil {
		auo.SetAddress(*s)
	}
	return auo
}

// ClearAddress clears the value of the "address" field.
func (auo *AccountUpdateOne) ClearAddress() *AccountUpdateOne {
	auo.mutation.ClearAddress()
	return auo
}

// SetAuthCode sets the "auth_code" field.
func (auo *AccountUpdateOne) SetAuthCode(s string) *AccountUpdateOne {
	auo.mutation.SetAuthCode(s)
	return auo
}

// SetAuthExpired sets the "auth_expired" field.
func (auo *AccountUpdateOne) SetAuthExpired(t time.Time) *AccountUpdateOne {
	auo.mutation.SetAuthExpired(t)
	return auo
}

// SetURLCount sets the "url_count" field.
func (auo *AccountUpdateOne) SetURLCount(i int) *AccountUpdateOne {
	auo.mutation.ResetURLCount()
	auo.mutation.SetURLCount(i)
	return auo
}

// SetNillableURLCount sets the "url_count" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableURLCount(i *int) *AccountUpdateOne {
	if i != nil {
		auo.SetURLCount(*i)
	}
	return auo
}

// AddURLCount adds i to the "url_count" field.
func (auo *AccountUpdateOne) AddURLCount(i int) *AccountUpdateOne {
	auo.mutation.AddURLCount(i)
	return auo
}

// SetURLLimit sets the "url_limit" field.
func (auo *AccountUpdateOne) SetURLLimit(i int) *AccountUpdateOne {
	auo.mutation.ResetURLLimit()
	auo.mutation.SetURLLimit(i)
	return auo
}

// SetNillableURLLimit sets the "url_limit" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableURLLimit(i *int) *AccountUpdateOne {
	if i != nil {
		auo.SetURLLimit(*i)
	}
	return auo
}

// AddURLLimit adds i to the "url_limit" field.
func (auo *AccountUpdateOne) AddURLLimit(i int) *AccountUpdateOne {
	auo.mutation.AddURLLimit(i)
	return auo
}

// SetMemberType sets the "member_type" field.
func (auo *AccountUpdateOne) SetMemberType(s string) *AccountUpdateOne {
	auo.mutation.SetMemberType(s)
	return auo
}

// SetNillableMemberType sets the "member_type" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableMemberType(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetMemberType(*s)
	}
	return auo
}

// SetMemberExpired sets the "member_expired" field.
func (auo *AccountUpdateOne) SetMemberExpired(t time.Time) *AccountUpdateOne {
	auo.mutation.SetMemberExpired(t)
	return auo
}

// SetNillableMemberExpired sets the "member_expired" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableMemberExpired(t *time.Time) *AccountUpdateOne {
	if t != nil {
		auo.SetMemberExpired(*t)
	}
	return auo
}

// ClearMemberExpired clears the value of the "member_expired" field.
func (auo *AccountUpdateOne) ClearMemberExpired() *AccountUpdateOne {
	auo.mutation.ClearMemberExpired()
	return auo
}

// SetHasEntire sets the "has_entire" field.
func (auo *AccountUpdateOne) SetHasEntire(b bool) *AccountUpdateOne {
	auo.mutation.SetHasEntire(b)
	return auo
}

// SetNillableHasEntire sets the "has_entire" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableHasEntire(b *bool) *AccountUpdateOne {
	if b != nil {
		auo.SetHasEntire(*b)
	}
	return auo
}

// SetHasNew sets the "has_new" field.
func (auo *AccountUpdateOne) SetHasNew(b bool) *AccountUpdateOne {
	auo.mutation.SetHasNew(b)
	return auo
}

// SetNillableHasNew sets the "has_new" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableHasNew(b *bool) *AccountUpdateOne {
	if b != nil {
		auo.SetHasNew(*b)
	}
	return auo
}

// SetHasAdmin sets the "has_admin" field.
func (auo *AccountUpdateOne) SetHasAdmin(b bool) *AccountUpdateOne {
	auo.mutation.SetHasAdmin(b)
	return auo
}

// SetNillableHasAdmin sets the "has_admin" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableHasAdmin(b *bool) *AccountUpdateOne {
	if b != nil {
		auo.SetHasAdmin(*b)
	}
	return auo
}

// SetFans sets the "fans" field.
func (auo *AccountUpdateOne) SetFans(i int) *AccountUpdateOne {
	auo.mutation.ResetFans()
	auo.mutation.SetFans(i)
	return auo
}

// SetNillableFans sets the "fans" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableFans(i *int) *AccountUpdateOne {
	if i != nil {
		auo.SetFans(*i)
	}
	return auo
}

// AddFans adds i to the "fans" field.
func (auo *AccountUpdateOne) AddFans(i int) *AccountUpdateOne {
	auo.mutation.AddFans(i)
	return auo
}

// SetFocus sets the "focus" field.
func (auo *AccountUpdateOne) SetFocus(i int) *AccountUpdateOne {
	auo.mutation.ResetFocus()
	auo.mutation.SetFocus(i)
	return auo
}

// SetNillableFocus sets the "focus" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableFocus(i *int) *AccountUpdateOne {
	if i != nil {
		auo.SetFocus(*i)
	}
	return auo
}

// AddFocus adds i to the "focus" field.
func (auo *AccountUpdateOne) AddFocus(i int) *AccountUpdateOne {
	auo.mutation.AddFocus(i)
	return auo
}

// Mutation returns the AccountMutation object of the builder.
func (auo *AccountUpdateOne) Mutation() *AccountMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AccountUpdateOne) Select(field string, fields ...string) *AccountUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Account entity.
func (auo *AccountUpdateOne) Save(ctx context.Context) (*Account, error) {
	var (
		err  error
		node *Account
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountUpdateOne) SaveX(ctx context.Context) *Account {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AccountUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AccountUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := account.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *AccountUpdateOne) sqlSave(ctx context.Context) (_node *Account, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   account.Table,
			Columns: account.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: account.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entschema: missing "Account.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, account.FieldID)
		for _, f := range fields {
			if !account.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entschema: invalid field %q for query", f)}
			}
			if f != account.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDeactivatedAt,
		})
	}
	if auo.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: account.FieldDeactivatedAt,
		})
	}
	if value, ok := auo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldPhone,
		})
	}
	if auo.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldPhone,
		})
	}
	if value, ok := auo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldEmail,
		})
	}
	if auo.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldEmail,
		})
	}
	if value, ok := auo.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldNickname,
		})
	}
	if auo.mutation.NicknameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldNickname,
		})
	}
	if value, ok := auo.mutation.Sex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldSex,
		})
	}
	if value, ok := auo.mutation.AddedSex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldSex,
		})
	}
	if value, ok := auo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldPassword,
		})
	}
	if auo.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldPassword,
		})
	}
	if value, ok := auo.mutation.WxOpenid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldWxOpenid,
		})
	}
	if auo.mutation.WxOpenidCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldWxOpenid,
		})
	}
	if value, ok := auo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldImage,
		})
	}
	if auo.mutation.ImageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldImage,
		})
	}
	if value, ok := auo.mutation.Industry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldIndustry,
		})
	}
	if auo.mutation.IndustryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldIndustry,
		})
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldDescription,
		})
	}
	if auo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldDescription,
		})
	}
	if value, ok := auo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: account.FieldAddress,
		})
	}
	if auo.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: account.FieldAddress,
		})
	}
	if value, ok := auo.mutation.AuthCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldAuthCode,
		})
	}
	if value, ok := auo.mutation.AuthExpired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldAuthExpired,
		})
	}
	if value, ok := auo.mutation.URLCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldURLCount,
		})
	}
	if value, ok := auo.mutation.AddedURLCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldURLCount,
		})
	}
	if value, ok := auo.mutation.URLLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldURLLimit,
		})
	}
	if value, ok := auo.mutation.AddedURLLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldURLLimit,
		})
	}
	if value, ok := auo.mutation.MemberType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldMemberType,
		})
	}
	if value, ok := auo.mutation.MemberExpired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldMemberExpired,
		})
	}
	if auo.mutation.MemberExpiredCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: account.FieldMemberExpired,
		})
	}
	if value, ok := auo.mutation.HasEntire(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: account.FieldHasEntire,
		})
	}
	if value, ok := auo.mutation.HasNew(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: account.FieldHasNew,
		})
	}
	if value, ok := auo.mutation.HasAdmin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: account.FieldHasAdmin,
		})
	}
	if value, ok := auo.mutation.Fans(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldFans,
		})
	}
	if value, ok := auo.mutation.AddedFans(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldFans,
		})
	}
	if value, ok := auo.mutation.Focus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldFocus,
		})
	}
	if value, ok := auo.mutation.AddedFocus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldFocus,
		})
	}
	_node = &Account{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
