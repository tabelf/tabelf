// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/personalfolder"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PersonalFolderCreate is the builder for creating a PersonalFolder entity.
type PersonalFolderCreate struct {
	config
	mutation *PersonalFolderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (pfc *PersonalFolderCreate) SetUID(s string) *PersonalFolderCreate {
	pfc.mutation.SetUID(s)
	return pfc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (pfc *PersonalFolderCreate) SetNillableUID(s *string) *PersonalFolderCreate {
	if s != nil {
		pfc.SetUID(*s)
	}
	return pfc
}

// SetCreatedAt sets the "created_at" field.
func (pfc *PersonalFolderCreate) SetCreatedAt(t time.Time) *PersonalFolderCreate {
	pfc.mutation.SetCreatedAt(t)
	return pfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pfc *PersonalFolderCreate) SetNillableCreatedAt(t *time.Time) *PersonalFolderCreate {
	if t != nil {
		pfc.SetCreatedAt(*t)
	}
	return pfc
}

// SetUpdatedAt sets the "updated_at" field.
func (pfc *PersonalFolderCreate) SetUpdatedAt(t time.Time) *PersonalFolderCreate {
	pfc.mutation.SetUpdatedAt(t)
	return pfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pfc *PersonalFolderCreate) SetNillableUpdatedAt(t *time.Time) *PersonalFolderCreate {
	if t != nil {
		pfc.SetUpdatedAt(*t)
	}
	return pfc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (pfc *PersonalFolderCreate) SetDeactivatedAt(t time.Time) *PersonalFolderCreate {
	pfc.mutation.SetDeactivatedAt(t)
	return pfc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (pfc *PersonalFolderCreate) SetNillableDeactivatedAt(t *time.Time) *PersonalFolderCreate {
	if t != nil {
		pfc.SetDeactivatedAt(*t)
	}
	return pfc
}

// SetUserUID sets the "user_uid" field.
func (pfc *PersonalFolderCreate) SetUserUID(s string) *PersonalFolderCreate {
	pfc.mutation.SetUserUID(s)
	return pfc
}

// SetFolderName sets the "folder_name" field.
func (pfc *PersonalFolderCreate) SetFolderName(s string) *PersonalFolderCreate {
	pfc.mutation.SetFolderName(s)
	return pfc
}

// SetFolderNumber sets the "folder_number" field.
func (pfc *PersonalFolderCreate) SetFolderNumber(s string) *PersonalFolderCreate {
	pfc.mutation.SetFolderNumber(s)
	return pfc
}

// SetHasOpen sets the "has_open" field.
func (pfc *PersonalFolderCreate) SetHasOpen(b bool) *PersonalFolderCreate {
	pfc.mutation.SetHasOpen(b)
	return pfc
}

// SetNillableHasOpen sets the "has_open" field if the given value is not nil.
func (pfc *PersonalFolderCreate) SetNillableHasOpen(b *bool) *PersonalFolderCreate {
	if b != nil {
		pfc.SetHasOpen(*b)
	}
	return pfc
}

// SetID sets the "id" field.
func (pfc *PersonalFolderCreate) SetID(u uint64) *PersonalFolderCreate {
	pfc.mutation.SetID(u)
	return pfc
}

// Mutation returns the PersonalFolderMutation object of the builder.
func (pfc *PersonalFolderCreate) Mutation() *PersonalFolderMutation {
	return pfc.mutation
}

// Save creates the PersonalFolder in the database.
func (pfc *PersonalFolderCreate) Save(ctx context.Context) (*PersonalFolder, error) {
	var (
		err  error
		node *PersonalFolder
	)
	pfc.defaults()
	if len(pfc.hooks) == 0 {
		if err = pfc.check(); err != nil {
			return nil, err
		}
		node, err = pfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonalFolderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pfc.check(); err != nil {
				return nil, err
			}
			pfc.mutation = mutation
			if node, err = pfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pfc.hooks) - 1; i >= 0; i-- {
			if pfc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = pfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pfc *PersonalFolderCreate) SaveX(ctx context.Context) *PersonalFolder {
	v, err := pfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfc *PersonalFolderCreate) Exec(ctx context.Context) error {
	_, err := pfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfc *PersonalFolderCreate) ExecX(ctx context.Context) {
	if err := pfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfc *PersonalFolderCreate) defaults() {
	if _, ok := pfc.mutation.UID(); !ok {
		v := personalfolder.DefaultUID()
		pfc.mutation.SetUID(v)
	}
	if _, ok := pfc.mutation.CreatedAt(); !ok {
		v := personalfolder.DefaultCreatedAt()
		pfc.mutation.SetCreatedAt(v)
	}
	if _, ok := pfc.mutation.UpdatedAt(); !ok {
		v := personalfolder.DefaultUpdatedAt()
		pfc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pfc.mutation.HasOpen(); !ok {
		v := personalfolder.DefaultHasOpen
		pfc.mutation.SetHasOpen(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfc *PersonalFolderCreate) check() error {
	if _, ok := pfc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "PersonalFolder.uid"`)}
	}
	if v, ok := pfc.mutation.UID(); ok {
		if err := personalfolder.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "PersonalFolder.uid": %w`, err)}
		}
	}
	if _, ok := pfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "PersonalFolder.created_at"`)}
	}
	if _, ok := pfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "PersonalFolder.updated_at"`)}
	}
	if _, ok := pfc.mutation.UserUID(); !ok {
		return &ValidationError{Name: "user_uid", err: errors.New(`entschema: missing required field "PersonalFolder.user_uid"`)}
	}
	if _, ok := pfc.mutation.FolderName(); !ok {
		return &ValidationError{Name: "folder_name", err: errors.New(`entschema: missing required field "PersonalFolder.folder_name"`)}
	}
	if _, ok := pfc.mutation.FolderNumber(); !ok {
		return &ValidationError{Name: "folder_number", err: errors.New(`entschema: missing required field "PersonalFolder.folder_number"`)}
	}
	if v, ok := pfc.mutation.FolderNumber(); ok {
		if err := personalfolder.FolderNumberValidator(v); err != nil {
			return &ValidationError{Name: "folder_number", err: fmt.Errorf(`entschema: validator failed for field "PersonalFolder.folder_number": %w`, err)}
		}
	}
	if _, ok := pfc.mutation.HasOpen(); !ok {
		return &ValidationError{Name: "has_open", err: errors.New(`entschema: missing required field "PersonalFolder.has_open"`)}
	}
	return nil
}

func (pfc *PersonalFolderCreate) sqlSave(ctx context.Context) (*PersonalFolder, error) {
	_node, _spec := pfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (pfc *PersonalFolderCreate) createSpec() (*PersonalFolder, *sqlgraph.CreateSpec) {
	var (
		_node = &PersonalFolder{config: pfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: personalfolder.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: personalfolder.FieldID,
			},
		}
	)
	_spec.OnConflict = pfc.conflict
	if id, ok := pfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pfc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personalfolder.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := pfc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: personalfolder.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pfc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: personalfolder.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pfc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: personalfolder.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := pfc.mutation.UserUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personalfolder.FieldUserUID,
		})
		_node.UserUID = value
	}
	if value, ok := pfc.mutation.FolderName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personalfolder.FieldFolderName,
		})
		_node.FolderName = value
	}
	if value, ok := pfc.mutation.FolderNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personalfolder.FieldFolderNumber,
		})
		_node.FolderNumber = value
	}
	if value, ok := pfc.mutation.HasOpen(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: personalfolder.FieldHasOpen,
		})
		_node.HasOpen = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PersonalFolder.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PersonalFolderUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (pfc *PersonalFolderCreate) OnConflict(opts ...sql.ConflictOption) *PersonalFolderUpsertOne {
	pfc.conflict = opts
	return &PersonalFolderUpsertOne{
		create: pfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PersonalFolder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pfc *PersonalFolderCreate) OnConflictColumns(columns ...string) *PersonalFolderUpsertOne {
	pfc.conflict = append(pfc.conflict, sql.ConflictColumns(columns...))
	return &PersonalFolderUpsertOne{
		create: pfc,
	}
}

type (
	// PersonalFolderUpsertOne is the builder for "upsert"-ing
	//  one PersonalFolder node.
	PersonalFolderUpsertOne struct {
		create *PersonalFolderCreate
	}

	// PersonalFolderUpsert is the "OnConflict" setter.
	PersonalFolderUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *PersonalFolderUpsert) SetUID(v string) *PersonalFolderUpsert {
	u.Set(personalfolder.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *PersonalFolderUpsert) UpdateUID() *PersonalFolderUpsert {
	u.SetExcluded(personalfolder.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PersonalFolderUpsert) SetCreatedAt(v time.Time) *PersonalFolderUpsert {
	u.Set(personalfolder.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PersonalFolderUpsert) UpdateCreatedAt() *PersonalFolderUpsert {
	u.SetExcluded(personalfolder.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PersonalFolderUpsert) SetUpdatedAt(v time.Time) *PersonalFolderUpsert {
	u.Set(personalfolder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PersonalFolderUpsert) UpdateUpdatedAt() *PersonalFolderUpsert {
	u.SetExcluded(personalfolder.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *PersonalFolderUpsert) SetDeactivatedAt(v time.Time) *PersonalFolderUpsert {
	u.Set(personalfolder.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *PersonalFolderUpsert) UpdateDeactivatedAt() *PersonalFolderUpsert {
	u.SetExcluded(personalfolder.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *PersonalFolderUpsert) ClearDeactivatedAt() *PersonalFolderUpsert {
	u.SetNull(personalfolder.FieldDeactivatedAt)
	return u
}

// SetUserUID sets the "user_uid" field.
func (u *PersonalFolderUpsert) SetUserUID(v string) *PersonalFolderUpsert {
	u.Set(personalfolder.FieldUserUID, v)
	return u
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *PersonalFolderUpsert) UpdateUserUID() *PersonalFolderUpsert {
	u.SetExcluded(personalfolder.FieldUserUID)
	return u
}

// SetFolderName sets the "folder_name" field.
func (u *PersonalFolderUpsert) SetFolderName(v string) *PersonalFolderUpsert {
	u.Set(personalfolder.FieldFolderName, v)
	return u
}

// UpdateFolderName sets the "folder_name" field to the value that was provided on create.
func (u *PersonalFolderUpsert) UpdateFolderName() *PersonalFolderUpsert {
	u.SetExcluded(personalfolder.FieldFolderName)
	return u
}

// SetFolderNumber sets the "folder_number" field.
func (u *PersonalFolderUpsert) SetFolderNumber(v string) *PersonalFolderUpsert {
	u.Set(personalfolder.FieldFolderNumber, v)
	return u
}

// UpdateFolderNumber sets the "folder_number" field to the value that was provided on create.
func (u *PersonalFolderUpsert) UpdateFolderNumber() *PersonalFolderUpsert {
	u.SetExcluded(personalfolder.FieldFolderNumber)
	return u
}

// SetHasOpen sets the "has_open" field.
func (u *PersonalFolderUpsert) SetHasOpen(v bool) *PersonalFolderUpsert {
	u.Set(personalfolder.FieldHasOpen, v)
	return u
}

// UpdateHasOpen sets the "has_open" field to the value that was provided on create.
func (u *PersonalFolderUpsert) UpdateHasOpen() *PersonalFolderUpsert {
	u.SetExcluded(personalfolder.FieldHasOpen)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PersonalFolder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(personalfolder.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PersonalFolderUpsertOne) UpdateNewValues() *PersonalFolderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(personalfolder.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(personalfolder.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(personalfolder.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.PersonalFolder.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PersonalFolderUpsertOne) Ignore() *PersonalFolderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PersonalFolderUpsertOne) DoNothing() *PersonalFolderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PersonalFolderCreate.OnConflict
// documentation for more info.
func (u *PersonalFolderUpsertOne) Update(set func(*PersonalFolderUpsert)) *PersonalFolderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PersonalFolderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *PersonalFolderUpsertOne) SetUID(v string) *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *PersonalFolderUpsertOne) UpdateUID() *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PersonalFolderUpsertOne) SetCreatedAt(v time.Time) *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PersonalFolderUpsertOne) UpdateCreatedAt() *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PersonalFolderUpsertOne) SetUpdatedAt(v time.Time) *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PersonalFolderUpsertOne) UpdateUpdatedAt() *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *PersonalFolderUpsertOne) SetDeactivatedAt(v time.Time) *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *PersonalFolderUpsertOne) UpdateDeactivatedAt() *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *PersonalFolderUpsertOne) ClearDeactivatedAt() *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *PersonalFolderUpsertOne) SetUserUID(v string) *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *PersonalFolderUpsertOne) UpdateUserUID() *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.UpdateUserUID()
	})
}

// SetFolderName sets the "folder_name" field.
func (u *PersonalFolderUpsertOne) SetFolderName(v string) *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.SetFolderName(v)
	})
}

// UpdateFolderName sets the "folder_name" field to the value that was provided on create.
func (u *PersonalFolderUpsertOne) UpdateFolderName() *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.UpdateFolderName()
	})
}

// SetFolderNumber sets the "folder_number" field.
func (u *PersonalFolderUpsertOne) SetFolderNumber(v string) *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.SetFolderNumber(v)
	})
}

// UpdateFolderNumber sets the "folder_number" field to the value that was provided on create.
func (u *PersonalFolderUpsertOne) UpdateFolderNumber() *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.UpdateFolderNumber()
	})
}

// SetHasOpen sets the "has_open" field.
func (u *PersonalFolderUpsertOne) SetHasOpen(v bool) *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.SetHasOpen(v)
	})
}

// UpdateHasOpen sets the "has_open" field to the value that was provided on create.
func (u *PersonalFolderUpsertOne) UpdateHasOpen() *PersonalFolderUpsertOne {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.UpdateHasOpen()
	})
}

// Exec executes the query.
func (u *PersonalFolderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for PersonalFolderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PersonalFolderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PersonalFolderUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PersonalFolderUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PersonalFolderCreateBulk is the builder for creating many PersonalFolder entities in bulk.
type PersonalFolderCreateBulk struct {
	config
	builders []*PersonalFolderCreate
	conflict []sql.ConflictOption
}

// Save creates the PersonalFolder entities in the database.
func (pfcb *PersonalFolderCreateBulk) Save(ctx context.Context) ([]*PersonalFolder, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pfcb.builders))
	nodes := make([]*PersonalFolder, len(pfcb.builders))
	mutators := make([]Mutator, len(pfcb.builders))
	for i := range pfcb.builders {
		func(i int, root context.Context) {
			builder := pfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonalFolderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pfcb *PersonalFolderCreateBulk) SaveX(ctx context.Context) []*PersonalFolder {
	v, err := pfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfcb *PersonalFolderCreateBulk) Exec(ctx context.Context) error {
	_, err := pfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfcb *PersonalFolderCreateBulk) ExecX(ctx context.Context) {
	if err := pfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PersonalFolder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PersonalFolderUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (pfcb *PersonalFolderCreateBulk) OnConflict(opts ...sql.ConflictOption) *PersonalFolderUpsertBulk {
	pfcb.conflict = opts
	return &PersonalFolderUpsertBulk{
		create: pfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PersonalFolder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pfcb *PersonalFolderCreateBulk) OnConflictColumns(columns ...string) *PersonalFolderUpsertBulk {
	pfcb.conflict = append(pfcb.conflict, sql.ConflictColumns(columns...))
	return &PersonalFolderUpsertBulk{
		create: pfcb,
	}
}

// PersonalFolderUpsertBulk is the builder for "upsert"-ing
// a bulk of PersonalFolder nodes.
type PersonalFolderUpsertBulk struct {
	create *PersonalFolderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PersonalFolder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(personalfolder.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PersonalFolderUpsertBulk) UpdateNewValues() *PersonalFolderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(personalfolder.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(personalfolder.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(personalfolder.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PersonalFolder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PersonalFolderUpsertBulk) Ignore() *PersonalFolderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PersonalFolderUpsertBulk) DoNothing() *PersonalFolderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PersonalFolderCreateBulk.OnConflict
// documentation for more info.
func (u *PersonalFolderUpsertBulk) Update(set func(*PersonalFolderUpsert)) *PersonalFolderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PersonalFolderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *PersonalFolderUpsertBulk) SetUID(v string) *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *PersonalFolderUpsertBulk) UpdateUID() *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PersonalFolderUpsertBulk) SetCreatedAt(v time.Time) *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PersonalFolderUpsertBulk) UpdateCreatedAt() *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PersonalFolderUpsertBulk) SetUpdatedAt(v time.Time) *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PersonalFolderUpsertBulk) UpdateUpdatedAt() *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *PersonalFolderUpsertBulk) SetDeactivatedAt(v time.Time) *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *PersonalFolderUpsertBulk) UpdateDeactivatedAt() *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *PersonalFolderUpsertBulk) ClearDeactivatedAt() *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *PersonalFolderUpsertBulk) SetUserUID(v string) *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *PersonalFolderUpsertBulk) UpdateUserUID() *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.UpdateUserUID()
	})
}

// SetFolderName sets the "folder_name" field.
func (u *PersonalFolderUpsertBulk) SetFolderName(v string) *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.SetFolderName(v)
	})
}

// UpdateFolderName sets the "folder_name" field to the value that was provided on create.
func (u *PersonalFolderUpsertBulk) UpdateFolderName() *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.UpdateFolderName()
	})
}

// SetFolderNumber sets the "folder_number" field.
func (u *PersonalFolderUpsertBulk) SetFolderNumber(v string) *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.SetFolderNumber(v)
	})
}

// UpdateFolderNumber sets the "folder_number" field to the value that was provided on create.
func (u *PersonalFolderUpsertBulk) UpdateFolderNumber() *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.UpdateFolderNumber()
	})
}

// SetHasOpen sets the "has_open" field.
func (u *PersonalFolderUpsertBulk) SetHasOpen(v bool) *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.SetHasOpen(v)
	})
}

// UpdateHasOpen sets the "has_open" field to the value that was provided on create.
func (u *PersonalFolderUpsertBulk) UpdateHasOpen() *PersonalFolderUpsertBulk {
	return u.Update(func(s *PersonalFolderUpsert) {
		s.UpdateHasOpen()
	})
}

// Exec executes the query.
func (u *PersonalFolderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the PersonalFolderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for PersonalFolderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PersonalFolderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
