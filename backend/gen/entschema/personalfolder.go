// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"fmt"
	"strings"
	"tabelf/backend/gen/entschema/personalfolder"
	"time"

	"entgo.io/ent/dialect/sql"
)

// PersonalFolder is the model entity for the PersonalFolder schema.
type PersonalFolder struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeactivatedAt holds the value of the "deactivated_at" field.
	DeactivatedAt *time.Time `json:"deactivated_at,omitempty"`
	// UserUID holds the value of the "user_uid" field.
	// 用户uid
	UserUID string `json:"user_uid,omitempty"`
	// FolderName holds the value of the "folder_name" field.
	// 文件名称
	FolderName string `json:"folder_name,omitempty"`
	// FolderNumber holds the value of the "folder_number" field.
	// 文件编号
	FolderNumber string `json:"folder_number,omitempty"`
	// HasOpen holds the value of the "has_open" field.
	// 是否开放到社区
	HasOpen bool `json:"has_open,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PersonalFolder) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case personalfolder.FieldHasOpen:
			values[i] = new(sql.NullBool)
		case personalfolder.FieldID:
			values[i] = new(sql.NullInt64)
		case personalfolder.FieldUID, personalfolder.FieldUserUID, personalfolder.FieldFolderName, personalfolder.FieldFolderNumber:
			values[i] = new(sql.NullString)
		case personalfolder.FieldCreatedAt, personalfolder.FieldUpdatedAt, personalfolder.FieldDeactivatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PersonalFolder", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PersonalFolder fields.
func (pf *PersonalFolder) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case personalfolder.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pf.ID = uint64(value.Int64)
		case personalfolder.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				pf.UID = value.String
			}
		case personalfolder.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pf.CreatedAt = value.Time
			}
		case personalfolder.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pf.UpdatedAt = value.Time
			}
		case personalfolder.FieldDeactivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deactivated_at", values[i])
			} else if value.Valid {
				pf.DeactivatedAt = new(time.Time)
				*pf.DeactivatedAt = value.Time
			}
		case personalfolder.FieldUserUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_uid", values[i])
			} else if value.Valid {
				pf.UserUID = value.String
			}
		case personalfolder.FieldFolderName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field folder_name", values[i])
			} else if value.Valid {
				pf.FolderName = value.String
			}
		case personalfolder.FieldFolderNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field folder_number", values[i])
			} else if value.Valid {
				pf.FolderNumber = value.String
			}
		case personalfolder.FieldHasOpen:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_open", values[i])
			} else if value.Valid {
				pf.HasOpen = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this PersonalFolder.
// Note that you need to call PersonalFolder.Unwrap() before calling this method if this PersonalFolder
// was returned from a transaction, and the transaction was committed or rolled back.
func (pf *PersonalFolder) Update() *PersonalFolderUpdateOne {
	return (&PersonalFolderClient{config: pf.config}).UpdateOne(pf)
}

// Unwrap unwraps the PersonalFolder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pf *PersonalFolder) Unwrap() *PersonalFolder {
	tx, ok := pf.config.driver.(*txDriver)
	if !ok {
		panic("entschema: PersonalFolder is not a transactional entity")
	}
	pf.config.driver = tx.drv
	return pf
}

// String implements the fmt.Stringer.
func (pf *PersonalFolder) String() string {
	var builder strings.Builder
	builder.WriteString("PersonalFolder(")
	builder.WriteString(fmt.Sprintf("id=%v", pf.ID))
	builder.WriteString(", uid=")
	builder.WriteString(pf.UID)
	builder.WriteString(", created_at=")
	builder.WriteString(pf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pf.UpdatedAt.Format(time.ANSIC))
	if v := pf.DeactivatedAt; v != nil {
		builder.WriteString(", deactivated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", user_uid=")
	builder.WriteString(pf.UserUID)
	builder.WriteString(", folder_name=")
	builder.WriteString(pf.FolderName)
	builder.WriteString(", folder_number=")
	builder.WriteString(pf.FolderNumber)
	builder.WriteString(", has_open=")
	builder.WriteString(fmt.Sprintf("%v", pf.HasOpen))
	builder.WriteByte(')')
	return builder.String()
}

// PersonalFolders is a parsable slice of PersonalFolder.
type PersonalFolders []*PersonalFolder

func (pf PersonalFolders) config(cfg config) {
	for _i := range pf {
		pf[_i].config = cfg
	}
}
