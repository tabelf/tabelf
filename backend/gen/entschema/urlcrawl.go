// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"fmt"
	"strings"
	"tabelf/backend/gen/entschema/urlcrawl"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UrlCrawl is the model entity for the UrlCrawl schema.
type UrlCrawl struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeactivatedAt holds the value of the "deactivated_at" field.
	DeactivatedAt *time.Time `json:"deactivated_at,omitempty"`
	// URL holds the value of the "url" field.
	// 收录的url
	URL string `json:"url,omitempty"`
	// CommunityUID holds the value of the "community_uid" field.
	// 分享社区uid
	CommunityUID string `json:"community_uid,omitempty"`
	// Count holds the value of the "count" field.
	// 收录次数
	Count int `json:"count,omitempty"`
	// HasComplete holds the value of the "has_complete" field.
	// 是否收录完成
	HasComplete bool `json:"has_complete,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UrlCrawl) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case urlcrawl.FieldHasComplete:
			values[i] = new(sql.NullBool)
		case urlcrawl.FieldID, urlcrawl.FieldCount:
			values[i] = new(sql.NullInt64)
		case urlcrawl.FieldUID, urlcrawl.FieldURL, urlcrawl.FieldCommunityUID:
			values[i] = new(sql.NullString)
		case urlcrawl.FieldCreatedAt, urlcrawl.FieldUpdatedAt, urlcrawl.FieldDeactivatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UrlCrawl", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UrlCrawl fields.
func (uc *UrlCrawl) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case urlcrawl.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uc.ID = uint64(value.Int64)
		case urlcrawl.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				uc.UID = value.String
			}
		case urlcrawl.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uc.CreatedAt = value.Time
			}
		case urlcrawl.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uc.UpdatedAt = value.Time
			}
		case urlcrawl.FieldDeactivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deactivated_at", values[i])
			} else if value.Valid {
				uc.DeactivatedAt = new(time.Time)
				*uc.DeactivatedAt = value.Time
			}
		case urlcrawl.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				uc.URL = value.String
			}
		case urlcrawl.FieldCommunityUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field community_uid", values[i])
			} else if value.Valid {
				uc.CommunityUID = value.String
			}
		case urlcrawl.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				uc.Count = int(value.Int64)
			}
		case urlcrawl.FieldHasComplete:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_complete", values[i])
			} else if value.Valid {
				uc.HasComplete = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UrlCrawl.
// Note that you need to call UrlCrawl.Unwrap() before calling this method if this UrlCrawl
// was returned from a transaction, and the transaction was committed or rolled back.
func (uc *UrlCrawl) Update() *UrlCrawlUpdateOne {
	return (&UrlCrawlClient{config: uc.config}).UpdateOne(uc)
}

// Unwrap unwraps the UrlCrawl entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uc *UrlCrawl) Unwrap() *UrlCrawl {
	tx, ok := uc.config.driver.(*txDriver)
	if !ok {
		panic("entschema: UrlCrawl is not a transactional entity")
	}
	uc.config.driver = tx.drv
	return uc
}

// String implements the fmt.Stringer.
func (uc *UrlCrawl) String() string {
	var builder strings.Builder
	builder.WriteString("UrlCrawl(")
	builder.WriteString(fmt.Sprintf("id=%v", uc.ID))
	builder.WriteString(", uid=")
	builder.WriteString(uc.UID)
	builder.WriteString(", created_at=")
	builder.WriteString(uc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(uc.UpdatedAt.Format(time.ANSIC))
	if v := uc.DeactivatedAt; v != nil {
		builder.WriteString(", deactivated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", url=")
	builder.WriteString(uc.URL)
	builder.WriteString(", community_uid=")
	builder.WriteString(uc.CommunityUID)
	builder.WriteString(", count=")
	builder.WriteString(fmt.Sprintf("%v", uc.Count))
	builder.WriteString(", has_complete=")
	builder.WriteString(fmt.Sprintf("%v", uc.HasComplete))
	builder.WriteByte(')')
	return builder.String()
}

// UrlCrawls is a parsable slice of UrlCrawl.
type UrlCrawls []*UrlCrawl

func (uc UrlCrawls) config(cfg config) {
	for _i := range uc {
		uc[_i].config = cfg
	}
}
