// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/stationmeta"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StationMetaCreate is the builder for creating a StationMeta entity.
type StationMetaCreate struct {
	config
	mutation *StationMetaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (smc *StationMetaCreate) SetUID(s string) *StationMetaCreate {
	smc.mutation.SetUID(s)
	return smc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (smc *StationMetaCreate) SetNillableUID(s *string) *StationMetaCreate {
	if s != nil {
		smc.SetUID(*s)
	}
	return smc
}

// SetCreatedAt sets the "created_at" field.
func (smc *StationMetaCreate) SetCreatedAt(t time.Time) *StationMetaCreate {
	smc.mutation.SetCreatedAt(t)
	return smc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (smc *StationMetaCreate) SetNillableCreatedAt(t *time.Time) *StationMetaCreate {
	if t != nil {
		smc.SetCreatedAt(*t)
	}
	return smc
}

// SetUpdatedAt sets the "updated_at" field.
func (smc *StationMetaCreate) SetUpdatedAt(t time.Time) *StationMetaCreate {
	smc.mutation.SetUpdatedAt(t)
	return smc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (smc *StationMetaCreate) SetNillableUpdatedAt(t *time.Time) *StationMetaCreate {
	if t != nil {
		smc.SetUpdatedAt(*t)
	}
	return smc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (smc *StationMetaCreate) SetDeactivatedAt(t time.Time) *StationMetaCreate {
	smc.mutation.SetDeactivatedAt(t)
	return smc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (smc *StationMetaCreate) SetNillableDeactivatedAt(t *time.Time) *StationMetaCreate {
	if t != nil {
		smc.SetDeactivatedAt(*t)
	}
	return smc
}

// SetStationUID sets the "station_uid" field.
func (smc *StationMetaCreate) SetStationUID(s string) *StationMetaCreate {
	smc.mutation.SetStationUID(s)
	return smc
}

// SetUserUID sets the "user_uid" field.
func (smc *StationMetaCreate) SetUserUID(s string) *StationMetaCreate {
	smc.mutation.SetUserUID(s)
	return smc
}

// SetHasPraise sets the "has_praise" field.
func (smc *StationMetaCreate) SetHasPraise(b bool) *StationMetaCreate {
	smc.mutation.SetHasPraise(b)
	return smc
}

// SetNillableHasPraise sets the "has_praise" field if the given value is not nil.
func (smc *StationMetaCreate) SetNillableHasPraise(b *bool) *StationMetaCreate {
	if b != nil {
		smc.SetHasPraise(*b)
	}
	return smc
}

// SetHasStar sets the "has_star" field.
func (smc *StationMetaCreate) SetHasStar(b bool) *StationMetaCreate {
	smc.mutation.SetHasStar(b)
	return smc
}

// SetNillableHasStar sets the "has_star" field if the given value is not nil.
func (smc *StationMetaCreate) SetNillableHasStar(b *bool) *StationMetaCreate {
	if b != nil {
		smc.SetHasStar(*b)
	}
	return smc
}

// SetHasView sets the "has_view" field.
func (smc *StationMetaCreate) SetHasView(b bool) *StationMetaCreate {
	smc.mutation.SetHasView(b)
	return smc
}

// SetNillableHasView sets the "has_view" field if the given value is not nil.
func (smc *StationMetaCreate) SetNillableHasView(b *bool) *StationMetaCreate {
	if b != nil {
		smc.SetHasView(*b)
	}
	return smc
}

// SetID sets the "id" field.
func (smc *StationMetaCreate) SetID(u uint64) *StationMetaCreate {
	smc.mutation.SetID(u)
	return smc
}

// Mutation returns the StationMetaMutation object of the builder.
func (smc *StationMetaCreate) Mutation() *StationMetaMutation {
	return smc.mutation
}

// Save creates the StationMeta in the database.
func (smc *StationMetaCreate) Save(ctx context.Context) (*StationMeta, error) {
	var (
		err  error
		node *StationMeta
	)
	smc.defaults()
	if len(smc.hooks) == 0 {
		if err = smc.check(); err != nil {
			return nil, err
		}
		node, err = smc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StationMetaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smc.check(); err != nil {
				return nil, err
			}
			smc.mutation = mutation
			if node, err = smc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(smc.hooks) - 1; i >= 0; i-- {
			if smc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = smc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (smc *StationMetaCreate) SaveX(ctx context.Context) *StationMeta {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smc *StationMetaCreate) Exec(ctx context.Context) error {
	_, err := smc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smc *StationMetaCreate) ExecX(ctx context.Context) {
	if err := smc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smc *StationMetaCreate) defaults() {
	if _, ok := smc.mutation.UID(); !ok {
		v := stationmeta.DefaultUID()
		smc.mutation.SetUID(v)
	}
	if _, ok := smc.mutation.CreatedAt(); !ok {
		v := stationmeta.DefaultCreatedAt()
		smc.mutation.SetCreatedAt(v)
	}
	if _, ok := smc.mutation.UpdatedAt(); !ok {
		v := stationmeta.DefaultUpdatedAt()
		smc.mutation.SetUpdatedAt(v)
	}
	if _, ok := smc.mutation.HasPraise(); !ok {
		v := stationmeta.DefaultHasPraise
		smc.mutation.SetHasPraise(v)
	}
	if _, ok := smc.mutation.HasStar(); !ok {
		v := stationmeta.DefaultHasStar
		smc.mutation.SetHasStar(v)
	}
	if _, ok := smc.mutation.HasView(); !ok {
		v := stationmeta.DefaultHasView
		smc.mutation.SetHasView(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smc *StationMetaCreate) check() error {
	if _, ok := smc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "StationMeta.uid"`)}
	}
	if v, ok := smc.mutation.UID(); ok {
		if err := stationmeta.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "StationMeta.uid": %w`, err)}
		}
	}
	if _, ok := smc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "StationMeta.created_at"`)}
	}
	if _, ok := smc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "StationMeta.updated_at"`)}
	}
	if _, ok := smc.mutation.StationUID(); !ok {
		return &ValidationError{Name: "station_uid", err: errors.New(`entschema: missing required field "StationMeta.station_uid"`)}
	}
	if _, ok := smc.mutation.UserUID(); !ok {
		return &ValidationError{Name: "user_uid", err: errors.New(`entschema: missing required field "StationMeta.user_uid"`)}
	}
	if _, ok := smc.mutation.HasPraise(); !ok {
		return &ValidationError{Name: "has_praise", err: errors.New(`entschema: missing required field "StationMeta.has_praise"`)}
	}
	if _, ok := smc.mutation.HasStar(); !ok {
		return &ValidationError{Name: "has_star", err: errors.New(`entschema: missing required field "StationMeta.has_star"`)}
	}
	if _, ok := smc.mutation.HasView(); !ok {
		return &ValidationError{Name: "has_view", err: errors.New(`entschema: missing required field "StationMeta.has_view"`)}
	}
	return nil
}

func (smc *StationMetaCreate) sqlSave(ctx context.Context) (*StationMeta, error) {
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (smc *StationMetaCreate) createSpec() (*StationMeta, *sqlgraph.CreateSpec) {
	var (
		_node = &StationMeta{config: smc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: stationmeta.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: stationmeta.FieldID,
			},
		}
	)
	_spec.OnConflict = smc.conflict
	if id, ok := smc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := smc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stationmeta.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := smc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stationmeta.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := smc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stationmeta.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := smc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stationmeta.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := smc.mutation.StationUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stationmeta.FieldStationUID,
		})
		_node.StationUID = value
	}
	if value, ok := smc.mutation.UserUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stationmeta.FieldUserUID,
		})
		_node.UserUID = value
	}
	if value, ok := smc.mutation.HasPraise(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: stationmeta.FieldHasPraise,
		})
		_node.HasPraise = value
	}
	if value, ok := smc.mutation.HasStar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: stationmeta.FieldHasStar,
		})
		_node.HasStar = value
	}
	if value, ok := smc.mutation.HasView(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: stationmeta.FieldHasView,
		})
		_node.HasView = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.StationMeta.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StationMetaUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (smc *StationMetaCreate) OnConflict(opts ...sql.ConflictOption) *StationMetaUpsertOne {
	smc.conflict = opts
	return &StationMetaUpsertOne{
		create: smc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.StationMeta.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (smc *StationMetaCreate) OnConflictColumns(columns ...string) *StationMetaUpsertOne {
	smc.conflict = append(smc.conflict, sql.ConflictColumns(columns...))
	return &StationMetaUpsertOne{
		create: smc,
	}
}

type (
	// StationMetaUpsertOne is the builder for "upsert"-ing
	//  one StationMeta node.
	StationMetaUpsertOne struct {
		create *StationMetaCreate
	}

	// StationMetaUpsert is the "OnConflict" setter.
	StationMetaUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *StationMetaUpsert) SetUID(v string) *StationMetaUpsert {
	u.Set(stationmeta.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *StationMetaUpsert) UpdateUID() *StationMetaUpsert {
	u.SetExcluded(stationmeta.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StationMetaUpsert) SetCreatedAt(v time.Time) *StationMetaUpsert {
	u.Set(stationmeta.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StationMetaUpsert) UpdateCreatedAt() *StationMetaUpsert {
	u.SetExcluded(stationmeta.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StationMetaUpsert) SetUpdatedAt(v time.Time) *StationMetaUpsert {
	u.Set(stationmeta.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StationMetaUpsert) UpdateUpdatedAt() *StationMetaUpsert {
	u.SetExcluded(stationmeta.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *StationMetaUpsert) SetDeactivatedAt(v time.Time) *StationMetaUpsert {
	u.Set(stationmeta.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *StationMetaUpsert) UpdateDeactivatedAt() *StationMetaUpsert {
	u.SetExcluded(stationmeta.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *StationMetaUpsert) ClearDeactivatedAt() *StationMetaUpsert {
	u.SetNull(stationmeta.FieldDeactivatedAt)
	return u
}

// SetStationUID sets the "station_uid" field.
func (u *StationMetaUpsert) SetStationUID(v string) *StationMetaUpsert {
	u.Set(stationmeta.FieldStationUID, v)
	return u
}

// UpdateStationUID sets the "station_uid" field to the value that was provided on create.
func (u *StationMetaUpsert) UpdateStationUID() *StationMetaUpsert {
	u.SetExcluded(stationmeta.FieldStationUID)
	return u
}

// SetUserUID sets the "user_uid" field.
func (u *StationMetaUpsert) SetUserUID(v string) *StationMetaUpsert {
	u.Set(stationmeta.FieldUserUID, v)
	return u
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *StationMetaUpsert) UpdateUserUID() *StationMetaUpsert {
	u.SetExcluded(stationmeta.FieldUserUID)
	return u
}

// SetHasPraise sets the "has_praise" field.
func (u *StationMetaUpsert) SetHasPraise(v bool) *StationMetaUpsert {
	u.Set(stationmeta.FieldHasPraise, v)
	return u
}

// UpdateHasPraise sets the "has_praise" field to the value that was provided on create.
func (u *StationMetaUpsert) UpdateHasPraise() *StationMetaUpsert {
	u.SetExcluded(stationmeta.FieldHasPraise)
	return u
}

// SetHasStar sets the "has_star" field.
func (u *StationMetaUpsert) SetHasStar(v bool) *StationMetaUpsert {
	u.Set(stationmeta.FieldHasStar, v)
	return u
}

// UpdateHasStar sets the "has_star" field to the value that was provided on create.
func (u *StationMetaUpsert) UpdateHasStar() *StationMetaUpsert {
	u.SetExcluded(stationmeta.FieldHasStar)
	return u
}

// SetHasView sets the "has_view" field.
func (u *StationMetaUpsert) SetHasView(v bool) *StationMetaUpsert {
	u.Set(stationmeta.FieldHasView, v)
	return u
}

// UpdateHasView sets the "has_view" field to the value that was provided on create.
func (u *StationMetaUpsert) UpdateHasView() *StationMetaUpsert {
	u.SetExcluded(stationmeta.FieldHasView)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.StationMeta.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(stationmeta.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *StationMetaUpsertOne) UpdateNewValues() *StationMetaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(stationmeta.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(stationmeta.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(stationmeta.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.StationMeta.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *StationMetaUpsertOne) Ignore() *StationMetaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StationMetaUpsertOne) DoNothing() *StationMetaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StationMetaCreate.OnConflict
// documentation for more info.
func (u *StationMetaUpsertOne) Update(set func(*StationMetaUpsert)) *StationMetaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StationMetaUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *StationMetaUpsertOne) SetUID(v string) *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *StationMetaUpsertOne) UpdateUID() *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *StationMetaUpsertOne) SetCreatedAt(v time.Time) *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StationMetaUpsertOne) UpdateCreatedAt() *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StationMetaUpsertOne) SetUpdatedAt(v time.Time) *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StationMetaUpsertOne) UpdateUpdatedAt() *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *StationMetaUpsertOne) SetDeactivatedAt(v time.Time) *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *StationMetaUpsertOne) UpdateDeactivatedAt() *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *StationMetaUpsertOne) ClearDeactivatedAt() *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetStationUID sets the "station_uid" field.
func (u *StationMetaUpsertOne) SetStationUID(v string) *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetStationUID(v)
	})
}

// UpdateStationUID sets the "station_uid" field to the value that was provided on create.
func (u *StationMetaUpsertOne) UpdateStationUID() *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateStationUID()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *StationMetaUpsertOne) SetUserUID(v string) *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *StationMetaUpsertOne) UpdateUserUID() *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateUserUID()
	})
}

// SetHasPraise sets the "has_praise" field.
func (u *StationMetaUpsertOne) SetHasPraise(v bool) *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetHasPraise(v)
	})
}

// UpdateHasPraise sets the "has_praise" field to the value that was provided on create.
func (u *StationMetaUpsertOne) UpdateHasPraise() *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateHasPraise()
	})
}

// SetHasStar sets the "has_star" field.
func (u *StationMetaUpsertOne) SetHasStar(v bool) *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetHasStar(v)
	})
}

// UpdateHasStar sets the "has_star" field to the value that was provided on create.
func (u *StationMetaUpsertOne) UpdateHasStar() *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateHasStar()
	})
}

// SetHasView sets the "has_view" field.
func (u *StationMetaUpsertOne) SetHasView(v bool) *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetHasView(v)
	})
}

// UpdateHasView sets the "has_view" field to the value that was provided on create.
func (u *StationMetaUpsertOne) UpdateHasView() *StationMetaUpsertOne {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateHasView()
	})
}

// Exec executes the query.
func (u *StationMetaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for StationMetaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StationMetaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StationMetaUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StationMetaUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StationMetaCreateBulk is the builder for creating many StationMeta entities in bulk.
type StationMetaCreateBulk struct {
	config
	builders []*StationMetaCreate
	conflict []sql.ConflictOption
}

// Save creates the StationMeta entities in the database.
func (smcb *StationMetaCreateBulk) Save(ctx context.Context) ([]*StationMeta, error) {
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*StationMeta, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StationMetaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = smcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *StationMetaCreateBulk) SaveX(ctx context.Context) []*StationMeta {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smcb *StationMetaCreateBulk) Exec(ctx context.Context) error {
	_, err := smcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smcb *StationMetaCreateBulk) ExecX(ctx context.Context) {
	if err := smcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.StationMeta.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StationMetaUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (smcb *StationMetaCreateBulk) OnConflict(opts ...sql.ConflictOption) *StationMetaUpsertBulk {
	smcb.conflict = opts
	return &StationMetaUpsertBulk{
		create: smcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.StationMeta.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (smcb *StationMetaCreateBulk) OnConflictColumns(columns ...string) *StationMetaUpsertBulk {
	smcb.conflict = append(smcb.conflict, sql.ConflictColumns(columns...))
	return &StationMetaUpsertBulk{
		create: smcb,
	}
}

// StationMetaUpsertBulk is the builder for "upsert"-ing
// a bulk of StationMeta nodes.
type StationMetaUpsertBulk struct {
	create *StationMetaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.StationMeta.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(stationmeta.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *StationMetaUpsertBulk) UpdateNewValues() *StationMetaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(stationmeta.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(stationmeta.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(stationmeta.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.StationMeta.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *StationMetaUpsertBulk) Ignore() *StationMetaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StationMetaUpsertBulk) DoNothing() *StationMetaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StationMetaCreateBulk.OnConflict
// documentation for more info.
func (u *StationMetaUpsertBulk) Update(set func(*StationMetaUpsert)) *StationMetaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StationMetaUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *StationMetaUpsertBulk) SetUID(v string) *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *StationMetaUpsertBulk) UpdateUID() *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *StationMetaUpsertBulk) SetCreatedAt(v time.Time) *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StationMetaUpsertBulk) UpdateCreatedAt() *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StationMetaUpsertBulk) SetUpdatedAt(v time.Time) *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StationMetaUpsertBulk) UpdateUpdatedAt() *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *StationMetaUpsertBulk) SetDeactivatedAt(v time.Time) *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *StationMetaUpsertBulk) UpdateDeactivatedAt() *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *StationMetaUpsertBulk) ClearDeactivatedAt() *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetStationUID sets the "station_uid" field.
func (u *StationMetaUpsertBulk) SetStationUID(v string) *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetStationUID(v)
	})
}

// UpdateStationUID sets the "station_uid" field to the value that was provided on create.
func (u *StationMetaUpsertBulk) UpdateStationUID() *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateStationUID()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *StationMetaUpsertBulk) SetUserUID(v string) *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *StationMetaUpsertBulk) UpdateUserUID() *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateUserUID()
	})
}

// SetHasPraise sets the "has_praise" field.
func (u *StationMetaUpsertBulk) SetHasPraise(v bool) *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetHasPraise(v)
	})
}

// UpdateHasPraise sets the "has_praise" field to the value that was provided on create.
func (u *StationMetaUpsertBulk) UpdateHasPraise() *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateHasPraise()
	})
}

// SetHasStar sets the "has_star" field.
func (u *StationMetaUpsertBulk) SetHasStar(v bool) *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetHasStar(v)
	})
}

// UpdateHasStar sets the "has_star" field to the value that was provided on create.
func (u *StationMetaUpsertBulk) UpdateHasStar() *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateHasStar()
	})
}

// SetHasView sets the "has_view" field.
func (u *StationMetaUpsertBulk) SetHasView(v bool) *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.SetHasView(v)
	})
}

// UpdateHasView sets the "has_view" field to the value that was provided on create.
func (u *StationMetaUpsertBulk) UpdateHasView() *StationMetaUpsertBulk {
	return u.Update(func(s *StationMetaUpsert) {
		s.UpdateHasView()
	})
}

// Exec executes the query.
func (u *StationMetaUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the StationMetaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for StationMetaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StationMetaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
