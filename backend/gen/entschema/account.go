// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"encoding/json"
	"fmt"
	"strings"
	"tabelf/backend/gen/entschema/account"
	"tabelf/backend/spec/schema"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Account is the model entity for the Account schema.
type Account struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeactivatedAt holds the value of the "deactivated_at" field.
	DeactivatedAt *time.Time `json:"deactivated_at,omitempty"`
	// Phone holds the value of the "phone" field.
	// 手机号
	Phone string `json:"phone,omitempty"`
	// Email holds the value of the "email" field.
	// 电子邮件
	Email string `json:"email,omitempty"`
	// Nickname holds the value of the "nickname" field.
	// 昵称
	Nickname string `json:"nickname,omitempty"`
	// Sex holds the value of the "sex" field.
	// 性别, 1 为男性, 2 为女性, 0 为未知
	Sex int `json:"sex,omitempty"`
	// Password holds the value of the "password" field.
	// 密码
	Password string `json:"password,omitempty"`
	// WxOpenid holds the value of the "wx_openid" field.
	// 微信openid
	WxOpenid string `json:"wx_openid,omitempty"`
	// Image holds the value of the "image" field.
	// 头像
	Image string `json:"image,omitempty"`
	// Industry holds the value of the "industry" field.
	// 行业
	Industry string `json:"industry,omitempty"`
	// Description holds the value of the "description" field.
	// 个人简介
	Description string `json:"description,omitempty"`
	// Address holds the value of the "address" field.
	// 地址信息
	Address schema.Address `json:"address,omitempty"`
	// AuthCode holds the value of the "auth_code" field.
	// 验证码
	AuthCode string `json:"auth_code,omitempty"`
	// AuthExpired holds the value of the "auth_expired" field.
	// 验证码过期时间
	AuthExpired time.Time `json:"auth_expired,omitempty"`
	// URLCount holds the value of the "url_count" field.
	// url数量
	URLCount int `json:"url_count,omitempty"`
	// URLLimit holds the value of the "url_limit" field.
	// url数量限制
	URLLimit int `json:"url_limit,omitempty"`
	// MemberType holds the value of the "member_type" field.
	// 会员类型, 0 普通用户, 1 月度会员, 2 年度会员
	MemberType string `json:"member_type,omitempty"`
	// MemberExpired holds the value of the "member_expired" field.
	// 会员过期时间
	MemberExpired time.Time `json:"member_expired,omitempty"`
	// HasEntire holds the value of the "has_entire" field.
	// 信息是否完善
	HasEntire bool `json:"has_entire,omitempty"`
	// HasNew holds the value of the "has_new" field.
	// 是否为新用户
	HasNew bool `json:"has_new,omitempty"`
	// HasAdmin holds the value of the "has_admin" field.
	// 是否为管理员
	HasAdmin bool `json:"has_admin,omitempty"`
	// Fans holds the value of the "fans" field.
	// 粉丝数量
	Fans int `json:"fans,omitempty"`
	// Focus holds the value of the "focus" field.
	// 关注数量
	Focus int `json:"focus,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Account) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case account.FieldAddress:
			values[i] = new([]byte)
		case account.FieldHasEntire, account.FieldHasNew, account.FieldHasAdmin:
			values[i] = new(sql.NullBool)
		case account.FieldID, account.FieldSex, account.FieldURLCount, account.FieldURLLimit, account.FieldFans, account.FieldFocus:
			values[i] = new(sql.NullInt64)
		case account.FieldUID, account.FieldPhone, account.FieldEmail, account.FieldNickname, account.FieldPassword, account.FieldWxOpenid, account.FieldImage, account.FieldIndustry, account.FieldDescription, account.FieldAuthCode, account.FieldMemberType:
			values[i] = new(sql.NullString)
		case account.FieldCreatedAt, account.FieldUpdatedAt, account.FieldDeactivatedAt, account.FieldAuthExpired, account.FieldMemberExpired:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Account", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Account fields.
func (a *Account) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case account.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = uint64(value.Int64)
		case account.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				a.UID = value.String
			}
		case account.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case account.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case account.FieldDeactivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deactivated_at", values[i])
			} else if value.Valid {
				a.DeactivatedAt = new(time.Time)
				*a.DeactivatedAt = value.Time
			}
		case account.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				a.Phone = value.String
			}
		case account.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				a.Email = value.String
			}
		case account.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				a.Nickname = value.String
			}
		case account.FieldSex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				a.Sex = int(value.Int64)
			}
		case account.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				a.Password = value.String
			}
		case account.FieldWxOpenid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wx_openid", values[i])
			} else if value.Valid {
				a.WxOpenid = value.String
			}
		case account.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				a.Image = value.String
			}
		case account.FieldIndustry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field industry", values[i])
			} else if value.Valid {
				a.Industry = value.String
			}
		case account.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		case account.FieldAddress:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Address); err != nil {
					return fmt.Errorf("unmarshal field address: %w", err)
				}
			}
		case account.FieldAuthCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_code", values[i])
			} else if value.Valid {
				a.AuthCode = value.String
			}
		case account.FieldAuthExpired:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field auth_expired", values[i])
			} else if value.Valid {
				a.AuthExpired = value.Time
			}
		case account.FieldURLCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field url_count", values[i])
			} else if value.Valid {
				a.URLCount = int(value.Int64)
			}
		case account.FieldURLLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field url_limit", values[i])
			} else if value.Valid {
				a.URLLimit = int(value.Int64)
			}
		case account.FieldMemberType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field member_type", values[i])
			} else if value.Valid {
				a.MemberType = value.String
			}
		case account.FieldMemberExpired:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field member_expired", values[i])
			} else if value.Valid {
				a.MemberExpired = value.Time
			}
		case account.FieldHasEntire:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_entire", values[i])
			} else if value.Valid {
				a.HasEntire = value.Bool
			}
		case account.FieldHasNew:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_new", values[i])
			} else if value.Valid {
				a.HasNew = value.Bool
			}
		case account.FieldHasAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_admin", values[i])
			} else if value.Valid {
				a.HasAdmin = value.Bool
			}
		case account.FieldFans:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fans", values[i])
			} else if value.Valid {
				a.Fans = int(value.Int64)
			}
		case account.FieldFocus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field focus", values[i])
			} else if value.Valid {
				a.Focus = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Account.
// Note that you need to call Account.Unwrap() before calling this method if this Account
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Account) Update() *AccountUpdateOne {
	return (&AccountClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Account entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Account) Unwrap() *Account {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("entschema: Account is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Account) String() string {
	var builder strings.Builder
	builder.WriteString("Account(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", uid=")
	builder.WriteString(a.UID)
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	if v := a.DeactivatedAt; v != nil {
		builder.WriteString(", deactivated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", phone=")
	builder.WriteString(a.Phone)
	builder.WriteString(", email=")
	builder.WriteString(a.Email)
	builder.WriteString(", nickname=")
	builder.WriteString(a.Nickname)
	builder.WriteString(", sex=")
	builder.WriteString(fmt.Sprintf("%v", a.Sex))
	builder.WriteString(", password=")
	builder.WriteString(a.Password)
	builder.WriteString(", wx_openid=")
	builder.WriteString(a.WxOpenid)
	builder.WriteString(", image=")
	builder.WriteString(a.Image)
	builder.WriteString(", industry=")
	builder.WriteString(a.Industry)
	builder.WriteString(", description=")
	builder.WriteString(a.Description)
	builder.WriteString(", address=")
	builder.WriteString(fmt.Sprintf("%v", a.Address))
	builder.WriteString(", auth_code=")
	builder.WriteString(a.AuthCode)
	builder.WriteString(", auth_expired=")
	builder.WriteString(a.AuthExpired.Format(time.ANSIC))
	builder.WriteString(", url_count=")
	builder.WriteString(fmt.Sprintf("%v", a.URLCount))
	builder.WriteString(", url_limit=")
	builder.WriteString(fmt.Sprintf("%v", a.URLLimit))
	builder.WriteString(", member_type=")
	builder.WriteString(a.MemberType)
	builder.WriteString(", member_expired=")
	builder.WriteString(a.MemberExpired.Format(time.ANSIC))
	builder.WriteString(", has_entire=")
	builder.WriteString(fmt.Sprintf("%v", a.HasEntire))
	builder.WriteString(", has_new=")
	builder.WriteString(fmt.Sprintf("%v", a.HasNew))
	builder.WriteString(", has_admin=")
	builder.WriteString(fmt.Sprintf("%v", a.HasAdmin))
	builder.WriteString(", fans=")
	builder.WriteString(fmt.Sprintf("%v", a.Fans))
	builder.WriteString(", focus=")
	builder.WriteString(fmt.Sprintf("%v", a.Focus))
	builder.WriteByte(')')
	return builder.String()
}

// Accounts is a parsable slice of Account.
type Accounts []*Account

func (a Accounts) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
