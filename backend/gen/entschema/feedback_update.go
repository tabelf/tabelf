// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/feedback"
	"tabelf/backend/gen/entschema/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeedbackUpdate is the builder for updating Feedback entities.
type FeedbackUpdate struct {
	config
	hooks    []Hook
	mutation *FeedbackMutation
}

// Where appends a list predicates to the FeedbackUpdate builder.
func (fu *FeedbackUpdate) Where(ps ...predicate.Feedback) *FeedbackUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FeedbackUpdate) SetUpdatedAt(t time.Time) *FeedbackUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (fu *FeedbackUpdate) SetDeactivatedAt(t time.Time) *FeedbackUpdate {
	fu.mutation.SetDeactivatedAt(t)
	return fu
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (fu *FeedbackUpdate) SetNillableDeactivatedAt(t *time.Time) *FeedbackUpdate {
	if t != nil {
		fu.SetDeactivatedAt(*t)
	}
	return fu
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (fu *FeedbackUpdate) ClearDeactivatedAt() *FeedbackUpdate {
	fu.mutation.ClearDeactivatedAt()
	return fu
}

// SetUserUID sets the "user_uid" field.
func (fu *FeedbackUpdate) SetUserUID(s string) *FeedbackUpdate {
	fu.mutation.SetUserUID(s)
	return fu
}

// SetCategory sets the "category" field.
func (fu *FeedbackUpdate) SetCategory(s string) *FeedbackUpdate {
	fu.mutation.SetCategory(s)
	return fu
}

// SetDescription sets the "description" field.
func (fu *FeedbackUpdate) SetDescription(s string) *FeedbackUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fu *FeedbackUpdate) SetNillableDescription(s *string) *FeedbackUpdate {
	if s != nil {
		fu.SetDescription(*s)
	}
	return fu
}

// ClearDescription clears the value of the "description" field.
func (fu *FeedbackUpdate) ClearDescription() *FeedbackUpdate {
	fu.mutation.ClearDescription()
	return fu
}

// Mutation returns the FeedbackMutation object of the builder.
func (fu *FeedbackUpdate) Mutation() *FeedbackMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeedbackUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fu.defaults()
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeedbackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeedbackUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeedbackUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeedbackUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FeedbackUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := feedback.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

func (fu *FeedbackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feedback.Table,
			Columns: feedback.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: feedback.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: feedback.FieldUpdatedAt,
		})
	}
	if value, ok := fu.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: feedback.FieldDeactivatedAt,
		})
	}
	if fu.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: feedback.FieldDeactivatedAt,
		})
	}
	if value, ok := fu.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedback.FieldUserUID,
		})
	}
	if value, ok := fu.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedback.FieldCategory,
		})
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedback.FieldDescription,
		})
	}
	if fu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: feedback.FieldDescription,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FeedbackUpdateOne is the builder for updating a single Feedback entity.
type FeedbackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeedbackMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FeedbackUpdateOne) SetUpdatedAt(t time.Time) *FeedbackUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (fuo *FeedbackUpdateOne) SetDeactivatedAt(t time.Time) *FeedbackUpdateOne {
	fuo.mutation.SetDeactivatedAt(t)
	return fuo
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (fuo *FeedbackUpdateOne) SetNillableDeactivatedAt(t *time.Time) *FeedbackUpdateOne {
	if t != nil {
		fuo.SetDeactivatedAt(*t)
	}
	return fuo
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (fuo *FeedbackUpdateOne) ClearDeactivatedAt() *FeedbackUpdateOne {
	fuo.mutation.ClearDeactivatedAt()
	return fuo
}

// SetUserUID sets the "user_uid" field.
func (fuo *FeedbackUpdateOne) SetUserUID(s string) *FeedbackUpdateOne {
	fuo.mutation.SetUserUID(s)
	return fuo
}

// SetCategory sets the "category" field.
func (fuo *FeedbackUpdateOne) SetCategory(s string) *FeedbackUpdateOne {
	fuo.mutation.SetCategory(s)
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *FeedbackUpdateOne) SetDescription(s string) *FeedbackUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fuo *FeedbackUpdateOne) SetNillableDescription(s *string) *FeedbackUpdateOne {
	if s != nil {
		fuo.SetDescription(*s)
	}
	return fuo
}

// ClearDescription clears the value of the "description" field.
func (fuo *FeedbackUpdateOne) ClearDescription() *FeedbackUpdateOne {
	fuo.mutation.ClearDescription()
	return fuo
}

// Mutation returns the FeedbackMutation object of the builder.
func (fuo *FeedbackUpdateOne) Mutation() *FeedbackMutation {
	return fuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FeedbackUpdateOne) Select(field string, fields ...string) *FeedbackUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Feedback entity.
func (fuo *FeedbackUpdateOne) Save(ctx context.Context) (*Feedback, error) {
	var (
		err  error
		node *Feedback
	)
	fuo.defaults()
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeedbackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeedbackUpdateOne) SaveX(ctx context.Context) *Feedback {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeedbackUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeedbackUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FeedbackUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := feedback.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

func (fuo *FeedbackUpdateOne) sqlSave(ctx context.Context) (_node *Feedback, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feedback.Table,
			Columns: feedback.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: feedback.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entschema: missing "Feedback.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feedback.FieldID)
		for _, f := range fields {
			if !feedback.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entschema: invalid field %q for query", f)}
			}
			if f != feedback.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: feedback.FieldUpdatedAt,
		})
	}
	if value, ok := fuo.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: feedback.FieldDeactivatedAt,
		})
	}
	if fuo.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: feedback.FieldDeactivatedAt,
		})
	}
	if value, ok := fuo.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedback.FieldUserUID,
		})
	}
	if value, ok := fuo.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedback.FieldCategory,
		})
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedback.FieldDescription,
		})
	}
	if fuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: feedback.FieldDescription,
		})
	}
	_node = &Feedback{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
