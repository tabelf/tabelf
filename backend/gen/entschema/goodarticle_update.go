// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/goodarticle"
	"tabelf/backend/gen/entschema/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GoodArticleUpdate is the builder for updating GoodArticle entities.
type GoodArticleUpdate struct {
	config
	hooks    []Hook
	mutation *GoodArticleMutation
}

// Where appends a list predicates to the GoodArticleUpdate builder.
func (gau *GoodArticleUpdate) Where(ps ...predicate.GoodArticle) *GoodArticleUpdate {
	gau.mutation.Where(ps...)
	return gau
}

// SetUpdatedAt sets the "updated_at" field.
func (gau *GoodArticleUpdate) SetUpdatedAt(t time.Time) *GoodArticleUpdate {
	gau.mutation.SetUpdatedAt(t)
	return gau
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (gau *GoodArticleUpdate) SetDeactivatedAt(t time.Time) *GoodArticleUpdate {
	gau.mutation.SetDeactivatedAt(t)
	return gau
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (gau *GoodArticleUpdate) SetNillableDeactivatedAt(t *time.Time) *GoodArticleUpdate {
	if t != nil {
		gau.SetDeactivatedAt(*t)
	}
	return gau
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (gau *GoodArticleUpdate) ClearDeactivatedAt() *GoodArticleUpdate {
	gau.mutation.ClearDeactivatedAt()
	return gau
}

// SetTitle sets the "title" field.
func (gau *GoodArticleUpdate) SetTitle(s string) *GoodArticleUpdate {
	gau.mutation.SetTitle(s)
	return gau
}

// SetDescription sets the "description" field.
func (gau *GoodArticleUpdate) SetDescription(s string) *GoodArticleUpdate {
	gau.mutation.SetDescription(s)
	return gau
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gau *GoodArticleUpdate) SetNillableDescription(s *string) *GoodArticleUpdate {
	if s != nil {
		gau.SetDescription(*s)
	}
	return gau
}

// ClearDescription clears the value of the "description" field.
func (gau *GoodArticleUpdate) ClearDescription() *GoodArticleUpdate {
	gau.mutation.ClearDescription()
	return gau
}

// SetImage sets the "image" field.
func (gau *GoodArticleUpdate) SetImage(s string) *GoodArticleUpdate {
	gau.mutation.SetImage(s)
	return gau
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (gau *GoodArticleUpdate) SetNillableImage(s *string) *GoodArticleUpdate {
	if s != nil {
		gau.SetImage(*s)
	}
	return gau
}

// ClearImage clears the value of the "image" field.
func (gau *GoodArticleUpdate) ClearImage() *GoodArticleUpdate {
	gau.mutation.ClearImage()
	return gau
}

// SetSource sets the "source" field.
func (gau *GoodArticleUpdate) SetSource(s string) *GoodArticleUpdate {
	gau.mutation.SetSource(s)
	return gau
}

// SetIcon sets the "icon" field.
func (gau *GoodArticleUpdate) SetIcon(s string) *GoodArticleUpdate {
	gau.mutation.SetIcon(s)
	return gau
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (gau *GoodArticleUpdate) SetNillableIcon(s *string) *GoodArticleUpdate {
	if s != nil {
		gau.SetIcon(*s)
	}
	return gau
}

// ClearIcon clears the value of the "icon" field.
func (gau *GoodArticleUpdate) ClearIcon() *GoodArticleUpdate {
	gau.mutation.ClearIcon()
	return gau
}

// SetLink sets the "link" field.
func (gau *GoodArticleUpdate) SetLink(s string) *GoodArticleUpdate {
	gau.mutation.SetLink(s)
	return gau
}

// SetStar sets the "star" field.
func (gau *GoodArticleUpdate) SetStar(i int) *GoodArticleUpdate {
	gau.mutation.ResetStar()
	gau.mutation.SetStar(i)
	return gau
}

// SetNillableStar sets the "star" field if the given value is not nil.
func (gau *GoodArticleUpdate) SetNillableStar(i *int) *GoodArticleUpdate {
	if i != nil {
		gau.SetStar(*i)
	}
	return gau
}

// AddStar adds i to the "star" field.
func (gau *GoodArticleUpdate) AddStar(i int) *GoodArticleUpdate {
	gau.mutation.AddStar(i)
	return gau
}

// SetView sets the "view" field.
func (gau *GoodArticleUpdate) SetView(i int) *GoodArticleUpdate {
	gau.mutation.ResetView()
	gau.mutation.SetView(i)
	return gau
}

// SetNillableView sets the "view" field if the given value is not nil.
func (gau *GoodArticleUpdate) SetNillableView(i *int) *GoodArticleUpdate {
	if i != nil {
		gau.SetView(*i)
	}
	return gau
}

// AddView adds i to the "view" field.
func (gau *GoodArticleUpdate) AddView(i int) *GoodArticleUpdate {
	gau.mutation.AddView(i)
	return gau
}

// SetUsed sets the "used" field.
func (gau *GoodArticleUpdate) SetUsed(i int) *GoodArticleUpdate {
	gau.mutation.ResetUsed()
	gau.mutation.SetUsed(i)
	return gau
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (gau *GoodArticleUpdate) SetNillableUsed(i *int) *GoodArticleUpdate {
	if i != nil {
		gau.SetUsed(*i)
	}
	return gau
}

// AddUsed adds i to the "used" field.
func (gau *GoodArticleUpdate) AddUsed(i int) *GoodArticleUpdate {
	gau.mutation.AddUsed(i)
	return gau
}

// SetUserUID sets the "user_uid" field.
func (gau *GoodArticleUpdate) SetUserUID(s string) *GoodArticleUpdate {
	gau.mutation.SetUserUID(s)
	return gau
}

// SetStatus sets the "status" field.
func (gau *GoodArticleUpdate) SetStatus(s string) *GoodArticleUpdate {
	gau.mutation.SetStatus(s)
	return gau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gau *GoodArticleUpdate) SetNillableStatus(s *string) *GoodArticleUpdate {
	if s != nil {
		gau.SetStatus(*s)
	}
	return gau
}

// SetCategoryUID sets the "category_uid" field.
func (gau *GoodArticleUpdate) SetCategoryUID(s string) *GoodArticleUpdate {
	gau.mutation.SetCategoryUID(s)
	return gau
}

// Mutation returns the GoodArticleMutation object of the builder.
func (gau *GoodArticleUpdate) Mutation() *GoodArticleMutation {
	return gau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gau *GoodArticleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gau.defaults()
	if len(gau.hooks) == 0 {
		affected, err = gau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodArticleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gau.mutation = mutation
			affected, err = gau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gau.hooks) - 1; i >= 0; i-- {
			if gau.hooks[i] == nil {
				return 0, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = gau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gau *GoodArticleUpdate) SaveX(ctx context.Context) int {
	affected, err := gau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gau *GoodArticleUpdate) Exec(ctx context.Context) error {
	_, err := gau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gau *GoodArticleUpdate) ExecX(ctx context.Context) {
	if err := gau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gau *GoodArticleUpdate) defaults() {
	if _, ok := gau.mutation.UpdatedAt(); !ok {
		v := goodarticle.UpdateDefaultUpdatedAt()
		gau.mutation.SetUpdatedAt(v)
	}
}

func (gau *GoodArticleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodarticle.Table,
			Columns: goodarticle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: goodarticle.FieldID,
			},
		},
	}
	if ps := gau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticle.FieldUpdatedAt,
		})
	}
	if value, ok := gau.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticle.FieldDeactivatedAt,
		})
	}
	if gau.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodarticle.FieldDeactivatedAt,
		})
	}
	if value, ok := gau.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldTitle,
		})
	}
	if value, ok := gau.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldDescription,
		})
	}
	if gau.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodarticle.FieldDescription,
		})
	}
	if value, ok := gau.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldImage,
		})
	}
	if gau.mutation.ImageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodarticle.FieldImage,
		})
	}
	if value, ok := gau.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldSource,
		})
	}
	if value, ok := gau.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldIcon,
		})
	}
	if gau.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodarticle.FieldIcon,
		})
	}
	if value, ok := gau.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldLink,
		})
	}
	if value, ok := gau.mutation.Star(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodarticle.FieldStar,
		})
	}
	if value, ok := gau.mutation.AddedStar(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodarticle.FieldStar,
		})
	}
	if value, ok := gau.mutation.View(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodarticle.FieldView,
		})
	}
	if value, ok := gau.mutation.AddedView(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodarticle.FieldView,
		})
	}
	if value, ok := gau.mutation.Used(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodarticle.FieldUsed,
		})
	}
	if value, ok := gau.mutation.AddedUsed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodarticle.FieldUsed,
		})
	}
	if value, ok := gau.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldUserUID,
		})
	}
	if value, ok := gau.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldStatus,
		})
	}
	if value, ok := gau.mutation.CategoryUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldCategoryUID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodarticle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GoodArticleUpdateOne is the builder for updating a single GoodArticle entity.
type GoodArticleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodArticleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (gauo *GoodArticleUpdateOne) SetUpdatedAt(t time.Time) *GoodArticleUpdateOne {
	gauo.mutation.SetUpdatedAt(t)
	return gauo
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (gauo *GoodArticleUpdateOne) SetDeactivatedAt(t time.Time) *GoodArticleUpdateOne {
	gauo.mutation.SetDeactivatedAt(t)
	return gauo
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (gauo *GoodArticleUpdateOne) SetNillableDeactivatedAt(t *time.Time) *GoodArticleUpdateOne {
	if t != nil {
		gauo.SetDeactivatedAt(*t)
	}
	return gauo
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (gauo *GoodArticleUpdateOne) ClearDeactivatedAt() *GoodArticleUpdateOne {
	gauo.mutation.ClearDeactivatedAt()
	return gauo
}

// SetTitle sets the "title" field.
func (gauo *GoodArticleUpdateOne) SetTitle(s string) *GoodArticleUpdateOne {
	gauo.mutation.SetTitle(s)
	return gauo
}

// SetDescription sets the "description" field.
func (gauo *GoodArticleUpdateOne) SetDescription(s string) *GoodArticleUpdateOne {
	gauo.mutation.SetDescription(s)
	return gauo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gauo *GoodArticleUpdateOne) SetNillableDescription(s *string) *GoodArticleUpdateOne {
	if s != nil {
		gauo.SetDescription(*s)
	}
	return gauo
}

// ClearDescription clears the value of the "description" field.
func (gauo *GoodArticleUpdateOne) ClearDescription() *GoodArticleUpdateOne {
	gauo.mutation.ClearDescription()
	return gauo
}

// SetImage sets the "image" field.
func (gauo *GoodArticleUpdateOne) SetImage(s string) *GoodArticleUpdateOne {
	gauo.mutation.SetImage(s)
	return gauo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (gauo *GoodArticleUpdateOne) SetNillableImage(s *string) *GoodArticleUpdateOne {
	if s != nil {
		gauo.SetImage(*s)
	}
	return gauo
}

// ClearImage clears the value of the "image" field.
func (gauo *GoodArticleUpdateOne) ClearImage() *GoodArticleUpdateOne {
	gauo.mutation.ClearImage()
	return gauo
}

// SetSource sets the "source" field.
func (gauo *GoodArticleUpdateOne) SetSource(s string) *GoodArticleUpdateOne {
	gauo.mutation.SetSource(s)
	return gauo
}

// SetIcon sets the "icon" field.
func (gauo *GoodArticleUpdateOne) SetIcon(s string) *GoodArticleUpdateOne {
	gauo.mutation.SetIcon(s)
	return gauo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (gauo *GoodArticleUpdateOne) SetNillableIcon(s *string) *GoodArticleUpdateOne {
	if s != nil {
		gauo.SetIcon(*s)
	}
	return gauo
}

// ClearIcon clears the value of the "icon" field.
func (gauo *GoodArticleUpdateOne) ClearIcon() *GoodArticleUpdateOne {
	gauo.mutation.ClearIcon()
	return gauo
}

// SetLink sets the "link" field.
func (gauo *GoodArticleUpdateOne) SetLink(s string) *GoodArticleUpdateOne {
	gauo.mutation.SetLink(s)
	return gauo
}

// SetStar sets the "star" field.
func (gauo *GoodArticleUpdateOne) SetStar(i int) *GoodArticleUpdateOne {
	gauo.mutation.ResetStar()
	gauo.mutation.SetStar(i)
	return gauo
}

// SetNillableStar sets the "star" field if the given value is not nil.
func (gauo *GoodArticleUpdateOne) SetNillableStar(i *int) *GoodArticleUpdateOne {
	if i != nil {
		gauo.SetStar(*i)
	}
	return gauo
}

// AddStar adds i to the "star" field.
func (gauo *GoodArticleUpdateOne) AddStar(i int) *GoodArticleUpdateOne {
	gauo.mutation.AddStar(i)
	return gauo
}

// SetView sets the "view" field.
func (gauo *GoodArticleUpdateOne) SetView(i int) *GoodArticleUpdateOne {
	gauo.mutation.ResetView()
	gauo.mutation.SetView(i)
	return gauo
}

// SetNillableView sets the "view" field if the given value is not nil.
func (gauo *GoodArticleUpdateOne) SetNillableView(i *int) *GoodArticleUpdateOne {
	if i != nil {
		gauo.SetView(*i)
	}
	return gauo
}

// AddView adds i to the "view" field.
func (gauo *GoodArticleUpdateOne) AddView(i int) *GoodArticleUpdateOne {
	gauo.mutation.AddView(i)
	return gauo
}

// SetUsed sets the "used" field.
func (gauo *GoodArticleUpdateOne) SetUsed(i int) *GoodArticleUpdateOne {
	gauo.mutation.ResetUsed()
	gauo.mutation.SetUsed(i)
	return gauo
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (gauo *GoodArticleUpdateOne) SetNillableUsed(i *int) *GoodArticleUpdateOne {
	if i != nil {
		gauo.SetUsed(*i)
	}
	return gauo
}

// AddUsed adds i to the "used" field.
func (gauo *GoodArticleUpdateOne) AddUsed(i int) *GoodArticleUpdateOne {
	gauo.mutation.AddUsed(i)
	return gauo
}

// SetUserUID sets the "user_uid" field.
func (gauo *GoodArticleUpdateOne) SetUserUID(s string) *GoodArticleUpdateOne {
	gauo.mutation.SetUserUID(s)
	return gauo
}

// SetStatus sets the "status" field.
func (gauo *GoodArticleUpdateOne) SetStatus(s string) *GoodArticleUpdateOne {
	gauo.mutation.SetStatus(s)
	return gauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gauo *GoodArticleUpdateOne) SetNillableStatus(s *string) *GoodArticleUpdateOne {
	if s != nil {
		gauo.SetStatus(*s)
	}
	return gauo
}

// SetCategoryUID sets the "category_uid" field.
func (gauo *GoodArticleUpdateOne) SetCategoryUID(s string) *GoodArticleUpdateOne {
	gauo.mutation.SetCategoryUID(s)
	return gauo
}

// Mutation returns the GoodArticleMutation object of the builder.
func (gauo *GoodArticleUpdateOne) Mutation() *GoodArticleMutation {
	return gauo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gauo *GoodArticleUpdateOne) Select(field string, fields ...string) *GoodArticleUpdateOne {
	gauo.fields = append([]string{field}, fields...)
	return gauo
}

// Save executes the query and returns the updated GoodArticle entity.
func (gauo *GoodArticleUpdateOne) Save(ctx context.Context) (*GoodArticle, error) {
	var (
		err  error
		node *GoodArticle
	)
	gauo.defaults()
	if len(gauo.hooks) == 0 {
		node, err = gauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodArticleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gauo.mutation = mutation
			node, err = gauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gauo.hooks) - 1; i >= 0; i-- {
			if gauo.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = gauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gauo *GoodArticleUpdateOne) SaveX(ctx context.Context) *GoodArticle {
	node, err := gauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gauo *GoodArticleUpdateOne) Exec(ctx context.Context) error {
	_, err := gauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gauo *GoodArticleUpdateOne) ExecX(ctx context.Context) {
	if err := gauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gauo *GoodArticleUpdateOne) defaults() {
	if _, ok := gauo.mutation.UpdatedAt(); !ok {
		v := goodarticle.UpdateDefaultUpdatedAt()
		gauo.mutation.SetUpdatedAt(v)
	}
}

func (gauo *GoodArticleUpdateOne) sqlSave(ctx context.Context) (_node *GoodArticle, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodarticle.Table,
			Columns: goodarticle.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: goodarticle.FieldID,
			},
		},
	}
	id, ok := gauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entschema: missing "GoodArticle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodarticle.FieldID)
		for _, f := range fields {
			if !goodarticle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entschema: invalid field %q for query", f)}
			}
			if f != goodarticle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticle.FieldUpdatedAt,
		})
	}
	if value, ok := gauo.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticle.FieldDeactivatedAt,
		})
	}
	if gauo.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodarticle.FieldDeactivatedAt,
		})
	}
	if value, ok := gauo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldTitle,
		})
	}
	if value, ok := gauo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldDescription,
		})
	}
	if gauo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodarticle.FieldDescription,
		})
	}
	if value, ok := gauo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldImage,
		})
	}
	if gauo.mutation.ImageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodarticle.FieldImage,
		})
	}
	if value, ok := gauo.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldSource,
		})
	}
	if value, ok := gauo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldIcon,
		})
	}
	if gauo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: goodarticle.FieldIcon,
		})
	}
	if value, ok := gauo.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldLink,
		})
	}
	if value, ok := gauo.mutation.Star(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodarticle.FieldStar,
		})
	}
	if value, ok := gauo.mutation.AddedStar(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodarticle.FieldStar,
		})
	}
	if value, ok := gauo.mutation.View(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodarticle.FieldView,
		})
	}
	if value, ok := gauo.mutation.AddedView(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodarticle.FieldView,
		})
	}
	if value, ok := gauo.mutation.Used(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodarticle.FieldUsed,
		})
	}
	if value, ok := gauo.mutation.AddedUsed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodarticle.FieldUsed,
		})
	}
	if value, ok := gauo.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldUserUID,
		})
	}
	if value, ok := gauo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldStatus,
		})
	}
	if value, ok := gauo.mutation.CategoryUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldCategoryUID,
		})
	}
	_node = &GoodArticle{config: gauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodarticle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
