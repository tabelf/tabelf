// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"tabelf/backend/gen/entschema/account"
	"tabelf/backend/gen/entschema/admin"
	"tabelf/backend/gen/entschema/collaboration"
	"tabelf/backend/gen/entschema/community"
	"tabelf/backend/gen/entschema/communitycategory"
	"tabelf/backend/gen/entschema/communitymeta"
	"tabelf/backend/gen/entschema/feedback"
	"tabelf/backend/gen/entschema/focus"
	"tabelf/backend/gen/entschema/goodarticle"
	"tabelf/backend/gen/entschema/goodarticlecategory"
	"tabelf/backend/gen/entschema/goodarticlehot"
	"tabelf/backend/gen/entschema/goodarticlemeta"
	"tabelf/backend/gen/entschema/invite"
	"tabelf/backend/gen/entschema/message"
	"tabelf/backend/gen/entschema/notice"
	"tabelf/backend/gen/entschema/payorder"
	"tabelf/backend/gen/entschema/payorderfeedback"
	"tabelf/backend/gen/entschema/personalfolder"
	"tabelf/backend/gen/entschema/recharge"
	"tabelf/backend/gen/entschema/sharelink"
	"tabelf/backend/gen/entschema/station"
	"tabelf/backend/gen/entschema/stationcategory"
	"tabelf/backend/gen/entschema/stationmeta"
	"tabelf/backend/gen/entschema/team"
	"tabelf/backend/gen/entschema/teamfolder"
	"tabelf/backend/gen/entschema/teamgroup"
	"tabelf/backend/gen/entschema/urlcrawl"
	"tabelf/backend/gen/entschema/weblink"
	"tabelf/backend/gen/entschema/workspace"
	"tabelf/backend/spec/schema"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	accountMixin := schema.Account{}.Mixin()
	accountMixinFields0 := accountMixin[0].Fields()
	_ = accountMixinFields0
	accountFields := schema.Account{}.Fields()
	_ = accountFields
	// accountDescUID is the schema descriptor for uid field.
	accountDescUID := accountMixinFields0[0].Descriptor()
	// account.DefaultUID holds the default value on creation for the uid field.
	account.DefaultUID = accountDescUID.Default.(func() string)
	// account.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	account.UIDValidator = func() func(string) error {
		validators := accountDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// accountDescCreatedAt is the schema descriptor for created_at field.
	accountDescCreatedAt := accountMixinFields0[1].Descriptor()
	// account.DefaultCreatedAt holds the default value on creation for the created_at field.
	account.DefaultCreatedAt = accountDescCreatedAt.Default.(func() time.Time)
	// accountDescUpdatedAt is the schema descriptor for updated_at field.
	accountDescUpdatedAt := accountMixinFields0[2].Descriptor()
	// account.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	account.DefaultUpdatedAt = accountDescUpdatedAt.Default.(func() time.Time)
	// account.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	account.UpdateDefaultUpdatedAt = accountDescUpdatedAt.UpdateDefault.(func() time.Time)
	// accountDescSex is the schema descriptor for sex field.
	accountDescSex := accountFields[4].Descriptor()
	// account.DefaultSex holds the default value on creation for the sex field.
	account.DefaultSex = accountDescSex.Default.(int)
	// accountDescURLCount is the schema descriptor for url_count field.
	accountDescURLCount := accountFields[13].Descriptor()
	// account.DefaultURLCount holds the default value on creation for the url_count field.
	account.DefaultURLCount = accountDescURLCount.Default.(int)
	// accountDescURLLimit is the schema descriptor for url_limit field.
	accountDescURLLimit := accountFields[14].Descriptor()
	// account.DefaultURLLimit holds the default value on creation for the url_limit field.
	account.DefaultURLLimit = accountDescURLLimit.Default.(int)
	// accountDescMemberType is the schema descriptor for member_type field.
	accountDescMemberType := accountFields[15].Descriptor()
	// account.DefaultMemberType holds the default value on creation for the member_type field.
	account.DefaultMemberType = accountDescMemberType.Default.(string)
	// accountDescHasEntire is the schema descriptor for has_entire field.
	accountDescHasEntire := accountFields[17].Descriptor()
	// account.DefaultHasEntire holds the default value on creation for the has_entire field.
	account.DefaultHasEntire = accountDescHasEntire.Default.(bool)
	// accountDescHasNew is the schema descriptor for has_new field.
	accountDescHasNew := accountFields[18].Descriptor()
	// account.DefaultHasNew holds the default value on creation for the has_new field.
	account.DefaultHasNew = accountDescHasNew.Default.(bool)
	// accountDescHasAdmin is the schema descriptor for has_admin field.
	accountDescHasAdmin := accountFields[19].Descriptor()
	// account.DefaultHasAdmin holds the default value on creation for the has_admin field.
	account.DefaultHasAdmin = accountDescHasAdmin.Default.(bool)
	// accountDescFans is the schema descriptor for fans field.
	accountDescFans := accountFields[20].Descriptor()
	// account.DefaultFans holds the default value on creation for the fans field.
	account.DefaultFans = accountDescFans.Default.(int)
	// accountDescFocus is the schema descriptor for focus field.
	accountDescFocus := accountFields[21].Descriptor()
	// account.DefaultFocus holds the default value on creation for the focus field.
	account.DefaultFocus = accountDescFocus.Default.(int)
	adminMixin := schema.Admin{}.Mixin()
	adminMixinFields0 := adminMixin[0].Fields()
	_ = adminMixinFields0
	adminFields := schema.Admin{}.Fields()
	_ = adminFields
	// adminDescUID is the schema descriptor for uid field.
	adminDescUID := adminMixinFields0[0].Descriptor()
	// admin.DefaultUID holds the default value on creation for the uid field.
	admin.DefaultUID = adminDescUID.Default.(func() string)
	// admin.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	admin.UIDValidator = func() func(string) error {
		validators := adminDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// adminDescCreatedAt is the schema descriptor for created_at field.
	adminDescCreatedAt := adminMixinFields0[1].Descriptor()
	// admin.DefaultCreatedAt holds the default value on creation for the created_at field.
	admin.DefaultCreatedAt = adminDescCreatedAt.Default.(func() time.Time)
	// adminDescUpdatedAt is the schema descriptor for updated_at field.
	adminDescUpdatedAt := adminMixinFields0[2].Descriptor()
	// admin.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	admin.DefaultUpdatedAt = adminDescUpdatedAt.Default.(func() time.Time)
	// admin.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	admin.UpdateDefaultUpdatedAt = adminDescUpdatedAt.UpdateDefault.(func() time.Time)
	collaborationMixin := schema.Collaboration{}.Mixin()
	collaborationMixinFields0 := collaborationMixin[0].Fields()
	_ = collaborationMixinFields0
	collaborationFields := schema.Collaboration{}.Fields()
	_ = collaborationFields
	// collaborationDescUID is the schema descriptor for uid field.
	collaborationDescUID := collaborationMixinFields0[0].Descriptor()
	// collaboration.DefaultUID holds the default value on creation for the uid field.
	collaboration.DefaultUID = collaborationDescUID.Default.(func() string)
	// collaboration.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	collaboration.UIDValidator = func() func(string) error {
		validators := collaborationDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// collaborationDescCreatedAt is the schema descriptor for created_at field.
	collaborationDescCreatedAt := collaborationMixinFields0[1].Descriptor()
	// collaboration.DefaultCreatedAt holds the default value on creation for the created_at field.
	collaboration.DefaultCreatedAt = collaborationDescCreatedAt.Default.(func() time.Time)
	// collaborationDescUpdatedAt is the schema descriptor for updated_at field.
	collaborationDescUpdatedAt := collaborationMixinFields0[2].Descriptor()
	// collaboration.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	collaboration.DefaultUpdatedAt = collaborationDescUpdatedAt.Default.(func() time.Time)
	// collaboration.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	collaboration.UpdateDefaultUpdatedAt = collaborationDescUpdatedAt.UpdateDefault.(func() time.Time)
	// collaborationDescFolderNumber is the schema descriptor for folder_number field.
	collaborationDescFolderNumber := collaborationFields[5].Descriptor()
	// collaboration.FolderNumberValidator is a validator for the "folder_number" field. It is called by the builders before save.
	collaboration.FolderNumberValidator = func() func(string) error {
		validators := collaborationDescFolderNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(folder_number string) error {
			for _, fn := range fns {
				if err := fn(folder_number); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	communityMixin := schema.Community{}.Mixin()
	communityMixinFields0 := communityMixin[0].Fields()
	_ = communityMixinFields0
	communityFields := schema.Community{}.Fields()
	_ = communityFields
	// communityDescUID is the schema descriptor for uid field.
	communityDescUID := communityMixinFields0[0].Descriptor()
	// community.DefaultUID holds the default value on creation for the uid field.
	community.DefaultUID = communityDescUID.Default.(func() string)
	// community.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	community.UIDValidator = func() func(string) error {
		validators := communityDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// communityDescCreatedAt is the schema descriptor for created_at field.
	communityDescCreatedAt := communityMixinFields0[1].Descriptor()
	// community.DefaultCreatedAt holds the default value on creation for the created_at field.
	community.DefaultCreatedAt = communityDescCreatedAt.Default.(func() time.Time)
	// communityDescUpdatedAt is the schema descriptor for updated_at field.
	communityDescUpdatedAt := communityMixinFields0[2].Descriptor()
	// community.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	community.DefaultUpdatedAt = communityDescUpdatedAt.Default.(func() time.Time)
	// community.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	community.UpdateDefaultUpdatedAt = communityDescUpdatedAt.UpdateDefault.(func() time.Time)
	// communityDescPraise is the schema descriptor for praise field.
	communityDescPraise := communityFields[5].Descriptor()
	// community.DefaultPraise holds the default value on creation for the praise field.
	community.DefaultPraise = communityDescPraise.Default.(int)
	// communityDescStar is the schema descriptor for star field.
	communityDescStar := communityFields[6].Descriptor()
	// community.DefaultStar holds the default value on creation for the star field.
	community.DefaultStar = communityDescStar.Default.(int)
	// communityDescView is the schema descriptor for view field.
	communityDescView := communityFields[7].Descriptor()
	// community.DefaultView holds the default value on creation for the view field.
	community.DefaultView = communityDescView.Default.(int)
	// communityDescUsed is the schema descriptor for used field.
	communityDescUsed := communityFields[8].Descriptor()
	// community.DefaultUsed holds the default value on creation for the used field.
	community.DefaultUsed = communityDescUsed.Default.(int)
	// communityDescStatus is the schema descriptor for status field.
	communityDescStatus := communityFields[11].Descriptor()
	// community.DefaultStatus holds the default value on creation for the status field.
	community.DefaultStatus = communityDescStatus.Default.(string)
	communitycategoryMixin := schema.CommunityCategory{}.Mixin()
	communitycategoryMixinFields0 := communitycategoryMixin[0].Fields()
	_ = communitycategoryMixinFields0
	communitycategoryFields := schema.CommunityCategory{}.Fields()
	_ = communitycategoryFields
	// communitycategoryDescUID is the schema descriptor for uid field.
	communitycategoryDescUID := communitycategoryMixinFields0[0].Descriptor()
	// communitycategory.DefaultUID holds the default value on creation for the uid field.
	communitycategory.DefaultUID = communitycategoryDescUID.Default.(func() string)
	// communitycategory.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	communitycategory.UIDValidator = func() func(string) error {
		validators := communitycategoryDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// communitycategoryDescCreatedAt is the schema descriptor for created_at field.
	communitycategoryDescCreatedAt := communitycategoryMixinFields0[1].Descriptor()
	// communitycategory.DefaultCreatedAt holds the default value on creation for the created_at field.
	communitycategory.DefaultCreatedAt = communitycategoryDescCreatedAt.Default.(func() time.Time)
	// communitycategoryDescUpdatedAt is the schema descriptor for updated_at field.
	communitycategoryDescUpdatedAt := communitycategoryMixinFields0[2].Descriptor()
	// communitycategory.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	communitycategory.DefaultUpdatedAt = communitycategoryDescUpdatedAt.Default.(func() time.Time)
	// communitycategory.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	communitycategory.UpdateDefaultUpdatedAt = communitycategoryDescUpdatedAt.UpdateDefault.(func() time.Time)
	// communitycategoryDescStatus is the schema descriptor for status field.
	communitycategoryDescStatus := communitycategoryFields[2].Descriptor()
	// communitycategory.DefaultStatus holds the default value on creation for the status field.
	communitycategory.DefaultStatus = communitycategoryDescStatus.Default.(bool)
	communitymetaMixin := schema.CommunityMeta{}.Mixin()
	communitymetaMixinFields0 := communitymetaMixin[0].Fields()
	_ = communitymetaMixinFields0
	communitymetaFields := schema.CommunityMeta{}.Fields()
	_ = communitymetaFields
	// communitymetaDescUID is the schema descriptor for uid field.
	communitymetaDescUID := communitymetaMixinFields0[0].Descriptor()
	// communitymeta.DefaultUID holds the default value on creation for the uid field.
	communitymeta.DefaultUID = communitymetaDescUID.Default.(func() string)
	// communitymeta.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	communitymeta.UIDValidator = func() func(string) error {
		validators := communitymetaDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// communitymetaDescCreatedAt is the schema descriptor for created_at field.
	communitymetaDescCreatedAt := communitymetaMixinFields0[1].Descriptor()
	// communitymeta.DefaultCreatedAt holds the default value on creation for the created_at field.
	communitymeta.DefaultCreatedAt = communitymetaDescCreatedAt.Default.(func() time.Time)
	// communitymetaDescUpdatedAt is the schema descriptor for updated_at field.
	communitymetaDescUpdatedAt := communitymetaMixinFields0[2].Descriptor()
	// communitymeta.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	communitymeta.DefaultUpdatedAt = communitymetaDescUpdatedAt.Default.(func() time.Time)
	// communitymeta.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	communitymeta.UpdateDefaultUpdatedAt = communitymetaDescUpdatedAt.UpdateDefault.(func() time.Time)
	// communitymetaDescHasPraise is the schema descriptor for has_praise field.
	communitymetaDescHasPraise := communitymetaFields[3].Descriptor()
	// communitymeta.DefaultHasPraise holds the default value on creation for the has_praise field.
	communitymeta.DefaultHasPraise = communitymetaDescHasPraise.Default.(bool)
	// communitymetaDescHasStar is the schema descriptor for has_star field.
	communitymetaDescHasStar := communitymetaFields[4].Descriptor()
	// communitymeta.DefaultHasStar holds the default value on creation for the has_star field.
	communitymeta.DefaultHasStar = communitymetaDescHasStar.Default.(bool)
	// communitymetaDescHasView is the schema descriptor for has_view field.
	communitymetaDescHasView := communitymetaFields[5].Descriptor()
	// communitymeta.DefaultHasView holds the default value on creation for the has_view field.
	communitymeta.DefaultHasView = communitymetaDescHasView.Default.(bool)
	// communitymetaDescHasUsed is the schema descriptor for has_used field.
	communitymetaDescHasUsed := communitymetaFields[6].Descriptor()
	// communitymeta.DefaultHasUsed holds the default value on creation for the has_used field.
	communitymeta.DefaultHasUsed = communitymetaDescHasUsed.Default.(bool)
	feedbackMixin := schema.Feedback{}.Mixin()
	feedbackMixinFields0 := feedbackMixin[0].Fields()
	_ = feedbackMixinFields0
	feedbackFields := schema.Feedback{}.Fields()
	_ = feedbackFields
	// feedbackDescUID is the schema descriptor for uid field.
	feedbackDescUID := feedbackMixinFields0[0].Descriptor()
	// feedback.DefaultUID holds the default value on creation for the uid field.
	feedback.DefaultUID = feedbackDescUID.Default.(func() string)
	// feedback.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	feedback.UIDValidator = func() func(string) error {
		validators := feedbackDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// feedbackDescCreatedAt is the schema descriptor for created_at field.
	feedbackDescCreatedAt := feedbackMixinFields0[1].Descriptor()
	// feedback.DefaultCreatedAt holds the default value on creation for the created_at field.
	feedback.DefaultCreatedAt = feedbackDescCreatedAt.Default.(func() time.Time)
	// feedbackDescUpdatedAt is the schema descriptor for updated_at field.
	feedbackDescUpdatedAt := feedbackMixinFields0[2].Descriptor()
	// feedback.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	feedback.DefaultUpdatedAt = feedbackDescUpdatedAt.Default.(func() time.Time)
	// feedback.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	feedback.UpdateDefaultUpdatedAt = feedbackDescUpdatedAt.UpdateDefault.(func() time.Time)
	focusMixin := schema.Focus{}.Mixin()
	focusMixinFields0 := focusMixin[0].Fields()
	_ = focusMixinFields0
	focusFields := schema.Focus{}.Fields()
	_ = focusFields
	// focusDescUID is the schema descriptor for uid field.
	focusDescUID := focusMixinFields0[0].Descriptor()
	// focus.DefaultUID holds the default value on creation for the uid field.
	focus.DefaultUID = focusDescUID.Default.(func() string)
	// focus.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	focus.UIDValidator = func() func(string) error {
		validators := focusDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// focusDescCreatedAt is the schema descriptor for created_at field.
	focusDescCreatedAt := focusMixinFields0[1].Descriptor()
	// focus.DefaultCreatedAt holds the default value on creation for the created_at field.
	focus.DefaultCreatedAt = focusDescCreatedAt.Default.(func() time.Time)
	// focusDescUpdatedAt is the schema descriptor for updated_at field.
	focusDescUpdatedAt := focusMixinFields0[2].Descriptor()
	// focus.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	focus.DefaultUpdatedAt = focusDescUpdatedAt.Default.(func() time.Time)
	// focus.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	focus.UpdateDefaultUpdatedAt = focusDescUpdatedAt.UpdateDefault.(func() time.Time)
	// focusDescStatus is the schema descriptor for status field.
	focusDescStatus := focusFields[2].Descriptor()
	// focus.DefaultStatus holds the default value on creation for the status field.
	focus.DefaultStatus = focusDescStatus.Default.(bool)
	goodarticleMixin := schema.GoodArticle{}.Mixin()
	goodarticleMixinFields0 := goodarticleMixin[0].Fields()
	_ = goodarticleMixinFields0
	goodarticleFields := schema.GoodArticle{}.Fields()
	_ = goodarticleFields
	// goodarticleDescUID is the schema descriptor for uid field.
	goodarticleDescUID := goodarticleMixinFields0[0].Descriptor()
	// goodarticle.DefaultUID holds the default value on creation for the uid field.
	goodarticle.DefaultUID = goodarticleDescUID.Default.(func() string)
	// goodarticle.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	goodarticle.UIDValidator = func() func(string) error {
		validators := goodarticleDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// goodarticleDescCreatedAt is the schema descriptor for created_at field.
	goodarticleDescCreatedAt := goodarticleMixinFields0[1].Descriptor()
	// goodarticle.DefaultCreatedAt holds the default value on creation for the created_at field.
	goodarticle.DefaultCreatedAt = goodarticleDescCreatedAt.Default.(func() time.Time)
	// goodarticleDescUpdatedAt is the schema descriptor for updated_at field.
	goodarticleDescUpdatedAt := goodarticleMixinFields0[2].Descriptor()
	// goodarticle.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	goodarticle.DefaultUpdatedAt = goodarticleDescUpdatedAt.Default.(func() time.Time)
	// goodarticle.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	goodarticle.UpdateDefaultUpdatedAt = goodarticleDescUpdatedAt.UpdateDefault.(func() time.Time)
	// goodarticleDescStar is the schema descriptor for star field.
	goodarticleDescStar := goodarticleFields[7].Descriptor()
	// goodarticle.DefaultStar holds the default value on creation for the star field.
	goodarticle.DefaultStar = goodarticleDescStar.Default.(int)
	// goodarticleDescView is the schema descriptor for view field.
	goodarticleDescView := goodarticleFields[8].Descriptor()
	// goodarticle.DefaultView holds the default value on creation for the view field.
	goodarticle.DefaultView = goodarticleDescView.Default.(int)
	// goodarticleDescUsed is the schema descriptor for used field.
	goodarticleDescUsed := goodarticleFields[9].Descriptor()
	// goodarticle.DefaultUsed holds the default value on creation for the used field.
	goodarticle.DefaultUsed = goodarticleDescUsed.Default.(int)
	// goodarticleDescStatus is the schema descriptor for status field.
	goodarticleDescStatus := goodarticleFields[11].Descriptor()
	// goodarticle.DefaultStatus holds the default value on creation for the status field.
	goodarticle.DefaultStatus = goodarticleDescStatus.Default.(string)
	goodarticlecategoryMixin := schema.GoodArticleCategory{}.Mixin()
	goodarticlecategoryMixinFields0 := goodarticlecategoryMixin[0].Fields()
	_ = goodarticlecategoryMixinFields0
	goodarticlecategoryFields := schema.GoodArticleCategory{}.Fields()
	_ = goodarticlecategoryFields
	// goodarticlecategoryDescUID is the schema descriptor for uid field.
	goodarticlecategoryDescUID := goodarticlecategoryMixinFields0[0].Descriptor()
	// goodarticlecategory.DefaultUID holds the default value on creation for the uid field.
	goodarticlecategory.DefaultUID = goodarticlecategoryDescUID.Default.(func() string)
	// goodarticlecategory.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	goodarticlecategory.UIDValidator = func() func(string) error {
		validators := goodarticlecategoryDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// goodarticlecategoryDescCreatedAt is the schema descriptor for created_at field.
	goodarticlecategoryDescCreatedAt := goodarticlecategoryMixinFields0[1].Descriptor()
	// goodarticlecategory.DefaultCreatedAt holds the default value on creation for the created_at field.
	goodarticlecategory.DefaultCreatedAt = goodarticlecategoryDescCreatedAt.Default.(func() time.Time)
	// goodarticlecategoryDescUpdatedAt is the schema descriptor for updated_at field.
	goodarticlecategoryDescUpdatedAt := goodarticlecategoryMixinFields0[2].Descriptor()
	// goodarticlecategory.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	goodarticlecategory.DefaultUpdatedAt = goodarticlecategoryDescUpdatedAt.Default.(func() time.Time)
	// goodarticlecategory.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	goodarticlecategory.UpdateDefaultUpdatedAt = goodarticlecategoryDescUpdatedAt.UpdateDefault.(func() time.Time)
	// goodarticlecategoryDescStatus is the schema descriptor for status field.
	goodarticlecategoryDescStatus := goodarticlecategoryFields[2].Descriptor()
	// goodarticlecategory.DefaultStatus holds the default value on creation for the status field.
	goodarticlecategory.DefaultStatus = goodarticlecategoryDescStatus.Default.(bool)
	goodarticlehotMixin := schema.GoodArticleHot{}.Mixin()
	goodarticlehotMixinFields0 := goodarticlehotMixin[0].Fields()
	_ = goodarticlehotMixinFields0
	goodarticlehotFields := schema.GoodArticleHot{}.Fields()
	_ = goodarticlehotFields
	// goodarticlehotDescUID is the schema descriptor for uid field.
	goodarticlehotDescUID := goodarticlehotMixinFields0[0].Descriptor()
	// goodarticlehot.DefaultUID holds the default value on creation for the uid field.
	goodarticlehot.DefaultUID = goodarticlehotDescUID.Default.(func() string)
	// goodarticlehot.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	goodarticlehot.UIDValidator = func() func(string) error {
		validators := goodarticlehotDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// goodarticlehotDescCreatedAt is the schema descriptor for created_at field.
	goodarticlehotDescCreatedAt := goodarticlehotMixinFields0[1].Descriptor()
	// goodarticlehot.DefaultCreatedAt holds the default value on creation for the created_at field.
	goodarticlehot.DefaultCreatedAt = goodarticlehotDescCreatedAt.Default.(func() time.Time)
	// goodarticlehotDescUpdatedAt is the schema descriptor for updated_at field.
	goodarticlehotDescUpdatedAt := goodarticlehotMixinFields0[2].Descriptor()
	// goodarticlehot.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	goodarticlehot.DefaultUpdatedAt = goodarticlehotDescUpdatedAt.Default.(func() time.Time)
	// goodarticlehot.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	goodarticlehot.UpdateDefaultUpdatedAt = goodarticlehotDescUpdatedAt.UpdateDefault.(func() time.Time)
	// goodarticlehotDescHasExpired is the schema descriptor for has_expired field.
	goodarticlehotDescHasExpired := goodarticlehotFields[2].Descriptor()
	// goodarticlehot.DefaultHasExpired holds the default value on creation for the has_expired field.
	goodarticlehot.DefaultHasExpired = goodarticlehotDescHasExpired.Default.(bool)
	goodarticlemetaMixin := schema.GoodArticleMeta{}.Mixin()
	goodarticlemetaMixinFields0 := goodarticlemetaMixin[0].Fields()
	_ = goodarticlemetaMixinFields0
	goodarticlemetaFields := schema.GoodArticleMeta{}.Fields()
	_ = goodarticlemetaFields
	// goodarticlemetaDescUID is the schema descriptor for uid field.
	goodarticlemetaDescUID := goodarticlemetaMixinFields0[0].Descriptor()
	// goodarticlemeta.DefaultUID holds the default value on creation for the uid field.
	goodarticlemeta.DefaultUID = goodarticlemetaDescUID.Default.(func() string)
	// goodarticlemeta.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	goodarticlemeta.UIDValidator = func() func(string) error {
		validators := goodarticlemetaDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// goodarticlemetaDescCreatedAt is the schema descriptor for created_at field.
	goodarticlemetaDescCreatedAt := goodarticlemetaMixinFields0[1].Descriptor()
	// goodarticlemeta.DefaultCreatedAt holds the default value on creation for the created_at field.
	goodarticlemeta.DefaultCreatedAt = goodarticlemetaDescCreatedAt.Default.(func() time.Time)
	// goodarticlemetaDescUpdatedAt is the schema descriptor for updated_at field.
	goodarticlemetaDescUpdatedAt := goodarticlemetaMixinFields0[2].Descriptor()
	// goodarticlemeta.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	goodarticlemeta.DefaultUpdatedAt = goodarticlemetaDescUpdatedAt.Default.(func() time.Time)
	// goodarticlemeta.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	goodarticlemeta.UpdateDefaultUpdatedAt = goodarticlemetaDescUpdatedAt.UpdateDefault.(func() time.Time)
	// goodarticlemetaDescHasStar is the schema descriptor for has_star field.
	goodarticlemetaDescHasStar := goodarticlemetaFields[3].Descriptor()
	// goodarticlemeta.DefaultHasStar holds the default value on creation for the has_star field.
	goodarticlemeta.DefaultHasStar = goodarticlemetaDescHasStar.Default.(bool)
	// goodarticlemetaDescHasView is the schema descriptor for has_view field.
	goodarticlemetaDescHasView := goodarticlemetaFields[4].Descriptor()
	// goodarticlemeta.DefaultHasView holds the default value on creation for the has_view field.
	goodarticlemeta.DefaultHasView = goodarticlemetaDescHasView.Default.(bool)
	// goodarticlemetaDescHasUsed is the schema descriptor for has_used field.
	goodarticlemetaDescHasUsed := goodarticlemetaFields[5].Descriptor()
	// goodarticlemeta.DefaultHasUsed holds the default value on creation for the has_used field.
	goodarticlemeta.DefaultHasUsed = goodarticlemetaDescHasUsed.Default.(bool)
	inviteMixin := schema.Invite{}.Mixin()
	inviteMixinFields0 := inviteMixin[0].Fields()
	_ = inviteMixinFields0
	inviteFields := schema.Invite{}.Fields()
	_ = inviteFields
	// inviteDescUID is the schema descriptor for uid field.
	inviteDescUID := inviteMixinFields0[0].Descriptor()
	// invite.DefaultUID holds the default value on creation for the uid field.
	invite.DefaultUID = inviteDescUID.Default.(func() string)
	// invite.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	invite.UIDValidator = func() func(string) error {
		validators := inviteDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// inviteDescCreatedAt is the schema descriptor for created_at field.
	inviteDescCreatedAt := inviteMixinFields0[1].Descriptor()
	// invite.DefaultCreatedAt holds the default value on creation for the created_at field.
	invite.DefaultCreatedAt = inviteDescCreatedAt.Default.(func() time.Time)
	// inviteDescUpdatedAt is the schema descriptor for updated_at field.
	inviteDescUpdatedAt := inviteMixinFields0[2].Descriptor()
	// invite.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	invite.DefaultUpdatedAt = inviteDescUpdatedAt.Default.(func() time.Time)
	// invite.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	invite.UpdateDefaultUpdatedAt = inviteDescUpdatedAt.UpdateDefault.(func() time.Time)
	messageMixin := schema.Message{}.Mixin()
	messageMixinFields0 := messageMixin[0].Fields()
	_ = messageMixinFields0
	messageFields := schema.Message{}.Fields()
	_ = messageFields
	// messageDescUID is the schema descriptor for uid field.
	messageDescUID := messageMixinFields0[0].Descriptor()
	// message.DefaultUID holds the default value on creation for the uid field.
	message.DefaultUID = messageDescUID.Default.(func() string)
	// message.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	message.UIDValidator = func() func(string) error {
		validators := messageDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// messageDescCreatedAt is the schema descriptor for created_at field.
	messageDescCreatedAt := messageMixinFields0[1].Descriptor()
	// message.DefaultCreatedAt holds the default value on creation for the created_at field.
	message.DefaultCreatedAt = messageDescCreatedAt.Default.(func() time.Time)
	// messageDescUpdatedAt is the schema descriptor for updated_at field.
	messageDescUpdatedAt := messageMixinFields0[2].Descriptor()
	// message.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	message.DefaultUpdatedAt = messageDescUpdatedAt.Default.(func() time.Time)
	// message.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	message.UpdateDefaultUpdatedAt = messageDescUpdatedAt.UpdateDefault.(func() time.Time)
	// messageDescHasRead is the schema descriptor for has_read field.
	messageDescHasRead := messageFields[5].Descriptor()
	// message.DefaultHasRead holds the default value on creation for the has_read field.
	message.DefaultHasRead = messageDescHasRead.Default.(bool)
	noticeMixin := schema.Notice{}.Mixin()
	noticeMixinFields0 := noticeMixin[0].Fields()
	_ = noticeMixinFields0
	noticeFields := schema.Notice{}.Fields()
	_ = noticeFields
	// noticeDescUID is the schema descriptor for uid field.
	noticeDescUID := noticeMixinFields0[0].Descriptor()
	// notice.DefaultUID holds the default value on creation for the uid field.
	notice.DefaultUID = noticeDescUID.Default.(func() string)
	// notice.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	notice.UIDValidator = func() func(string) error {
		validators := noticeDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// noticeDescCreatedAt is the schema descriptor for created_at field.
	noticeDescCreatedAt := noticeMixinFields0[1].Descriptor()
	// notice.DefaultCreatedAt holds the default value on creation for the created_at field.
	notice.DefaultCreatedAt = noticeDescCreatedAt.Default.(func() time.Time)
	// noticeDescUpdatedAt is the schema descriptor for updated_at field.
	noticeDescUpdatedAt := noticeMixinFields0[2].Descriptor()
	// notice.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	notice.DefaultUpdatedAt = noticeDescUpdatedAt.Default.(func() time.Time)
	// notice.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	notice.UpdateDefaultUpdatedAt = noticeDescUpdatedAt.UpdateDefault.(func() time.Time)
	// noticeDescProcess is the schema descriptor for process field.
	noticeDescProcess := noticeFields[1].Descriptor()
	// notice.DefaultProcess holds the default value on creation for the process field.
	notice.DefaultProcess = noticeDescProcess.Default.(bool)
	payorderMixin := schema.PayOrder{}.Mixin()
	payorderMixinFields0 := payorderMixin[0].Fields()
	_ = payorderMixinFields0
	payorderFields := schema.PayOrder{}.Fields()
	_ = payorderFields
	// payorderDescUID is the schema descriptor for uid field.
	payorderDescUID := payorderMixinFields0[0].Descriptor()
	// payorder.DefaultUID holds the default value on creation for the uid field.
	payorder.DefaultUID = payorderDescUID.Default.(func() string)
	// payorder.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	payorder.UIDValidator = func() func(string) error {
		validators := payorderDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// payorderDescCreatedAt is the schema descriptor for created_at field.
	payorderDescCreatedAt := payorderMixinFields0[1].Descriptor()
	// payorder.DefaultCreatedAt holds the default value on creation for the created_at field.
	payorder.DefaultCreatedAt = payorderDescCreatedAt.Default.(func() time.Time)
	// payorderDescUpdatedAt is the schema descriptor for updated_at field.
	payorderDescUpdatedAt := payorderMixinFields0[2].Descriptor()
	// payorder.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	payorder.DefaultUpdatedAt = payorderDescUpdatedAt.Default.(func() time.Time)
	// payorder.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	payorder.UpdateDefaultUpdatedAt = payorderDescUpdatedAt.UpdateDefault.(func() time.Time)
	// payorderDescStatus is the schema descriptor for status field.
	payorderDescStatus := payorderFields[8].Descriptor()
	// payorder.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	payorder.StatusValidator = payorderDescStatus.Validators[0].(func(string) error)
	// payorderDescCancelEvent is the schema descriptor for cancel_event field.
	payorderDescCancelEvent := payorderFields[14].Descriptor()
	// payorder.CancelEventValidator is a validator for the "cancel_event" field. It is called by the builders before save.
	payorder.CancelEventValidator = payorderDescCancelEvent.Validators[0].(func(string) error)
	payorderfeedbackMixin := schema.PayOrderFeedback{}.Mixin()
	payorderfeedbackMixinFields0 := payorderfeedbackMixin[0].Fields()
	_ = payorderfeedbackMixinFields0
	payorderfeedbackFields := schema.PayOrderFeedback{}.Fields()
	_ = payorderfeedbackFields
	// payorderfeedbackDescUID is the schema descriptor for uid field.
	payorderfeedbackDescUID := payorderfeedbackMixinFields0[0].Descriptor()
	// payorderfeedback.DefaultUID holds the default value on creation for the uid field.
	payorderfeedback.DefaultUID = payorderfeedbackDescUID.Default.(func() string)
	// payorderfeedback.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	payorderfeedback.UIDValidator = func() func(string) error {
		validators := payorderfeedbackDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// payorderfeedbackDescCreatedAt is the schema descriptor for created_at field.
	payorderfeedbackDescCreatedAt := payorderfeedbackMixinFields0[1].Descriptor()
	// payorderfeedback.DefaultCreatedAt holds the default value on creation for the created_at field.
	payorderfeedback.DefaultCreatedAt = payorderfeedbackDescCreatedAt.Default.(func() time.Time)
	// payorderfeedbackDescUpdatedAt is the schema descriptor for updated_at field.
	payorderfeedbackDescUpdatedAt := payorderfeedbackMixinFields0[2].Descriptor()
	// payorderfeedback.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	payorderfeedback.DefaultUpdatedAt = payorderfeedbackDescUpdatedAt.Default.(func() time.Time)
	// payorderfeedback.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	payorderfeedback.UpdateDefaultUpdatedAt = payorderfeedbackDescUpdatedAt.UpdateDefault.(func() time.Time)
	personalfolderMixin := schema.PersonalFolder{}.Mixin()
	personalfolderMixinFields0 := personalfolderMixin[0].Fields()
	_ = personalfolderMixinFields0
	personalfolderFields := schema.PersonalFolder{}.Fields()
	_ = personalfolderFields
	// personalfolderDescUID is the schema descriptor for uid field.
	personalfolderDescUID := personalfolderMixinFields0[0].Descriptor()
	// personalfolder.DefaultUID holds the default value on creation for the uid field.
	personalfolder.DefaultUID = personalfolderDescUID.Default.(func() string)
	// personalfolder.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	personalfolder.UIDValidator = func() func(string) error {
		validators := personalfolderDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// personalfolderDescCreatedAt is the schema descriptor for created_at field.
	personalfolderDescCreatedAt := personalfolderMixinFields0[1].Descriptor()
	// personalfolder.DefaultCreatedAt holds the default value on creation for the created_at field.
	personalfolder.DefaultCreatedAt = personalfolderDescCreatedAt.Default.(func() time.Time)
	// personalfolderDescUpdatedAt is the schema descriptor for updated_at field.
	personalfolderDescUpdatedAt := personalfolderMixinFields0[2].Descriptor()
	// personalfolder.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	personalfolder.DefaultUpdatedAt = personalfolderDescUpdatedAt.Default.(func() time.Time)
	// personalfolder.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	personalfolder.UpdateDefaultUpdatedAt = personalfolderDescUpdatedAt.UpdateDefault.(func() time.Time)
	// personalfolderDescFolderNumber is the schema descriptor for folder_number field.
	personalfolderDescFolderNumber := personalfolderFields[3].Descriptor()
	// personalfolder.FolderNumberValidator is a validator for the "folder_number" field. It is called by the builders before save.
	personalfolder.FolderNumberValidator = func() func(string) error {
		validators := personalfolderDescFolderNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(folder_number string) error {
			for _, fn := range fns {
				if err := fn(folder_number); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// personalfolderDescHasOpen is the schema descriptor for has_open field.
	personalfolderDescHasOpen := personalfolderFields[4].Descriptor()
	// personalfolder.DefaultHasOpen holds the default value on creation for the has_open field.
	personalfolder.DefaultHasOpen = personalfolderDescHasOpen.Default.(bool)
	rechargeMixin := schema.Recharge{}.Mixin()
	rechargeMixinFields0 := rechargeMixin[0].Fields()
	_ = rechargeMixinFields0
	rechargeFields := schema.Recharge{}.Fields()
	_ = rechargeFields
	// rechargeDescUID is the schema descriptor for uid field.
	rechargeDescUID := rechargeMixinFields0[0].Descriptor()
	// recharge.DefaultUID holds the default value on creation for the uid field.
	recharge.DefaultUID = rechargeDescUID.Default.(func() string)
	// recharge.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	recharge.UIDValidator = func() func(string) error {
		validators := rechargeDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// rechargeDescCreatedAt is the schema descriptor for created_at field.
	rechargeDescCreatedAt := rechargeMixinFields0[1].Descriptor()
	// recharge.DefaultCreatedAt holds the default value on creation for the created_at field.
	recharge.DefaultCreatedAt = rechargeDescCreatedAt.Default.(func() time.Time)
	// rechargeDescUpdatedAt is the schema descriptor for updated_at field.
	rechargeDescUpdatedAt := rechargeMixinFields0[2].Descriptor()
	// recharge.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	recharge.DefaultUpdatedAt = rechargeDescUpdatedAt.Default.(func() time.Time)
	// recharge.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	recharge.UpdateDefaultUpdatedAt = rechargeDescUpdatedAt.UpdateDefault.(func() time.Time)
	// rechargeDescDefault is the schema descriptor for default field.
	rechargeDescDefault := rechargeFields[8].Descriptor()
	// recharge.DefaultDefault holds the default value on creation for the default field.
	recharge.DefaultDefault = rechargeDescDefault.Default.(bool)
	sharelinkMixin := schema.ShareLink{}.Mixin()
	sharelinkMixinFields0 := sharelinkMixin[0].Fields()
	_ = sharelinkMixinFields0
	sharelinkFields := schema.ShareLink{}.Fields()
	_ = sharelinkFields
	// sharelinkDescUID is the schema descriptor for uid field.
	sharelinkDescUID := sharelinkMixinFields0[0].Descriptor()
	// sharelink.DefaultUID holds the default value on creation for the uid field.
	sharelink.DefaultUID = sharelinkDescUID.Default.(func() string)
	// sharelink.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	sharelink.UIDValidator = func() func(string) error {
		validators := sharelinkDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// sharelinkDescCreatedAt is the schema descriptor for created_at field.
	sharelinkDescCreatedAt := sharelinkMixinFields0[1].Descriptor()
	// sharelink.DefaultCreatedAt holds the default value on creation for the created_at field.
	sharelink.DefaultCreatedAt = sharelinkDescCreatedAt.Default.(func() time.Time)
	// sharelinkDescUpdatedAt is the schema descriptor for updated_at field.
	sharelinkDescUpdatedAt := sharelinkMixinFields0[2].Descriptor()
	// sharelink.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	sharelink.DefaultUpdatedAt = sharelinkDescUpdatedAt.Default.(func() time.Time)
	// sharelink.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	sharelink.UpdateDefaultUpdatedAt = sharelinkDescUpdatedAt.UpdateDefault.(func() time.Time)
	// sharelinkDescFolderNumber is the schema descriptor for folder_number field.
	sharelinkDescFolderNumber := sharelinkFields[7].Descriptor()
	// sharelink.FolderNumberValidator is a validator for the "folder_number" field. It is called by the builders before save.
	sharelink.FolderNumberValidator = func() func(string) error {
		validators := sharelinkDescFolderNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(folder_number string) error {
			for _, fn := range fns {
				if err := fn(folder_number); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	stationMixin := schema.Station{}.Mixin()
	stationMixinFields0 := stationMixin[0].Fields()
	_ = stationMixinFields0
	stationFields := schema.Station{}.Fields()
	_ = stationFields
	// stationDescUID is the schema descriptor for uid field.
	stationDescUID := stationMixinFields0[0].Descriptor()
	// station.DefaultUID holds the default value on creation for the uid field.
	station.DefaultUID = stationDescUID.Default.(func() string)
	// station.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	station.UIDValidator = func() func(string) error {
		validators := stationDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// stationDescCreatedAt is the schema descriptor for created_at field.
	stationDescCreatedAt := stationMixinFields0[1].Descriptor()
	// station.DefaultCreatedAt holds the default value on creation for the created_at field.
	station.DefaultCreatedAt = stationDescCreatedAt.Default.(func() time.Time)
	// stationDescUpdatedAt is the schema descriptor for updated_at field.
	stationDescUpdatedAt := stationMixinFields0[2].Descriptor()
	// station.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	station.DefaultUpdatedAt = stationDescUpdatedAt.Default.(func() time.Time)
	// station.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	station.UpdateDefaultUpdatedAt = stationDescUpdatedAt.UpdateDefault.(func() time.Time)
	// stationDescPraise is the schema descriptor for praise field.
	stationDescPraise := stationFields[8].Descriptor()
	// station.DefaultPraise holds the default value on creation for the praise field.
	station.DefaultPraise = stationDescPraise.Default.(int)
	// stationDescStar is the schema descriptor for star field.
	stationDescStar := stationFields[9].Descriptor()
	// station.DefaultStar holds the default value on creation for the star field.
	station.DefaultStar = stationDescStar.Default.(int)
	// stationDescView is the schema descriptor for view field.
	stationDescView := stationFields[10].Descriptor()
	// station.DefaultView holds the default value on creation for the view field.
	station.DefaultView = stationDescView.Default.(int)
	// stationDescStatus is the schema descriptor for status field.
	stationDescStatus := stationFields[12].Descriptor()
	// station.DefaultStatus holds the default value on creation for the status field.
	station.DefaultStatus = stationDescStatus.Default.(bool)
	stationcategoryMixin := schema.StationCategory{}.Mixin()
	stationcategoryMixinFields0 := stationcategoryMixin[0].Fields()
	_ = stationcategoryMixinFields0
	stationcategoryFields := schema.StationCategory{}.Fields()
	_ = stationcategoryFields
	// stationcategoryDescUID is the schema descriptor for uid field.
	stationcategoryDescUID := stationcategoryMixinFields0[0].Descriptor()
	// stationcategory.DefaultUID holds the default value on creation for the uid field.
	stationcategory.DefaultUID = stationcategoryDescUID.Default.(func() string)
	// stationcategory.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	stationcategory.UIDValidator = func() func(string) error {
		validators := stationcategoryDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// stationcategoryDescCreatedAt is the schema descriptor for created_at field.
	stationcategoryDescCreatedAt := stationcategoryMixinFields0[1].Descriptor()
	// stationcategory.DefaultCreatedAt holds the default value on creation for the created_at field.
	stationcategory.DefaultCreatedAt = stationcategoryDescCreatedAt.Default.(func() time.Time)
	// stationcategoryDescUpdatedAt is the schema descriptor for updated_at field.
	stationcategoryDescUpdatedAt := stationcategoryMixinFields0[2].Descriptor()
	// stationcategory.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	stationcategory.DefaultUpdatedAt = stationcategoryDescUpdatedAt.Default.(func() time.Time)
	// stationcategory.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	stationcategory.UpdateDefaultUpdatedAt = stationcategoryDescUpdatedAt.UpdateDefault.(func() time.Time)
	// stationcategoryDescStatus is the schema descriptor for status field.
	stationcategoryDescStatus := stationcategoryFields[2].Descriptor()
	// stationcategory.DefaultStatus holds the default value on creation for the status field.
	stationcategory.DefaultStatus = stationcategoryDescStatus.Default.(bool)
	stationmetaMixin := schema.StationMeta{}.Mixin()
	stationmetaMixinFields0 := stationmetaMixin[0].Fields()
	_ = stationmetaMixinFields0
	stationmetaFields := schema.StationMeta{}.Fields()
	_ = stationmetaFields
	// stationmetaDescUID is the schema descriptor for uid field.
	stationmetaDescUID := stationmetaMixinFields0[0].Descriptor()
	// stationmeta.DefaultUID holds the default value on creation for the uid field.
	stationmeta.DefaultUID = stationmetaDescUID.Default.(func() string)
	// stationmeta.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	stationmeta.UIDValidator = func() func(string) error {
		validators := stationmetaDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// stationmetaDescCreatedAt is the schema descriptor for created_at field.
	stationmetaDescCreatedAt := stationmetaMixinFields0[1].Descriptor()
	// stationmeta.DefaultCreatedAt holds the default value on creation for the created_at field.
	stationmeta.DefaultCreatedAt = stationmetaDescCreatedAt.Default.(func() time.Time)
	// stationmetaDescUpdatedAt is the schema descriptor for updated_at field.
	stationmetaDescUpdatedAt := stationmetaMixinFields0[2].Descriptor()
	// stationmeta.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	stationmeta.DefaultUpdatedAt = stationmetaDescUpdatedAt.Default.(func() time.Time)
	// stationmeta.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	stationmeta.UpdateDefaultUpdatedAt = stationmetaDescUpdatedAt.UpdateDefault.(func() time.Time)
	// stationmetaDescHasPraise is the schema descriptor for has_praise field.
	stationmetaDescHasPraise := stationmetaFields[3].Descriptor()
	// stationmeta.DefaultHasPraise holds the default value on creation for the has_praise field.
	stationmeta.DefaultHasPraise = stationmetaDescHasPraise.Default.(bool)
	// stationmetaDescHasStar is the schema descriptor for has_star field.
	stationmetaDescHasStar := stationmetaFields[4].Descriptor()
	// stationmeta.DefaultHasStar holds the default value on creation for the has_star field.
	stationmeta.DefaultHasStar = stationmetaDescHasStar.Default.(bool)
	// stationmetaDescHasView is the schema descriptor for has_view field.
	stationmetaDescHasView := stationmetaFields[5].Descriptor()
	// stationmeta.DefaultHasView holds the default value on creation for the has_view field.
	stationmeta.DefaultHasView = stationmetaDescHasView.Default.(bool)
	teamMixin := schema.Team{}.Mixin()
	teamMixinFields0 := teamMixin[0].Fields()
	_ = teamMixinFields0
	teamFields := schema.Team{}.Fields()
	_ = teamFields
	// teamDescUID is the schema descriptor for uid field.
	teamDescUID := teamMixinFields0[0].Descriptor()
	// team.DefaultUID holds the default value on creation for the uid field.
	team.DefaultUID = teamDescUID.Default.(func() string)
	// team.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	team.UIDValidator = func() func(string) error {
		validators := teamDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// teamDescCreatedAt is the schema descriptor for created_at field.
	teamDescCreatedAt := teamMixinFields0[1].Descriptor()
	// team.DefaultCreatedAt holds the default value on creation for the created_at field.
	team.DefaultCreatedAt = teamDescCreatedAt.Default.(func() time.Time)
	// teamDescUpdatedAt is the schema descriptor for updated_at field.
	teamDescUpdatedAt := teamMixinFields0[2].Descriptor()
	// team.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	team.DefaultUpdatedAt = teamDescUpdatedAt.Default.(func() time.Time)
	// team.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	team.UpdateDefaultUpdatedAt = teamDescUpdatedAt.UpdateDefault.(func() time.Time)
	teamfolderMixin := schema.TeamFolder{}.Mixin()
	teamfolderMixinFields0 := teamfolderMixin[0].Fields()
	_ = teamfolderMixinFields0
	teamfolderFields := schema.TeamFolder{}.Fields()
	_ = teamfolderFields
	// teamfolderDescUID is the schema descriptor for uid field.
	teamfolderDescUID := teamfolderMixinFields0[0].Descriptor()
	// teamfolder.DefaultUID holds the default value on creation for the uid field.
	teamfolder.DefaultUID = teamfolderDescUID.Default.(func() string)
	// teamfolder.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	teamfolder.UIDValidator = func() func(string) error {
		validators := teamfolderDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// teamfolderDescCreatedAt is the schema descriptor for created_at field.
	teamfolderDescCreatedAt := teamfolderMixinFields0[1].Descriptor()
	// teamfolder.DefaultCreatedAt holds the default value on creation for the created_at field.
	teamfolder.DefaultCreatedAt = teamfolderDescCreatedAt.Default.(func() time.Time)
	// teamfolderDescUpdatedAt is the schema descriptor for updated_at field.
	teamfolderDescUpdatedAt := teamfolderMixinFields0[2].Descriptor()
	// teamfolder.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	teamfolder.DefaultUpdatedAt = teamfolderDescUpdatedAt.Default.(func() time.Time)
	// teamfolder.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	teamfolder.UpdateDefaultUpdatedAt = teamfolderDescUpdatedAt.UpdateDefault.(func() time.Time)
	teamgroupMixin := schema.TeamGroup{}.Mixin()
	teamgroupMixinFields0 := teamgroupMixin[0].Fields()
	_ = teamgroupMixinFields0
	teamgroupFields := schema.TeamGroup{}.Fields()
	_ = teamgroupFields
	// teamgroupDescUID is the schema descriptor for uid field.
	teamgroupDescUID := teamgroupMixinFields0[0].Descriptor()
	// teamgroup.DefaultUID holds the default value on creation for the uid field.
	teamgroup.DefaultUID = teamgroupDescUID.Default.(func() string)
	// teamgroup.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	teamgroup.UIDValidator = func() func(string) error {
		validators := teamgroupDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// teamgroupDescCreatedAt is the schema descriptor for created_at field.
	teamgroupDescCreatedAt := teamgroupMixinFields0[1].Descriptor()
	// teamgroup.DefaultCreatedAt holds the default value on creation for the created_at field.
	teamgroup.DefaultCreatedAt = teamgroupDescCreatedAt.Default.(func() time.Time)
	// teamgroupDescUpdatedAt is the schema descriptor for updated_at field.
	teamgroupDescUpdatedAt := teamgroupMixinFields0[2].Descriptor()
	// teamgroup.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	teamgroup.DefaultUpdatedAt = teamgroupDescUpdatedAt.Default.(func() time.Time)
	// teamgroup.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	teamgroup.UpdateDefaultUpdatedAt = teamgroupDescUpdatedAt.UpdateDefault.(func() time.Time)
	urlcrawlMixin := schema.UrlCrawl{}.Mixin()
	urlcrawlMixinFields0 := urlcrawlMixin[0].Fields()
	_ = urlcrawlMixinFields0
	urlcrawlFields := schema.UrlCrawl{}.Fields()
	_ = urlcrawlFields
	// urlcrawlDescUID is the schema descriptor for uid field.
	urlcrawlDescUID := urlcrawlMixinFields0[0].Descriptor()
	// urlcrawl.DefaultUID holds the default value on creation for the uid field.
	urlcrawl.DefaultUID = urlcrawlDescUID.Default.(func() string)
	// urlcrawl.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	urlcrawl.UIDValidator = func() func(string) error {
		validators := urlcrawlDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// urlcrawlDescCreatedAt is the schema descriptor for created_at field.
	urlcrawlDescCreatedAt := urlcrawlMixinFields0[1].Descriptor()
	// urlcrawl.DefaultCreatedAt holds the default value on creation for the created_at field.
	urlcrawl.DefaultCreatedAt = urlcrawlDescCreatedAt.Default.(func() time.Time)
	// urlcrawlDescUpdatedAt is the schema descriptor for updated_at field.
	urlcrawlDescUpdatedAt := urlcrawlMixinFields0[2].Descriptor()
	// urlcrawl.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	urlcrawl.DefaultUpdatedAt = urlcrawlDescUpdatedAt.Default.(func() time.Time)
	// urlcrawl.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	urlcrawl.UpdateDefaultUpdatedAt = urlcrawlDescUpdatedAt.UpdateDefault.(func() time.Time)
	// urlcrawlDescCount is the schema descriptor for count field.
	urlcrawlDescCount := urlcrawlFields[3].Descriptor()
	// urlcrawl.DefaultCount holds the default value on creation for the count field.
	urlcrawl.DefaultCount = urlcrawlDescCount.Default.(int)
	// urlcrawlDescHasComplete is the schema descriptor for has_complete field.
	urlcrawlDescHasComplete := urlcrawlFields[4].Descriptor()
	// urlcrawl.DefaultHasComplete holds the default value on creation for the has_complete field.
	urlcrawl.DefaultHasComplete = urlcrawlDescHasComplete.Default.(bool)
	weblinkMixin := schema.WebLink{}.Mixin()
	weblinkMixinFields0 := weblinkMixin[0].Fields()
	_ = weblinkMixinFields0
	weblinkFields := schema.WebLink{}.Fields()
	_ = weblinkFields
	// weblinkDescUID is the schema descriptor for uid field.
	weblinkDescUID := weblinkMixinFields0[0].Descriptor()
	// weblink.DefaultUID holds the default value on creation for the uid field.
	weblink.DefaultUID = weblinkDescUID.Default.(func() string)
	// weblink.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	weblink.UIDValidator = func() func(string) error {
		validators := weblinkDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// weblinkDescCreatedAt is the schema descriptor for created_at field.
	weblinkDescCreatedAt := weblinkMixinFields0[1].Descriptor()
	// weblink.DefaultCreatedAt holds the default value on creation for the created_at field.
	weblink.DefaultCreatedAt = weblinkDescCreatedAt.Default.(func() time.Time)
	// weblinkDescUpdatedAt is the schema descriptor for updated_at field.
	weblinkDescUpdatedAt := weblinkMixinFields0[2].Descriptor()
	// weblink.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	weblink.DefaultUpdatedAt = weblinkDescUpdatedAt.Default.(func() time.Time)
	// weblink.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	weblink.UpdateDefaultUpdatedAt = weblinkDescUpdatedAt.UpdateDefault.(func() time.Time)
	// weblinkDescDescription is the schema descriptor for description field.
	weblinkDescDescription := weblinkFields[4].Descriptor()
	// weblink.DefaultDescription holds the default value on creation for the description field.
	weblink.DefaultDescription = weblinkDescDescription.Default.(string)
	// weblinkDescFileType is the schema descriptor for file_type field.
	weblinkDescFileType := weblinkFields[5].Descriptor()
	// weblink.DefaultFileType holds the default value on creation for the file_type field.
	weblink.DefaultFileType = weblinkDescFileType.Default.(string)
	// weblinkDescSequence is the schema descriptor for sequence field.
	weblinkDescSequence := weblinkFields[6].Descriptor()
	// weblink.DefaultSequence holds the default value on creation for the sequence field.
	weblink.DefaultSequence = weblinkDescSequence.Default.(int)
	// weblinkDescForeverDelete is the schema descriptor for forever_delete field.
	weblinkDescForeverDelete := weblinkFields[7].Descriptor()
	// weblink.DefaultForeverDelete holds the default value on creation for the forever_delete field.
	weblink.DefaultForeverDelete = weblinkDescForeverDelete.Default.(bool)
	workspaceMixin := schema.Workspace{}.Mixin()
	workspaceMixinFields0 := workspaceMixin[0].Fields()
	_ = workspaceMixinFields0
	workspaceFields := schema.Workspace{}.Fields()
	_ = workspaceFields
	// workspaceDescUID is the schema descriptor for uid field.
	workspaceDescUID := workspaceMixinFields0[0].Descriptor()
	// workspace.DefaultUID holds the default value on creation for the uid field.
	workspace.DefaultUID = workspaceDescUID.Default.(func() string)
	// workspace.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	workspace.UIDValidator = func() func(string) error {
		validators := workspaceDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// workspaceDescCreatedAt is the schema descriptor for created_at field.
	workspaceDescCreatedAt := workspaceMixinFields0[1].Descriptor()
	// workspace.DefaultCreatedAt holds the default value on creation for the created_at field.
	workspace.DefaultCreatedAt = workspaceDescCreatedAt.Default.(func() time.Time)
	// workspaceDescUpdatedAt is the schema descriptor for updated_at field.
	workspaceDescUpdatedAt := workspaceMixinFields0[2].Descriptor()
	// workspace.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	workspace.DefaultUpdatedAt = workspaceDescUpdatedAt.Default.(func() time.Time)
	// workspace.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	workspace.UpdateDefaultUpdatedAt = workspaceDescUpdatedAt.UpdateDefault.(func() time.Time)
	// workspaceDescType is the schema descriptor for type field.
	workspaceDescType := workspaceFields[2].Descriptor()
	// workspace.DefaultType holds the default value on creation for the type field.
	workspace.DefaultType = workspaceDescType.Default.(int)
	// workspaceDescIsOpen is the schema descriptor for is_open field.
	workspaceDescIsOpen := workspaceFields[6].Descriptor()
	// workspace.DefaultIsOpen holds the default value on creation for the is_open field.
	workspace.DefaultIsOpen = workspaceDescIsOpen.Default.(bool)
}
