// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/recharge"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RechargeCreate is the builder for creating a Recharge entity.
type RechargeCreate struct {
	config
	mutation *RechargeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (rc *RechargeCreate) SetUID(s string) *RechargeCreate {
	rc.mutation.SetUID(s)
	return rc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (rc *RechargeCreate) SetNillableUID(s *string) *RechargeCreate {
	if s != nil {
		rc.SetUID(*s)
	}
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *RechargeCreate) SetCreatedAt(t time.Time) *RechargeCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RechargeCreate) SetNillableCreatedAt(t *time.Time) *RechargeCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RechargeCreate) SetUpdatedAt(t time.Time) *RechargeCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RechargeCreate) SetNillableUpdatedAt(t *time.Time) *RechargeCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (rc *RechargeCreate) SetDeactivatedAt(t time.Time) *RechargeCreate {
	rc.mutation.SetDeactivatedAt(t)
	return rc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (rc *RechargeCreate) SetNillableDeactivatedAt(t *time.Time) *RechargeCreate {
	if t != nil {
		rc.SetDeactivatedAt(*t)
	}
	return rc
}

// SetTitle sets the "title" field.
func (rc *RechargeCreate) SetTitle(s string) *RechargeCreate {
	rc.mutation.SetTitle(s)
	return rc
}

// SetOriginAmount sets the "origin_amount" field.
func (rc *RechargeCreate) SetOriginAmount(s string) *RechargeCreate {
	rc.mutation.SetOriginAmount(s)
	return rc
}

// SetAmount sets the "amount" field.
func (rc *RechargeCreate) SetAmount(s string) *RechargeCreate {
	rc.mutation.SetAmount(s)
	return rc
}

// SetDescriptions sets the "descriptions" field.
func (rc *RechargeCreate) SetDescriptions(s []string) *RechargeCreate {
	rc.mutation.SetDescriptions(s)
	return rc
}

// SetThemeColor sets the "theme_color" field.
func (rc *RechargeCreate) SetThemeColor(s string) *RechargeCreate {
	rc.mutation.SetThemeColor(s)
	return rc
}

// SetNillableThemeColor sets the "theme_color" field if the given value is not nil.
func (rc *RechargeCreate) SetNillableThemeColor(s *string) *RechargeCreate {
	if s != nil {
		rc.SetThemeColor(*s)
	}
	return rc
}

// SetYear sets the "year" field.
func (rc *RechargeCreate) SetYear(i int) *RechargeCreate {
	rc.mutation.SetYear(i)
	return rc
}

// SetMonth sets the "month" field.
func (rc *RechargeCreate) SetMonth(i int) *RechargeCreate {
	rc.mutation.SetMonth(i)
	return rc
}

// SetDefault sets the "default" field.
func (rc *RechargeCreate) SetDefault(b bool) *RechargeCreate {
	rc.mutation.SetDefault(b)
	return rc
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (rc *RechargeCreate) SetNillableDefault(b *bool) *RechargeCreate {
	if b != nil {
		rc.SetDefault(*b)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RechargeCreate) SetID(u uint64) *RechargeCreate {
	rc.mutation.SetID(u)
	return rc
}

// Mutation returns the RechargeMutation object of the builder.
func (rc *RechargeCreate) Mutation() *RechargeMutation {
	return rc.mutation
}

// Save creates the Recharge in the database.
func (rc *RechargeCreate) Save(ctx context.Context) (*Recharge, error) {
	var (
		err  error
		node *Recharge
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RechargeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RechargeCreate) SaveX(ctx context.Context) *Recharge {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RechargeCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RechargeCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RechargeCreate) defaults() {
	if _, ok := rc.mutation.UID(); !ok {
		v := recharge.DefaultUID()
		rc.mutation.SetUID(v)
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := recharge.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := recharge.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.Default(); !ok {
		v := recharge.DefaultDefault
		rc.mutation.SetDefault(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RechargeCreate) check() error {
	if _, ok := rc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "Recharge.uid"`)}
	}
	if v, ok := rc.mutation.UID(); ok {
		if err := recharge.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "Recharge.uid": %w`, err)}
		}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "Recharge.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "Recharge.updated_at"`)}
	}
	if _, ok := rc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`entschema: missing required field "Recharge.title"`)}
	}
	if _, ok := rc.mutation.OriginAmount(); !ok {
		return &ValidationError{Name: "origin_amount", err: errors.New(`entschema: missing required field "Recharge.origin_amount"`)}
	}
	if _, ok := rc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`entschema: missing required field "Recharge.amount"`)}
	}
	if _, ok := rc.mutation.Descriptions(); !ok {
		return &ValidationError{Name: "descriptions", err: errors.New(`entschema: missing required field "Recharge.descriptions"`)}
	}
	if _, ok := rc.mutation.Year(); !ok {
		return &ValidationError{Name: "year", err: errors.New(`entschema: missing required field "Recharge.year"`)}
	}
	if _, ok := rc.mutation.Month(); !ok {
		return &ValidationError{Name: "month", err: errors.New(`entschema: missing required field "Recharge.month"`)}
	}
	if _, ok := rc.mutation.Default(); !ok {
		return &ValidationError{Name: "default", err: errors.New(`entschema: missing required field "Recharge.default"`)}
	}
	return nil
}

func (rc *RechargeCreate) sqlSave(ctx context.Context) (*Recharge, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (rc *RechargeCreate) createSpec() (*Recharge, *sqlgraph.CreateSpec) {
	var (
		_node = &Recharge{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: recharge.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: recharge.FieldID,
			},
		}
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recharge.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recharge.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recharge.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recharge.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := rc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recharge.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := rc.mutation.OriginAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recharge.FieldOriginAmount,
		})
		_node.OriginAmount = value
	}
	if value, ok := rc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recharge.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := rc.mutation.Descriptions(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: recharge.FieldDescriptions,
		})
		_node.Descriptions = value
	}
	if value, ok := rc.mutation.ThemeColor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recharge.FieldThemeColor,
		})
		_node.ThemeColor = value
	}
	if value, ok := rc.mutation.Year(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recharge.FieldYear,
		})
		_node.Year = value
	}
	if value, ok := rc.mutation.Month(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recharge.FieldMonth,
		})
		_node.Month = value
	}
	if value, ok := rc.mutation.Default(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: recharge.FieldDefault,
		})
		_node.Default = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Recharge.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RechargeUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (rc *RechargeCreate) OnConflict(opts ...sql.ConflictOption) *RechargeUpsertOne {
	rc.conflict = opts
	return &RechargeUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Recharge.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rc *RechargeCreate) OnConflictColumns(columns ...string) *RechargeUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RechargeUpsertOne{
		create: rc,
	}
}

type (
	// RechargeUpsertOne is the builder for "upsert"-ing
	//  one Recharge node.
	RechargeUpsertOne struct {
		create *RechargeCreate
	}

	// RechargeUpsert is the "OnConflict" setter.
	RechargeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *RechargeUpsert) SetUID(v string) *RechargeUpsert {
	u.Set(recharge.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *RechargeUpsert) UpdateUID() *RechargeUpsert {
	u.SetExcluded(recharge.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RechargeUpsert) SetCreatedAt(v time.Time) *RechargeUpsert {
	u.Set(recharge.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RechargeUpsert) UpdateCreatedAt() *RechargeUpsert {
	u.SetExcluded(recharge.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RechargeUpsert) SetUpdatedAt(v time.Time) *RechargeUpsert {
	u.Set(recharge.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RechargeUpsert) UpdateUpdatedAt() *RechargeUpsert {
	u.SetExcluded(recharge.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *RechargeUpsert) SetDeactivatedAt(v time.Time) *RechargeUpsert {
	u.Set(recharge.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *RechargeUpsert) UpdateDeactivatedAt() *RechargeUpsert {
	u.SetExcluded(recharge.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *RechargeUpsert) ClearDeactivatedAt() *RechargeUpsert {
	u.SetNull(recharge.FieldDeactivatedAt)
	return u
}

// SetTitle sets the "title" field.
func (u *RechargeUpsert) SetTitle(v string) *RechargeUpsert {
	u.Set(recharge.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *RechargeUpsert) UpdateTitle() *RechargeUpsert {
	u.SetExcluded(recharge.FieldTitle)
	return u
}

// SetOriginAmount sets the "origin_amount" field.
func (u *RechargeUpsert) SetOriginAmount(v string) *RechargeUpsert {
	u.Set(recharge.FieldOriginAmount, v)
	return u
}

// UpdateOriginAmount sets the "origin_amount" field to the value that was provided on create.
func (u *RechargeUpsert) UpdateOriginAmount() *RechargeUpsert {
	u.SetExcluded(recharge.FieldOriginAmount)
	return u
}

// SetAmount sets the "amount" field.
func (u *RechargeUpsert) SetAmount(v string) *RechargeUpsert {
	u.Set(recharge.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *RechargeUpsert) UpdateAmount() *RechargeUpsert {
	u.SetExcluded(recharge.FieldAmount)
	return u
}

// SetDescriptions sets the "descriptions" field.
func (u *RechargeUpsert) SetDescriptions(v []string) *RechargeUpsert {
	u.Set(recharge.FieldDescriptions, v)
	return u
}

// UpdateDescriptions sets the "descriptions" field to the value that was provided on create.
func (u *RechargeUpsert) UpdateDescriptions() *RechargeUpsert {
	u.SetExcluded(recharge.FieldDescriptions)
	return u
}

// SetThemeColor sets the "theme_color" field.
func (u *RechargeUpsert) SetThemeColor(v string) *RechargeUpsert {
	u.Set(recharge.FieldThemeColor, v)
	return u
}

// UpdateThemeColor sets the "theme_color" field to the value that was provided on create.
func (u *RechargeUpsert) UpdateThemeColor() *RechargeUpsert {
	u.SetExcluded(recharge.FieldThemeColor)
	return u
}

// ClearThemeColor clears the value of the "theme_color" field.
func (u *RechargeUpsert) ClearThemeColor() *RechargeUpsert {
	u.SetNull(recharge.FieldThemeColor)
	return u
}

// SetYear sets the "year" field.
func (u *RechargeUpsert) SetYear(v int) *RechargeUpsert {
	u.Set(recharge.FieldYear, v)
	return u
}

// UpdateYear sets the "year" field to the value that was provided on create.
func (u *RechargeUpsert) UpdateYear() *RechargeUpsert {
	u.SetExcluded(recharge.FieldYear)
	return u
}

// AddYear adds v to the "year" field.
func (u *RechargeUpsert) AddYear(v int) *RechargeUpsert {
	u.Add(recharge.FieldYear, v)
	return u
}

// SetMonth sets the "month" field.
func (u *RechargeUpsert) SetMonth(v int) *RechargeUpsert {
	u.Set(recharge.FieldMonth, v)
	return u
}

// UpdateMonth sets the "month" field to the value that was provided on create.
func (u *RechargeUpsert) UpdateMonth() *RechargeUpsert {
	u.SetExcluded(recharge.FieldMonth)
	return u
}

// AddMonth adds v to the "month" field.
func (u *RechargeUpsert) AddMonth(v int) *RechargeUpsert {
	u.Add(recharge.FieldMonth, v)
	return u
}

// SetDefault sets the "default" field.
func (u *RechargeUpsert) SetDefault(v bool) *RechargeUpsert {
	u.Set(recharge.FieldDefault, v)
	return u
}

// UpdateDefault sets the "default" field to the value that was provided on create.
func (u *RechargeUpsert) UpdateDefault() *RechargeUpsert {
	u.SetExcluded(recharge.FieldDefault)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Recharge.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(recharge.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *RechargeUpsertOne) UpdateNewValues() *RechargeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(recharge.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(recharge.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(recharge.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Recharge.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *RechargeUpsertOne) Ignore() *RechargeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RechargeUpsertOne) DoNothing() *RechargeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RechargeCreate.OnConflict
// documentation for more info.
func (u *RechargeUpsertOne) Update(set func(*RechargeUpsert)) *RechargeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RechargeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *RechargeUpsertOne) SetUID(v string) *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *RechargeUpsertOne) UpdateUID() *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *RechargeUpsertOne) SetCreatedAt(v time.Time) *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RechargeUpsertOne) UpdateCreatedAt() *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RechargeUpsertOne) SetUpdatedAt(v time.Time) *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RechargeUpsertOne) UpdateUpdatedAt() *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *RechargeUpsertOne) SetDeactivatedAt(v time.Time) *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *RechargeUpsertOne) UpdateDeactivatedAt() *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *RechargeUpsertOne) ClearDeactivatedAt() *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetTitle sets the "title" field.
func (u *RechargeUpsertOne) SetTitle(v string) *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *RechargeUpsertOne) UpdateTitle() *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateTitle()
	})
}

// SetOriginAmount sets the "origin_amount" field.
func (u *RechargeUpsertOne) SetOriginAmount(v string) *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.SetOriginAmount(v)
	})
}

// UpdateOriginAmount sets the "origin_amount" field to the value that was provided on create.
func (u *RechargeUpsertOne) UpdateOriginAmount() *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateOriginAmount()
	})
}

// SetAmount sets the "amount" field.
func (u *RechargeUpsertOne) SetAmount(v string) *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *RechargeUpsertOne) UpdateAmount() *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateAmount()
	})
}

// SetDescriptions sets the "descriptions" field.
func (u *RechargeUpsertOne) SetDescriptions(v []string) *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.SetDescriptions(v)
	})
}

// UpdateDescriptions sets the "descriptions" field to the value that was provided on create.
func (u *RechargeUpsertOne) UpdateDescriptions() *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateDescriptions()
	})
}

// SetThemeColor sets the "theme_color" field.
func (u *RechargeUpsertOne) SetThemeColor(v string) *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.SetThemeColor(v)
	})
}

// UpdateThemeColor sets the "theme_color" field to the value that was provided on create.
func (u *RechargeUpsertOne) UpdateThemeColor() *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateThemeColor()
	})
}

// ClearThemeColor clears the value of the "theme_color" field.
func (u *RechargeUpsertOne) ClearThemeColor() *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.ClearThemeColor()
	})
}

// SetYear sets the "year" field.
func (u *RechargeUpsertOne) SetYear(v int) *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.SetYear(v)
	})
}

// AddYear adds v to the "year" field.
func (u *RechargeUpsertOne) AddYear(v int) *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.AddYear(v)
	})
}

// UpdateYear sets the "year" field to the value that was provided on create.
func (u *RechargeUpsertOne) UpdateYear() *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateYear()
	})
}

// SetMonth sets the "month" field.
func (u *RechargeUpsertOne) SetMonth(v int) *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.SetMonth(v)
	})
}

// AddMonth adds v to the "month" field.
func (u *RechargeUpsertOne) AddMonth(v int) *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.AddMonth(v)
	})
}

// UpdateMonth sets the "month" field to the value that was provided on create.
func (u *RechargeUpsertOne) UpdateMonth() *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateMonth()
	})
}

// SetDefault sets the "default" field.
func (u *RechargeUpsertOne) SetDefault(v bool) *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.SetDefault(v)
	})
}

// UpdateDefault sets the "default" field to the value that was provided on create.
func (u *RechargeUpsertOne) UpdateDefault() *RechargeUpsertOne {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateDefault()
	})
}

// Exec executes the query.
func (u *RechargeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for RechargeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RechargeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RechargeUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RechargeUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RechargeCreateBulk is the builder for creating many Recharge entities in bulk.
type RechargeCreateBulk struct {
	config
	builders []*RechargeCreate
	conflict []sql.ConflictOption
}

// Save creates the Recharge entities in the database.
func (rcb *RechargeCreateBulk) Save(ctx context.Context) ([]*Recharge, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Recharge, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RechargeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RechargeCreateBulk) SaveX(ctx context.Context) []*Recharge {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RechargeCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RechargeCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Recharge.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RechargeUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (rcb *RechargeCreateBulk) OnConflict(opts ...sql.ConflictOption) *RechargeUpsertBulk {
	rcb.conflict = opts
	return &RechargeUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Recharge.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rcb *RechargeCreateBulk) OnConflictColumns(columns ...string) *RechargeUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RechargeUpsertBulk{
		create: rcb,
	}
}

// RechargeUpsertBulk is the builder for "upsert"-ing
// a bulk of Recharge nodes.
type RechargeUpsertBulk struct {
	create *RechargeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Recharge.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(recharge.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *RechargeUpsertBulk) UpdateNewValues() *RechargeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(recharge.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(recharge.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(recharge.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Recharge.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *RechargeUpsertBulk) Ignore() *RechargeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RechargeUpsertBulk) DoNothing() *RechargeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RechargeCreateBulk.OnConflict
// documentation for more info.
func (u *RechargeUpsertBulk) Update(set func(*RechargeUpsert)) *RechargeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RechargeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *RechargeUpsertBulk) SetUID(v string) *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *RechargeUpsertBulk) UpdateUID() *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *RechargeUpsertBulk) SetCreatedAt(v time.Time) *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RechargeUpsertBulk) UpdateCreatedAt() *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RechargeUpsertBulk) SetUpdatedAt(v time.Time) *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RechargeUpsertBulk) UpdateUpdatedAt() *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *RechargeUpsertBulk) SetDeactivatedAt(v time.Time) *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *RechargeUpsertBulk) UpdateDeactivatedAt() *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *RechargeUpsertBulk) ClearDeactivatedAt() *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetTitle sets the "title" field.
func (u *RechargeUpsertBulk) SetTitle(v string) *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *RechargeUpsertBulk) UpdateTitle() *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateTitle()
	})
}

// SetOriginAmount sets the "origin_amount" field.
func (u *RechargeUpsertBulk) SetOriginAmount(v string) *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.SetOriginAmount(v)
	})
}

// UpdateOriginAmount sets the "origin_amount" field to the value that was provided on create.
func (u *RechargeUpsertBulk) UpdateOriginAmount() *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateOriginAmount()
	})
}

// SetAmount sets the "amount" field.
func (u *RechargeUpsertBulk) SetAmount(v string) *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.SetAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *RechargeUpsertBulk) UpdateAmount() *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateAmount()
	})
}

// SetDescriptions sets the "descriptions" field.
func (u *RechargeUpsertBulk) SetDescriptions(v []string) *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.SetDescriptions(v)
	})
}

// UpdateDescriptions sets the "descriptions" field to the value that was provided on create.
func (u *RechargeUpsertBulk) UpdateDescriptions() *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateDescriptions()
	})
}

// SetThemeColor sets the "theme_color" field.
func (u *RechargeUpsertBulk) SetThemeColor(v string) *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.SetThemeColor(v)
	})
}

// UpdateThemeColor sets the "theme_color" field to the value that was provided on create.
func (u *RechargeUpsertBulk) UpdateThemeColor() *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateThemeColor()
	})
}

// ClearThemeColor clears the value of the "theme_color" field.
func (u *RechargeUpsertBulk) ClearThemeColor() *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.ClearThemeColor()
	})
}

// SetYear sets the "year" field.
func (u *RechargeUpsertBulk) SetYear(v int) *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.SetYear(v)
	})
}

// AddYear adds v to the "year" field.
func (u *RechargeUpsertBulk) AddYear(v int) *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.AddYear(v)
	})
}

// UpdateYear sets the "year" field to the value that was provided on create.
func (u *RechargeUpsertBulk) UpdateYear() *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateYear()
	})
}

// SetMonth sets the "month" field.
func (u *RechargeUpsertBulk) SetMonth(v int) *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.SetMonth(v)
	})
}

// AddMonth adds v to the "month" field.
func (u *RechargeUpsertBulk) AddMonth(v int) *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.AddMonth(v)
	})
}

// UpdateMonth sets the "month" field to the value that was provided on create.
func (u *RechargeUpsertBulk) UpdateMonth() *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateMonth()
	})
}

// SetDefault sets the "default" field.
func (u *RechargeUpsertBulk) SetDefault(v bool) *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.SetDefault(v)
	})
}

// UpdateDefault sets the "default" field to the value that was provided on create.
func (u *RechargeUpsertBulk) UpdateDefault() *RechargeUpsertBulk {
	return u.Update(func(s *RechargeUpsert) {
		s.UpdateDefault()
	})
}

// Exec executes the query.
func (u *RechargeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the RechargeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for RechargeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RechargeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
