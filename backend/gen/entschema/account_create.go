// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/account"
	"tabelf/backend/spec/schema"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountCreate is the builder for creating a Account entity.
type AccountCreate struct {
	config
	mutation *AccountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (ac *AccountCreate) SetUID(s string) *AccountCreate {
	ac.mutation.SetUID(s)
	return ac
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (ac *AccountCreate) SetNillableUID(s *string) *AccountCreate {
	if s != nil {
		ac.SetUID(*s)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AccountCreate) SetCreatedAt(t time.Time) *AccountCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableCreatedAt(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AccountCreate) SetUpdatedAt(t time.Time) *AccountCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableUpdatedAt(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (ac *AccountCreate) SetDeactivatedAt(t time.Time) *AccountCreate {
	ac.mutation.SetDeactivatedAt(t)
	return ac
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableDeactivatedAt(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetDeactivatedAt(*t)
	}
	return ac
}

// SetPhone sets the "phone" field.
func (ac *AccountCreate) SetPhone(s string) *AccountCreate {
	ac.mutation.SetPhone(s)
	return ac
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (ac *AccountCreate) SetNillablePhone(s *string) *AccountCreate {
	if s != nil {
		ac.SetPhone(*s)
	}
	return ac
}

// SetEmail sets the "email" field.
func (ac *AccountCreate) SetEmail(s string) *AccountCreate {
	ac.mutation.SetEmail(s)
	return ac
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ac *AccountCreate) SetNillableEmail(s *string) *AccountCreate {
	if s != nil {
		ac.SetEmail(*s)
	}
	return ac
}

// SetNickname sets the "nickname" field.
func (ac *AccountCreate) SetNickname(s string) *AccountCreate {
	ac.mutation.SetNickname(s)
	return ac
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (ac *AccountCreate) SetNillableNickname(s *string) *AccountCreate {
	if s != nil {
		ac.SetNickname(*s)
	}
	return ac
}

// SetSex sets the "sex" field.
func (ac *AccountCreate) SetSex(i int) *AccountCreate {
	ac.mutation.SetSex(i)
	return ac
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (ac *AccountCreate) SetNillableSex(i *int) *AccountCreate {
	if i != nil {
		ac.SetSex(*i)
	}
	return ac
}

// SetPassword sets the "password" field.
func (ac *AccountCreate) SetPassword(s string) *AccountCreate {
	ac.mutation.SetPassword(s)
	return ac
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (ac *AccountCreate) SetNillablePassword(s *string) *AccountCreate {
	if s != nil {
		ac.SetPassword(*s)
	}
	return ac
}

// SetWxOpenid sets the "wx_openid" field.
func (ac *AccountCreate) SetWxOpenid(s string) *AccountCreate {
	ac.mutation.SetWxOpenid(s)
	return ac
}

// SetNillableWxOpenid sets the "wx_openid" field if the given value is not nil.
func (ac *AccountCreate) SetNillableWxOpenid(s *string) *AccountCreate {
	if s != nil {
		ac.SetWxOpenid(*s)
	}
	return ac
}

// SetImage sets the "image" field.
func (ac *AccountCreate) SetImage(s string) *AccountCreate {
	ac.mutation.SetImage(s)
	return ac
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (ac *AccountCreate) SetNillableImage(s *string) *AccountCreate {
	if s != nil {
		ac.SetImage(*s)
	}
	return ac
}

// SetIndustry sets the "industry" field.
func (ac *AccountCreate) SetIndustry(s string) *AccountCreate {
	ac.mutation.SetIndustry(s)
	return ac
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (ac *AccountCreate) SetNillableIndustry(s *string) *AccountCreate {
	if s != nil {
		ac.SetIndustry(*s)
	}
	return ac
}

// SetDescription sets the "description" field.
func (ac *AccountCreate) SetDescription(s string) *AccountCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ac *AccountCreate) SetNillableDescription(s *string) *AccountCreate {
	if s != nil {
		ac.SetDescription(*s)
	}
	return ac
}

// SetAddress sets the "address" field.
func (ac *AccountCreate) SetAddress(s schema.Address) *AccountCreate {
	ac.mutation.SetAddress(s)
	return ac
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ac *AccountCreate) SetNillableAddress(s *schema.Address) *AccountCreate {
	if s != nil {
		ac.SetAddress(*s)
	}
	return ac
}

// SetAuthCode sets the "auth_code" field.
func (ac *AccountCreate) SetAuthCode(s string) *AccountCreate {
	ac.mutation.SetAuthCode(s)
	return ac
}

// SetAuthExpired sets the "auth_expired" field.
func (ac *AccountCreate) SetAuthExpired(t time.Time) *AccountCreate {
	ac.mutation.SetAuthExpired(t)
	return ac
}

// SetURLCount sets the "url_count" field.
func (ac *AccountCreate) SetURLCount(i int) *AccountCreate {
	ac.mutation.SetURLCount(i)
	return ac
}

// SetNillableURLCount sets the "url_count" field if the given value is not nil.
func (ac *AccountCreate) SetNillableURLCount(i *int) *AccountCreate {
	if i != nil {
		ac.SetURLCount(*i)
	}
	return ac
}

// SetURLLimit sets the "url_limit" field.
func (ac *AccountCreate) SetURLLimit(i int) *AccountCreate {
	ac.mutation.SetURLLimit(i)
	return ac
}

// SetNillableURLLimit sets the "url_limit" field if the given value is not nil.
func (ac *AccountCreate) SetNillableURLLimit(i *int) *AccountCreate {
	if i != nil {
		ac.SetURLLimit(*i)
	}
	return ac
}

// SetMemberType sets the "member_type" field.
func (ac *AccountCreate) SetMemberType(s string) *AccountCreate {
	ac.mutation.SetMemberType(s)
	return ac
}

// SetNillableMemberType sets the "member_type" field if the given value is not nil.
func (ac *AccountCreate) SetNillableMemberType(s *string) *AccountCreate {
	if s != nil {
		ac.SetMemberType(*s)
	}
	return ac
}

// SetMemberExpired sets the "member_expired" field.
func (ac *AccountCreate) SetMemberExpired(t time.Time) *AccountCreate {
	ac.mutation.SetMemberExpired(t)
	return ac
}

// SetNillableMemberExpired sets the "member_expired" field if the given value is not nil.
func (ac *AccountCreate) SetNillableMemberExpired(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetMemberExpired(*t)
	}
	return ac
}

// SetHasEntire sets the "has_entire" field.
func (ac *AccountCreate) SetHasEntire(b bool) *AccountCreate {
	ac.mutation.SetHasEntire(b)
	return ac
}

// SetNillableHasEntire sets the "has_entire" field if the given value is not nil.
func (ac *AccountCreate) SetNillableHasEntire(b *bool) *AccountCreate {
	if b != nil {
		ac.SetHasEntire(*b)
	}
	return ac
}

// SetHasNew sets the "has_new" field.
func (ac *AccountCreate) SetHasNew(b bool) *AccountCreate {
	ac.mutation.SetHasNew(b)
	return ac
}

// SetNillableHasNew sets the "has_new" field if the given value is not nil.
func (ac *AccountCreate) SetNillableHasNew(b *bool) *AccountCreate {
	if b != nil {
		ac.SetHasNew(*b)
	}
	return ac
}

// SetHasAdmin sets the "has_admin" field.
func (ac *AccountCreate) SetHasAdmin(b bool) *AccountCreate {
	ac.mutation.SetHasAdmin(b)
	return ac
}

// SetNillableHasAdmin sets the "has_admin" field if the given value is not nil.
func (ac *AccountCreate) SetNillableHasAdmin(b *bool) *AccountCreate {
	if b != nil {
		ac.SetHasAdmin(*b)
	}
	return ac
}

// SetFans sets the "fans" field.
func (ac *AccountCreate) SetFans(i int) *AccountCreate {
	ac.mutation.SetFans(i)
	return ac
}

// SetNillableFans sets the "fans" field if the given value is not nil.
func (ac *AccountCreate) SetNillableFans(i *int) *AccountCreate {
	if i != nil {
		ac.SetFans(*i)
	}
	return ac
}

// SetFocus sets the "focus" field.
func (ac *AccountCreate) SetFocus(i int) *AccountCreate {
	ac.mutation.SetFocus(i)
	return ac
}

// SetNillableFocus sets the "focus" field if the given value is not nil.
func (ac *AccountCreate) SetNillableFocus(i *int) *AccountCreate {
	if i != nil {
		ac.SetFocus(*i)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AccountCreate) SetID(u uint64) *AccountCreate {
	ac.mutation.SetID(u)
	return ac
}

// Mutation returns the AccountMutation object of the builder.
func (ac *AccountCreate) Mutation() *AccountMutation {
	return ac.mutation
}

// Save creates the Account in the database.
func (ac *AccountCreate) Save(ctx context.Context) (*Account, error) {
	var (
		err  error
		node *Account
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccountCreate) SaveX(ctx context.Context) *Account {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AccountCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AccountCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AccountCreate) defaults() {
	if _, ok := ac.mutation.UID(); !ok {
		v := account.DefaultUID()
		ac.mutation.SetUID(v)
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := account.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := account.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Sex(); !ok {
		v := account.DefaultSex
		ac.mutation.SetSex(v)
	}
	if _, ok := ac.mutation.URLCount(); !ok {
		v := account.DefaultURLCount
		ac.mutation.SetURLCount(v)
	}
	if _, ok := ac.mutation.URLLimit(); !ok {
		v := account.DefaultURLLimit
		ac.mutation.SetURLLimit(v)
	}
	if _, ok := ac.mutation.MemberType(); !ok {
		v := account.DefaultMemberType
		ac.mutation.SetMemberType(v)
	}
	if _, ok := ac.mutation.HasEntire(); !ok {
		v := account.DefaultHasEntire
		ac.mutation.SetHasEntire(v)
	}
	if _, ok := ac.mutation.HasNew(); !ok {
		v := account.DefaultHasNew
		ac.mutation.SetHasNew(v)
	}
	if _, ok := ac.mutation.HasAdmin(); !ok {
		v := account.DefaultHasAdmin
		ac.mutation.SetHasAdmin(v)
	}
	if _, ok := ac.mutation.Fans(); !ok {
		v := account.DefaultFans
		ac.mutation.SetFans(v)
	}
	if _, ok := ac.mutation.Focus(); !ok {
		v := account.DefaultFocus
		ac.mutation.SetFocus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccountCreate) check() error {
	if _, ok := ac.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "Account.uid"`)}
	}
	if v, ok := ac.mutation.UID(); ok {
		if err := account.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "Account.uid": %w`, err)}
		}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "Account.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "Account.updated_at"`)}
	}
	if _, ok := ac.mutation.Sex(); !ok {
		return &ValidationError{Name: "sex", err: errors.New(`entschema: missing required field "Account.sex"`)}
	}
	if _, ok := ac.mutation.AuthCode(); !ok {
		return &ValidationError{Name: "auth_code", err: errors.New(`entschema: missing required field "Account.auth_code"`)}
	}
	if _, ok := ac.mutation.AuthExpired(); !ok {
		return &ValidationError{Name: "auth_expired", err: errors.New(`entschema: missing required field "Account.auth_expired"`)}
	}
	if _, ok := ac.mutation.URLCount(); !ok {
		return &ValidationError{Name: "url_count", err: errors.New(`entschema: missing required field "Account.url_count"`)}
	}
	if _, ok := ac.mutation.URLLimit(); !ok {
		return &ValidationError{Name: "url_limit", err: errors.New(`entschema: missing required field "Account.url_limit"`)}
	}
	if _, ok := ac.mutation.MemberType(); !ok {
		return &ValidationError{Name: "member_type", err: errors.New(`entschema: missing required field "Account.member_type"`)}
	}
	if _, ok := ac.mutation.HasEntire(); !ok {
		return &ValidationError{Name: "has_entire", err: errors.New(`entschema: missing required field "Account.has_entire"`)}
	}
	if _, ok := ac.mutation.HasNew(); !ok {
		return &ValidationError{Name: "has_new", err: errors.New(`entschema: missing required field "Account.has_new"`)}
	}
	if _, ok := ac.mutation.HasAdmin(); !ok {
		return &ValidationError{Name: "has_admin", err: errors.New(`entschema: missing required field "Account.has_admin"`)}
	}
	if _, ok := ac.mutation.Fans(); !ok {
		return &ValidationError{Name: "fans", err: errors.New(`entschema: missing required field "Account.fans"`)}
	}
	if _, ok := ac.mutation.Focus(); !ok {
		return &ValidationError{Name: "focus", err: errors.New(`entschema: missing required field "Account.focus"`)}
	}
	return nil
}

func (ac *AccountCreate) sqlSave(ctx context.Context) (*Account, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (ac *AccountCreate) createSpec() (*Account, *sqlgraph.CreateSpec) {
	var (
		_node = &Account{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: account.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: account.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := ac.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := ac.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := ac.mutation.Nickname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldNickname,
		})
		_node.Nickname = value
	}
	if value, ok := ac.mutation.Sex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldSex,
		})
		_node.Sex = value
	}
	if value, ok := ac.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := ac.mutation.WxOpenid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldWxOpenid,
		})
		_node.WxOpenid = value
	}
	if value, ok := ac.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := ac.mutation.Industry(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldIndustry,
		})
		_node.Industry = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := ac.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: account.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := ac.mutation.AuthCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldAuthCode,
		})
		_node.AuthCode = value
	}
	if value, ok := ac.mutation.AuthExpired(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldAuthExpired,
		})
		_node.AuthExpired = value
	}
	if value, ok := ac.mutation.URLCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldURLCount,
		})
		_node.URLCount = value
	}
	if value, ok := ac.mutation.URLLimit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldURLLimit,
		})
		_node.URLLimit = value
	}
	if value, ok := ac.mutation.MemberType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldMemberType,
		})
		_node.MemberType = value
	}
	if value, ok := ac.mutation.MemberExpired(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: account.FieldMemberExpired,
		})
		_node.MemberExpired = value
	}
	if value, ok := ac.mutation.HasEntire(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: account.FieldHasEntire,
		})
		_node.HasEntire = value
	}
	if value, ok := ac.mutation.HasNew(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: account.FieldHasNew,
		})
		_node.HasNew = value
	}
	if value, ok := ac.mutation.HasAdmin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: account.FieldHasAdmin,
		})
		_node.HasAdmin = value
	}
	if value, ok := ac.mutation.Fans(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldFans,
		})
		_node.Fans = value
	}
	if value, ok := ac.mutation.Focus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: account.FieldFocus,
		})
		_node.Focus = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Account.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (ac *AccountCreate) OnConflict(opts ...sql.ConflictOption) *AccountUpsertOne {
	ac.conflict = opts
	return &AccountUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ac *AccountCreate) OnConflictColumns(columns ...string) *AccountUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AccountUpsertOne{
		create: ac,
	}
}

type (
	// AccountUpsertOne is the builder for "upsert"-ing
	//  one Account node.
	AccountUpsertOne struct {
		create *AccountCreate
	}

	// AccountUpsert is the "OnConflict" setter.
	AccountUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *AccountUpsert) SetUID(v string) *AccountUpsert {
	u.Set(account.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *AccountUpsert) UpdateUID() *AccountUpsert {
	u.SetExcluded(account.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AccountUpsert) SetCreatedAt(v time.Time) *AccountUpsert {
	u.Set(account.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AccountUpsert) UpdateCreatedAt() *AccountUpsert {
	u.SetExcluded(account.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AccountUpsert) SetUpdatedAt(v time.Time) *AccountUpsert {
	u.Set(account.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AccountUpsert) UpdateUpdatedAt() *AccountUpsert {
	u.SetExcluded(account.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *AccountUpsert) SetDeactivatedAt(v time.Time) *AccountUpsert {
	u.Set(account.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *AccountUpsert) UpdateDeactivatedAt() *AccountUpsert {
	u.SetExcluded(account.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *AccountUpsert) ClearDeactivatedAt() *AccountUpsert {
	u.SetNull(account.FieldDeactivatedAt)
	return u
}

// SetPhone sets the "phone" field.
func (u *AccountUpsert) SetPhone(v string) *AccountUpsert {
	u.Set(account.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *AccountUpsert) UpdatePhone() *AccountUpsert {
	u.SetExcluded(account.FieldPhone)
	return u
}

// ClearPhone clears the value of the "phone" field.
func (u *AccountUpsert) ClearPhone() *AccountUpsert {
	u.SetNull(account.FieldPhone)
	return u
}

// SetEmail sets the "email" field.
func (u *AccountUpsert) SetEmail(v string) *AccountUpsert {
	u.Set(account.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AccountUpsert) UpdateEmail() *AccountUpsert {
	u.SetExcluded(account.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *AccountUpsert) ClearEmail() *AccountUpsert {
	u.SetNull(account.FieldEmail)
	return u
}

// SetNickname sets the "nickname" field.
func (u *AccountUpsert) SetNickname(v string) *AccountUpsert {
	u.Set(account.FieldNickname, v)
	return u
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *AccountUpsert) UpdateNickname() *AccountUpsert {
	u.SetExcluded(account.FieldNickname)
	return u
}

// ClearNickname clears the value of the "nickname" field.
func (u *AccountUpsert) ClearNickname() *AccountUpsert {
	u.SetNull(account.FieldNickname)
	return u
}

// SetSex sets the "sex" field.
func (u *AccountUpsert) SetSex(v int) *AccountUpsert {
	u.Set(account.FieldSex, v)
	return u
}

// UpdateSex sets the "sex" field to the value that was provided on create.
func (u *AccountUpsert) UpdateSex() *AccountUpsert {
	u.SetExcluded(account.FieldSex)
	return u
}

// AddSex adds v to the "sex" field.
func (u *AccountUpsert) AddSex(v int) *AccountUpsert {
	u.Add(account.FieldSex, v)
	return u
}

// SetPassword sets the "password" field.
func (u *AccountUpsert) SetPassword(v string) *AccountUpsert {
	u.Set(account.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *AccountUpsert) UpdatePassword() *AccountUpsert {
	u.SetExcluded(account.FieldPassword)
	return u
}

// ClearPassword clears the value of the "password" field.
func (u *AccountUpsert) ClearPassword() *AccountUpsert {
	u.SetNull(account.FieldPassword)
	return u
}

// SetWxOpenid sets the "wx_openid" field.
func (u *AccountUpsert) SetWxOpenid(v string) *AccountUpsert {
	u.Set(account.FieldWxOpenid, v)
	return u
}

// UpdateWxOpenid sets the "wx_openid" field to the value that was provided on create.
func (u *AccountUpsert) UpdateWxOpenid() *AccountUpsert {
	u.SetExcluded(account.FieldWxOpenid)
	return u
}

// ClearWxOpenid clears the value of the "wx_openid" field.
func (u *AccountUpsert) ClearWxOpenid() *AccountUpsert {
	u.SetNull(account.FieldWxOpenid)
	return u
}

// SetImage sets the "image" field.
func (u *AccountUpsert) SetImage(v string) *AccountUpsert {
	u.Set(account.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *AccountUpsert) UpdateImage() *AccountUpsert {
	u.SetExcluded(account.FieldImage)
	return u
}

// ClearImage clears the value of the "image" field.
func (u *AccountUpsert) ClearImage() *AccountUpsert {
	u.SetNull(account.FieldImage)
	return u
}

// SetIndustry sets the "industry" field.
func (u *AccountUpsert) SetIndustry(v string) *AccountUpsert {
	u.Set(account.FieldIndustry, v)
	return u
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *AccountUpsert) UpdateIndustry() *AccountUpsert {
	u.SetExcluded(account.FieldIndustry)
	return u
}

// ClearIndustry clears the value of the "industry" field.
func (u *AccountUpsert) ClearIndustry() *AccountUpsert {
	u.SetNull(account.FieldIndustry)
	return u
}

// SetDescription sets the "description" field.
func (u *AccountUpsert) SetDescription(v string) *AccountUpsert {
	u.Set(account.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AccountUpsert) UpdateDescription() *AccountUpsert {
	u.SetExcluded(account.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *AccountUpsert) ClearDescription() *AccountUpsert {
	u.SetNull(account.FieldDescription)
	return u
}

// SetAddress sets the "address" field.
func (u *AccountUpsert) SetAddress(v schema.Address) *AccountUpsert {
	u.Set(account.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AccountUpsert) UpdateAddress() *AccountUpsert {
	u.SetExcluded(account.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *AccountUpsert) ClearAddress() *AccountUpsert {
	u.SetNull(account.FieldAddress)
	return u
}

// SetAuthCode sets the "auth_code" field.
func (u *AccountUpsert) SetAuthCode(v string) *AccountUpsert {
	u.Set(account.FieldAuthCode, v)
	return u
}

// UpdateAuthCode sets the "auth_code" field to the value that was provided on create.
func (u *AccountUpsert) UpdateAuthCode() *AccountUpsert {
	u.SetExcluded(account.FieldAuthCode)
	return u
}

// SetAuthExpired sets the "auth_expired" field.
func (u *AccountUpsert) SetAuthExpired(v time.Time) *AccountUpsert {
	u.Set(account.FieldAuthExpired, v)
	return u
}

// UpdateAuthExpired sets the "auth_expired" field to the value that was provided on create.
func (u *AccountUpsert) UpdateAuthExpired() *AccountUpsert {
	u.SetExcluded(account.FieldAuthExpired)
	return u
}

// SetURLCount sets the "url_count" field.
func (u *AccountUpsert) SetURLCount(v int) *AccountUpsert {
	u.Set(account.FieldURLCount, v)
	return u
}

// UpdateURLCount sets the "url_count" field to the value that was provided on create.
func (u *AccountUpsert) UpdateURLCount() *AccountUpsert {
	u.SetExcluded(account.FieldURLCount)
	return u
}

// AddURLCount adds v to the "url_count" field.
func (u *AccountUpsert) AddURLCount(v int) *AccountUpsert {
	u.Add(account.FieldURLCount, v)
	return u
}

// SetURLLimit sets the "url_limit" field.
func (u *AccountUpsert) SetURLLimit(v int) *AccountUpsert {
	u.Set(account.FieldURLLimit, v)
	return u
}

// UpdateURLLimit sets the "url_limit" field to the value that was provided on create.
func (u *AccountUpsert) UpdateURLLimit() *AccountUpsert {
	u.SetExcluded(account.FieldURLLimit)
	return u
}

// AddURLLimit adds v to the "url_limit" field.
func (u *AccountUpsert) AddURLLimit(v int) *AccountUpsert {
	u.Add(account.FieldURLLimit, v)
	return u
}

// SetMemberType sets the "member_type" field.
func (u *AccountUpsert) SetMemberType(v string) *AccountUpsert {
	u.Set(account.FieldMemberType, v)
	return u
}

// UpdateMemberType sets the "member_type" field to the value that was provided on create.
func (u *AccountUpsert) UpdateMemberType() *AccountUpsert {
	u.SetExcluded(account.FieldMemberType)
	return u
}

// SetMemberExpired sets the "member_expired" field.
func (u *AccountUpsert) SetMemberExpired(v time.Time) *AccountUpsert {
	u.Set(account.FieldMemberExpired, v)
	return u
}

// UpdateMemberExpired sets the "member_expired" field to the value that was provided on create.
func (u *AccountUpsert) UpdateMemberExpired() *AccountUpsert {
	u.SetExcluded(account.FieldMemberExpired)
	return u
}

// ClearMemberExpired clears the value of the "member_expired" field.
func (u *AccountUpsert) ClearMemberExpired() *AccountUpsert {
	u.SetNull(account.FieldMemberExpired)
	return u
}

// SetHasEntire sets the "has_entire" field.
func (u *AccountUpsert) SetHasEntire(v bool) *AccountUpsert {
	u.Set(account.FieldHasEntire, v)
	return u
}

// UpdateHasEntire sets the "has_entire" field to the value that was provided on create.
func (u *AccountUpsert) UpdateHasEntire() *AccountUpsert {
	u.SetExcluded(account.FieldHasEntire)
	return u
}

// SetHasNew sets the "has_new" field.
func (u *AccountUpsert) SetHasNew(v bool) *AccountUpsert {
	u.Set(account.FieldHasNew, v)
	return u
}

// UpdateHasNew sets the "has_new" field to the value that was provided on create.
func (u *AccountUpsert) UpdateHasNew() *AccountUpsert {
	u.SetExcluded(account.FieldHasNew)
	return u
}

// SetHasAdmin sets the "has_admin" field.
func (u *AccountUpsert) SetHasAdmin(v bool) *AccountUpsert {
	u.Set(account.FieldHasAdmin, v)
	return u
}

// UpdateHasAdmin sets the "has_admin" field to the value that was provided on create.
func (u *AccountUpsert) UpdateHasAdmin() *AccountUpsert {
	u.SetExcluded(account.FieldHasAdmin)
	return u
}

// SetFans sets the "fans" field.
func (u *AccountUpsert) SetFans(v int) *AccountUpsert {
	u.Set(account.FieldFans, v)
	return u
}

// UpdateFans sets the "fans" field to the value that was provided on create.
func (u *AccountUpsert) UpdateFans() *AccountUpsert {
	u.SetExcluded(account.FieldFans)
	return u
}

// AddFans adds v to the "fans" field.
func (u *AccountUpsert) AddFans(v int) *AccountUpsert {
	u.Add(account.FieldFans, v)
	return u
}

// SetFocus sets the "focus" field.
func (u *AccountUpsert) SetFocus(v int) *AccountUpsert {
	u.Set(account.FieldFocus, v)
	return u
}

// UpdateFocus sets the "focus" field to the value that was provided on create.
func (u *AccountUpsert) UpdateFocus() *AccountUpsert {
	u.SetExcluded(account.FieldFocus)
	return u
}

// AddFocus adds v to the "focus" field.
func (u *AccountUpsert) AddFocus(v int) *AccountUpsert {
	u.Add(account.FieldFocus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(account.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AccountUpsertOne) UpdateNewValues() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(account.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(account.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(account.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Account.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AccountUpsertOne) Ignore() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountUpsertOne) DoNothing() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountCreate.OnConflict
// documentation for more info.
func (u *AccountUpsertOne) Update(set func(*AccountUpsert)) *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *AccountUpsertOne) SetUID(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateUID() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AccountUpsertOne) SetCreatedAt(v time.Time) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateCreatedAt() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AccountUpsertOne) SetUpdatedAt(v time.Time) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateUpdatedAt() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *AccountUpsertOne) SetDeactivatedAt(v time.Time) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateDeactivatedAt() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *AccountUpsertOne) ClearDeactivatedAt() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetPhone sets the "phone" field.
func (u *AccountUpsertOne) SetPhone(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdatePhone() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *AccountUpsertOne) ClearPhone() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearPhone()
	})
}

// SetEmail sets the "email" field.
func (u *AccountUpsertOne) SetEmail(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateEmail() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *AccountUpsertOne) ClearEmail() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearEmail()
	})
}

// SetNickname sets the "nickname" field.
func (u *AccountUpsertOne) SetNickname(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateNickname() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateNickname()
	})
}

// ClearNickname clears the value of the "nickname" field.
func (u *AccountUpsertOne) ClearNickname() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearNickname()
	})
}

// SetSex sets the "sex" field.
func (u *AccountUpsertOne) SetSex(v int) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetSex(v)
	})
}

// AddSex adds v to the "sex" field.
func (u *AccountUpsertOne) AddSex(v int) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.AddSex(v)
	})
}

// UpdateSex sets the "sex" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateSex() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateSex()
	})
}

// SetPassword sets the "password" field.
func (u *AccountUpsertOne) SetPassword(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdatePassword() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *AccountUpsertOne) ClearPassword() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearPassword()
	})
}

// SetWxOpenid sets the "wx_openid" field.
func (u *AccountUpsertOne) SetWxOpenid(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetWxOpenid(v)
	})
}

// UpdateWxOpenid sets the "wx_openid" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateWxOpenid() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateWxOpenid()
	})
}

// ClearWxOpenid clears the value of the "wx_openid" field.
func (u *AccountUpsertOne) ClearWxOpenid() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearWxOpenid()
	})
}

// SetImage sets the "image" field.
func (u *AccountUpsertOne) SetImage(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateImage() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateImage()
	})
}

// ClearImage clears the value of the "image" field.
func (u *AccountUpsertOne) ClearImage() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearImage()
	})
}

// SetIndustry sets the "industry" field.
func (u *AccountUpsertOne) SetIndustry(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetIndustry(v)
	})
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateIndustry() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateIndustry()
	})
}

// ClearIndustry clears the value of the "industry" field.
func (u *AccountUpsertOne) ClearIndustry() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearIndustry()
	})
}

// SetDescription sets the "description" field.
func (u *AccountUpsertOne) SetDescription(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateDescription() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AccountUpsertOne) ClearDescription() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearDescription()
	})
}

// SetAddress sets the "address" field.
func (u *AccountUpsertOne) SetAddress(v schema.Address) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateAddress() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *AccountUpsertOne) ClearAddress() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearAddress()
	})
}

// SetAuthCode sets the "auth_code" field.
func (u *AccountUpsertOne) SetAuthCode(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetAuthCode(v)
	})
}

// UpdateAuthCode sets the "auth_code" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateAuthCode() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateAuthCode()
	})
}

// SetAuthExpired sets the "auth_expired" field.
func (u *AccountUpsertOne) SetAuthExpired(v time.Time) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetAuthExpired(v)
	})
}

// UpdateAuthExpired sets the "auth_expired" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateAuthExpired() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateAuthExpired()
	})
}

// SetURLCount sets the "url_count" field.
func (u *AccountUpsertOne) SetURLCount(v int) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetURLCount(v)
	})
}

// AddURLCount adds v to the "url_count" field.
func (u *AccountUpsertOne) AddURLCount(v int) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.AddURLCount(v)
	})
}

// UpdateURLCount sets the "url_count" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateURLCount() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateURLCount()
	})
}

// SetURLLimit sets the "url_limit" field.
func (u *AccountUpsertOne) SetURLLimit(v int) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetURLLimit(v)
	})
}

// AddURLLimit adds v to the "url_limit" field.
func (u *AccountUpsertOne) AddURLLimit(v int) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.AddURLLimit(v)
	})
}

// UpdateURLLimit sets the "url_limit" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateURLLimit() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateURLLimit()
	})
}

// SetMemberType sets the "member_type" field.
func (u *AccountUpsertOne) SetMemberType(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetMemberType(v)
	})
}

// UpdateMemberType sets the "member_type" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateMemberType() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateMemberType()
	})
}

// SetMemberExpired sets the "member_expired" field.
func (u *AccountUpsertOne) SetMemberExpired(v time.Time) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetMemberExpired(v)
	})
}

// UpdateMemberExpired sets the "member_expired" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateMemberExpired() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateMemberExpired()
	})
}

// ClearMemberExpired clears the value of the "member_expired" field.
func (u *AccountUpsertOne) ClearMemberExpired() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearMemberExpired()
	})
}

// SetHasEntire sets the "has_entire" field.
func (u *AccountUpsertOne) SetHasEntire(v bool) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetHasEntire(v)
	})
}

// UpdateHasEntire sets the "has_entire" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateHasEntire() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateHasEntire()
	})
}

// SetHasNew sets the "has_new" field.
func (u *AccountUpsertOne) SetHasNew(v bool) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetHasNew(v)
	})
}

// UpdateHasNew sets the "has_new" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateHasNew() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateHasNew()
	})
}

// SetHasAdmin sets the "has_admin" field.
func (u *AccountUpsertOne) SetHasAdmin(v bool) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetHasAdmin(v)
	})
}

// UpdateHasAdmin sets the "has_admin" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateHasAdmin() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateHasAdmin()
	})
}

// SetFans sets the "fans" field.
func (u *AccountUpsertOne) SetFans(v int) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetFans(v)
	})
}

// AddFans adds v to the "fans" field.
func (u *AccountUpsertOne) AddFans(v int) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.AddFans(v)
	})
}

// UpdateFans sets the "fans" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateFans() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateFans()
	})
}

// SetFocus sets the "focus" field.
func (u *AccountUpsertOne) SetFocus(v int) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetFocus(v)
	})
}

// AddFocus adds v to the "focus" field.
func (u *AccountUpsertOne) AddFocus(v int) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.AddFocus(v)
	})
}

// UpdateFocus sets the "focus" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateFocus() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateFocus()
	})
}

// Exec executes the query.
func (u *AccountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for AccountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AccountUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AccountUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AccountCreateBulk is the builder for creating many Account entities in bulk.
type AccountCreateBulk struct {
	config
	builders []*AccountCreate
	conflict []sql.ConflictOption
}

// Save creates the Account entities in the database.
func (acb *AccountCreateBulk) Save(ctx context.Context) ([]*Account, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Account, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccountCreateBulk) SaveX(ctx context.Context) []*Account {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AccountCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AccountCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Account.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (acb *AccountCreateBulk) OnConflict(opts ...sql.ConflictOption) *AccountUpsertBulk {
	acb.conflict = opts
	return &AccountUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acb *AccountCreateBulk) OnConflictColumns(columns ...string) *AccountUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AccountUpsertBulk{
		create: acb,
	}
}

// AccountUpsertBulk is the builder for "upsert"-ing
// a bulk of Account nodes.
type AccountUpsertBulk struct {
	create *AccountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(account.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AccountUpsertBulk) UpdateNewValues() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(account.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(account.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(account.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AccountUpsertBulk) Ignore() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountUpsertBulk) DoNothing() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountCreateBulk.OnConflict
// documentation for more info.
func (u *AccountUpsertBulk) Update(set func(*AccountUpsert)) *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *AccountUpsertBulk) SetUID(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateUID() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AccountUpsertBulk) SetCreatedAt(v time.Time) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateCreatedAt() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AccountUpsertBulk) SetUpdatedAt(v time.Time) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateUpdatedAt() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *AccountUpsertBulk) SetDeactivatedAt(v time.Time) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateDeactivatedAt() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *AccountUpsertBulk) ClearDeactivatedAt() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetPhone sets the "phone" field.
func (u *AccountUpsertBulk) SetPhone(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdatePhone() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *AccountUpsertBulk) ClearPhone() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearPhone()
	})
}

// SetEmail sets the "email" field.
func (u *AccountUpsertBulk) SetEmail(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateEmail() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *AccountUpsertBulk) ClearEmail() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearEmail()
	})
}

// SetNickname sets the "nickname" field.
func (u *AccountUpsertBulk) SetNickname(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateNickname() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateNickname()
	})
}

// ClearNickname clears the value of the "nickname" field.
func (u *AccountUpsertBulk) ClearNickname() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearNickname()
	})
}

// SetSex sets the "sex" field.
func (u *AccountUpsertBulk) SetSex(v int) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetSex(v)
	})
}

// AddSex adds v to the "sex" field.
func (u *AccountUpsertBulk) AddSex(v int) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.AddSex(v)
	})
}

// UpdateSex sets the "sex" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateSex() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateSex()
	})
}

// SetPassword sets the "password" field.
func (u *AccountUpsertBulk) SetPassword(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdatePassword() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *AccountUpsertBulk) ClearPassword() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearPassword()
	})
}

// SetWxOpenid sets the "wx_openid" field.
func (u *AccountUpsertBulk) SetWxOpenid(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetWxOpenid(v)
	})
}

// UpdateWxOpenid sets the "wx_openid" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateWxOpenid() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateWxOpenid()
	})
}

// ClearWxOpenid clears the value of the "wx_openid" field.
func (u *AccountUpsertBulk) ClearWxOpenid() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearWxOpenid()
	})
}

// SetImage sets the "image" field.
func (u *AccountUpsertBulk) SetImage(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateImage() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateImage()
	})
}

// ClearImage clears the value of the "image" field.
func (u *AccountUpsertBulk) ClearImage() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearImage()
	})
}

// SetIndustry sets the "industry" field.
func (u *AccountUpsertBulk) SetIndustry(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetIndustry(v)
	})
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateIndustry() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateIndustry()
	})
}

// ClearIndustry clears the value of the "industry" field.
func (u *AccountUpsertBulk) ClearIndustry() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearIndustry()
	})
}

// SetDescription sets the "description" field.
func (u *AccountUpsertBulk) SetDescription(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateDescription() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AccountUpsertBulk) ClearDescription() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearDescription()
	})
}

// SetAddress sets the "address" field.
func (u *AccountUpsertBulk) SetAddress(v schema.Address) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateAddress() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *AccountUpsertBulk) ClearAddress() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearAddress()
	})
}

// SetAuthCode sets the "auth_code" field.
func (u *AccountUpsertBulk) SetAuthCode(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetAuthCode(v)
	})
}

// UpdateAuthCode sets the "auth_code" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateAuthCode() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateAuthCode()
	})
}

// SetAuthExpired sets the "auth_expired" field.
func (u *AccountUpsertBulk) SetAuthExpired(v time.Time) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetAuthExpired(v)
	})
}

// UpdateAuthExpired sets the "auth_expired" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateAuthExpired() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateAuthExpired()
	})
}

// SetURLCount sets the "url_count" field.
func (u *AccountUpsertBulk) SetURLCount(v int) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetURLCount(v)
	})
}

// AddURLCount adds v to the "url_count" field.
func (u *AccountUpsertBulk) AddURLCount(v int) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.AddURLCount(v)
	})
}

// UpdateURLCount sets the "url_count" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateURLCount() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateURLCount()
	})
}

// SetURLLimit sets the "url_limit" field.
func (u *AccountUpsertBulk) SetURLLimit(v int) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetURLLimit(v)
	})
}

// AddURLLimit adds v to the "url_limit" field.
func (u *AccountUpsertBulk) AddURLLimit(v int) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.AddURLLimit(v)
	})
}

// UpdateURLLimit sets the "url_limit" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateURLLimit() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateURLLimit()
	})
}

// SetMemberType sets the "member_type" field.
func (u *AccountUpsertBulk) SetMemberType(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetMemberType(v)
	})
}

// UpdateMemberType sets the "member_type" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateMemberType() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateMemberType()
	})
}

// SetMemberExpired sets the "member_expired" field.
func (u *AccountUpsertBulk) SetMemberExpired(v time.Time) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetMemberExpired(v)
	})
}

// UpdateMemberExpired sets the "member_expired" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateMemberExpired() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateMemberExpired()
	})
}

// ClearMemberExpired clears the value of the "member_expired" field.
func (u *AccountUpsertBulk) ClearMemberExpired() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearMemberExpired()
	})
}

// SetHasEntire sets the "has_entire" field.
func (u *AccountUpsertBulk) SetHasEntire(v bool) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetHasEntire(v)
	})
}

// UpdateHasEntire sets the "has_entire" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateHasEntire() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateHasEntire()
	})
}

// SetHasNew sets the "has_new" field.
func (u *AccountUpsertBulk) SetHasNew(v bool) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetHasNew(v)
	})
}

// UpdateHasNew sets the "has_new" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateHasNew() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateHasNew()
	})
}

// SetHasAdmin sets the "has_admin" field.
func (u *AccountUpsertBulk) SetHasAdmin(v bool) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetHasAdmin(v)
	})
}

// UpdateHasAdmin sets the "has_admin" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateHasAdmin() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateHasAdmin()
	})
}

// SetFans sets the "fans" field.
func (u *AccountUpsertBulk) SetFans(v int) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetFans(v)
	})
}

// AddFans adds v to the "fans" field.
func (u *AccountUpsertBulk) AddFans(v int) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.AddFans(v)
	})
}

// UpdateFans sets the "fans" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateFans() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateFans()
	})
}

// SetFocus sets the "focus" field.
func (u *AccountUpsertBulk) SetFocus(v int) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetFocus(v)
	})
}

// AddFocus adds v to the "focus" field.
func (u *AccountUpsertBulk) AddFocus(v int) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.AddFocus(v)
	})
}

// UpdateFocus sets the "focus" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateFocus() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateFocus()
	})
}

// Exec executes the query.
func (u *AccountUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the AccountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for AccountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
