// Code generated by entc, DO NOT EDIT.

package weblink

import (
	"tabelf/backend/gen/entschema/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeactivatedAt applies equality check predicate on the "deactivated_at" field. It's identical to DeactivatedAtEQ.
func DeactivatedAt(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeactivatedAt), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImage), v))
	})
}

// Link applies equality check predicate on the "link" field. It's identical to LinkEQ.
func Link(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLink), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// FileType applies equality check predicate on the "file_type" field. It's identical to FileTypeEQ.
func FileType(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileType), v))
	})
}

// Sequence applies equality check predicate on the "sequence" field. It's identical to SequenceEQ.
func Sequence(v int) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSequence), v))
	})
}

// ForeverDelete applies equality check predicate on the "forever_delete" field. It's identical to ForeverDeleteEQ.
func ForeverDelete(v bool) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldForeverDelete), v))
	})
}

// UserUID applies equality check predicate on the "user_uid" field. It's identical to UserUIDEQ.
func UserUID(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserUID), v))
	})
}

// WorkspaceUID applies equality check predicate on the "workspace_uid" field. It's identical to WorkspaceUIDEQ.
func WorkspaceUID(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkspaceUID), v))
	})
}

// FolderUID applies equality check predicate on the "folder_uid" field. It's identical to FolderUIDEQ.
func FolderUID(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFolderUID), v))
	})
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUID), v))
	})
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUID), v...))
	})
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUID), v...))
	})
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUID), v))
	})
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUID), v))
	})
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUID), v))
	})
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUID), v))
	})
}

// UIDContains applies the Contains predicate on the "uid" field.
func UIDContains(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUID), v))
	})
}

// UIDHasPrefix applies the HasPrefix predicate on the "uid" field.
func UIDHasPrefix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUID), v))
	})
}

// UIDHasSuffix applies the HasSuffix predicate on the "uid" field.
func UIDHasSuffix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUID), v))
	})
}

// UIDEqualFold applies the EqualFold predicate on the "uid" field.
func UIDEqualFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUID), v))
	})
}

// UIDContainsFold applies the ContainsFold predicate on the "uid" field.
func UIDContainsFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeactivatedAtEQ applies the EQ predicate on the "deactivated_at" field.
func DeactivatedAtEQ(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtNEQ applies the NEQ predicate on the "deactivated_at" field.
func DeactivatedAtNEQ(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtIn applies the In predicate on the "deactivated_at" field.
func DeactivatedAtIn(vs ...time.Time) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeactivatedAt), v...))
	})
}

// DeactivatedAtNotIn applies the NotIn predicate on the "deactivated_at" field.
func DeactivatedAtNotIn(vs ...time.Time) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeactivatedAt), v...))
	})
}

// DeactivatedAtGT applies the GT predicate on the "deactivated_at" field.
func DeactivatedAtGT(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtGTE applies the GTE predicate on the "deactivated_at" field.
func DeactivatedAtGTE(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtLT applies the LT predicate on the "deactivated_at" field.
func DeactivatedAtLT(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtLTE applies the LTE predicate on the "deactivated_at" field.
func DeactivatedAtLTE(v time.Time) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtIsNil applies the IsNil predicate on the "deactivated_at" field.
func DeactivatedAtIsNil() predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeactivatedAt)))
	})
}

// DeactivatedAtNotNil applies the NotNil predicate on the "deactivated_at" field.
func DeactivatedAtNotNil() predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeactivatedAt)))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImage), v))
	})
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImage), v))
	})
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImage), v...))
	})
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImage), v...))
	})
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImage), v))
	})
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImage), v))
	})
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImage), v))
	})
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImage), v))
	})
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImage), v))
	})
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImage), v))
	})
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImage), v))
	})
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImage), v))
	})
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImage), v))
	})
}

// LinkEQ applies the EQ predicate on the "link" field.
func LinkEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLink), v))
	})
}

// LinkNEQ applies the NEQ predicate on the "link" field.
func LinkNEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLink), v))
	})
}

// LinkIn applies the In predicate on the "link" field.
func LinkIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLink), v...))
	})
}

// LinkNotIn applies the NotIn predicate on the "link" field.
func LinkNotIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLink), v...))
	})
}

// LinkGT applies the GT predicate on the "link" field.
func LinkGT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLink), v))
	})
}

// LinkGTE applies the GTE predicate on the "link" field.
func LinkGTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLink), v))
	})
}

// LinkLT applies the LT predicate on the "link" field.
func LinkLT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLink), v))
	})
}

// LinkLTE applies the LTE predicate on the "link" field.
func LinkLTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLink), v))
	})
}

// LinkContains applies the Contains predicate on the "link" field.
func LinkContains(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLink), v))
	})
}

// LinkHasPrefix applies the HasPrefix predicate on the "link" field.
func LinkHasPrefix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLink), v))
	})
}

// LinkHasSuffix applies the HasSuffix predicate on the "link" field.
func LinkHasSuffix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLink), v))
	})
}

// LinkEqualFold applies the EqualFold predicate on the "link" field.
func LinkEqualFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLink), v))
	})
}

// LinkContainsFold applies the ContainsFold predicate on the "link" field.
func LinkContainsFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLink), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// FileTypeEQ applies the EQ predicate on the "file_type" field.
func FileTypeEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileType), v))
	})
}

// FileTypeNEQ applies the NEQ predicate on the "file_type" field.
func FileTypeNEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileType), v))
	})
}

// FileTypeIn applies the In predicate on the "file_type" field.
func FileTypeIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFileType), v...))
	})
}

// FileTypeNotIn applies the NotIn predicate on the "file_type" field.
func FileTypeNotIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFileType), v...))
	})
}

// FileTypeGT applies the GT predicate on the "file_type" field.
func FileTypeGT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileType), v))
	})
}

// FileTypeGTE applies the GTE predicate on the "file_type" field.
func FileTypeGTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileType), v))
	})
}

// FileTypeLT applies the LT predicate on the "file_type" field.
func FileTypeLT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileType), v))
	})
}

// FileTypeLTE applies the LTE predicate on the "file_type" field.
func FileTypeLTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileType), v))
	})
}

// FileTypeContains applies the Contains predicate on the "file_type" field.
func FileTypeContains(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFileType), v))
	})
}

// FileTypeHasPrefix applies the HasPrefix predicate on the "file_type" field.
func FileTypeHasPrefix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFileType), v))
	})
}

// FileTypeHasSuffix applies the HasSuffix predicate on the "file_type" field.
func FileTypeHasSuffix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFileType), v))
	})
}

// FileTypeEqualFold applies the EqualFold predicate on the "file_type" field.
func FileTypeEqualFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFileType), v))
	})
}

// FileTypeContainsFold applies the ContainsFold predicate on the "file_type" field.
func FileTypeContainsFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFileType), v))
	})
}

// SequenceEQ applies the EQ predicate on the "sequence" field.
func SequenceEQ(v int) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSequence), v))
	})
}

// SequenceNEQ applies the NEQ predicate on the "sequence" field.
func SequenceNEQ(v int) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSequence), v))
	})
}

// SequenceIn applies the In predicate on the "sequence" field.
func SequenceIn(vs ...int) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSequence), v...))
	})
}

// SequenceNotIn applies the NotIn predicate on the "sequence" field.
func SequenceNotIn(vs ...int) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSequence), v...))
	})
}

// SequenceGT applies the GT predicate on the "sequence" field.
func SequenceGT(v int) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSequence), v))
	})
}

// SequenceGTE applies the GTE predicate on the "sequence" field.
func SequenceGTE(v int) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSequence), v))
	})
}

// SequenceLT applies the LT predicate on the "sequence" field.
func SequenceLT(v int) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSequence), v))
	})
}

// SequenceLTE applies the LTE predicate on the "sequence" field.
func SequenceLTE(v int) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSequence), v))
	})
}

// ForeverDeleteEQ applies the EQ predicate on the "forever_delete" field.
func ForeverDeleteEQ(v bool) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldForeverDelete), v))
	})
}

// ForeverDeleteNEQ applies the NEQ predicate on the "forever_delete" field.
func ForeverDeleteNEQ(v bool) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldForeverDelete), v))
	})
}

// UserUIDEQ applies the EQ predicate on the "user_uid" field.
func UserUIDEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserUID), v))
	})
}

// UserUIDNEQ applies the NEQ predicate on the "user_uid" field.
func UserUIDNEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserUID), v))
	})
}

// UserUIDIn applies the In predicate on the "user_uid" field.
func UserUIDIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserUID), v...))
	})
}

// UserUIDNotIn applies the NotIn predicate on the "user_uid" field.
func UserUIDNotIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserUID), v...))
	})
}

// UserUIDGT applies the GT predicate on the "user_uid" field.
func UserUIDGT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserUID), v))
	})
}

// UserUIDGTE applies the GTE predicate on the "user_uid" field.
func UserUIDGTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserUID), v))
	})
}

// UserUIDLT applies the LT predicate on the "user_uid" field.
func UserUIDLT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserUID), v))
	})
}

// UserUIDLTE applies the LTE predicate on the "user_uid" field.
func UserUIDLTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserUID), v))
	})
}

// UserUIDContains applies the Contains predicate on the "user_uid" field.
func UserUIDContains(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserUID), v))
	})
}

// UserUIDHasPrefix applies the HasPrefix predicate on the "user_uid" field.
func UserUIDHasPrefix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserUID), v))
	})
}

// UserUIDHasSuffix applies the HasSuffix predicate on the "user_uid" field.
func UserUIDHasSuffix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserUID), v))
	})
}

// UserUIDEqualFold applies the EqualFold predicate on the "user_uid" field.
func UserUIDEqualFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserUID), v))
	})
}

// UserUIDContainsFold applies the ContainsFold predicate on the "user_uid" field.
func UserUIDContainsFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserUID), v))
	})
}

// WorkspaceUIDEQ applies the EQ predicate on the "workspace_uid" field.
func WorkspaceUIDEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWorkspaceUID), v))
	})
}

// WorkspaceUIDNEQ applies the NEQ predicate on the "workspace_uid" field.
func WorkspaceUIDNEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWorkspaceUID), v))
	})
}

// WorkspaceUIDIn applies the In predicate on the "workspace_uid" field.
func WorkspaceUIDIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWorkspaceUID), v...))
	})
}

// WorkspaceUIDNotIn applies the NotIn predicate on the "workspace_uid" field.
func WorkspaceUIDNotIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWorkspaceUID), v...))
	})
}

// WorkspaceUIDGT applies the GT predicate on the "workspace_uid" field.
func WorkspaceUIDGT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWorkspaceUID), v))
	})
}

// WorkspaceUIDGTE applies the GTE predicate on the "workspace_uid" field.
func WorkspaceUIDGTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWorkspaceUID), v))
	})
}

// WorkspaceUIDLT applies the LT predicate on the "workspace_uid" field.
func WorkspaceUIDLT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWorkspaceUID), v))
	})
}

// WorkspaceUIDLTE applies the LTE predicate on the "workspace_uid" field.
func WorkspaceUIDLTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWorkspaceUID), v))
	})
}

// WorkspaceUIDContains applies the Contains predicate on the "workspace_uid" field.
func WorkspaceUIDContains(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWorkspaceUID), v))
	})
}

// WorkspaceUIDHasPrefix applies the HasPrefix predicate on the "workspace_uid" field.
func WorkspaceUIDHasPrefix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWorkspaceUID), v))
	})
}

// WorkspaceUIDHasSuffix applies the HasSuffix predicate on the "workspace_uid" field.
func WorkspaceUIDHasSuffix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWorkspaceUID), v))
	})
}

// WorkspaceUIDEqualFold applies the EqualFold predicate on the "workspace_uid" field.
func WorkspaceUIDEqualFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWorkspaceUID), v))
	})
}

// WorkspaceUIDContainsFold applies the ContainsFold predicate on the "workspace_uid" field.
func WorkspaceUIDContainsFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWorkspaceUID), v))
	})
}

// FolderUIDEQ applies the EQ predicate on the "folder_uid" field.
func FolderUIDEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFolderUID), v))
	})
}

// FolderUIDNEQ applies the NEQ predicate on the "folder_uid" field.
func FolderUIDNEQ(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFolderUID), v))
	})
}

// FolderUIDIn applies the In predicate on the "folder_uid" field.
func FolderUIDIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFolderUID), v...))
	})
}

// FolderUIDNotIn applies the NotIn predicate on the "folder_uid" field.
func FolderUIDNotIn(vs ...string) predicate.WebLink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WebLink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFolderUID), v...))
	})
}

// FolderUIDGT applies the GT predicate on the "folder_uid" field.
func FolderUIDGT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFolderUID), v))
	})
}

// FolderUIDGTE applies the GTE predicate on the "folder_uid" field.
func FolderUIDGTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFolderUID), v))
	})
}

// FolderUIDLT applies the LT predicate on the "folder_uid" field.
func FolderUIDLT(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFolderUID), v))
	})
}

// FolderUIDLTE applies the LTE predicate on the "folder_uid" field.
func FolderUIDLTE(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFolderUID), v))
	})
}

// FolderUIDContains applies the Contains predicate on the "folder_uid" field.
func FolderUIDContains(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFolderUID), v))
	})
}

// FolderUIDHasPrefix applies the HasPrefix predicate on the "folder_uid" field.
func FolderUIDHasPrefix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFolderUID), v))
	})
}

// FolderUIDHasSuffix applies the HasSuffix predicate on the "folder_uid" field.
func FolderUIDHasSuffix(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFolderUID), v))
	})
}

// FolderUIDEqualFold applies the EqualFold predicate on the "folder_uid" field.
func FolderUIDEqualFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFolderUID), v))
	})
}

// FolderUIDContainsFold applies the ContainsFold predicate on the "folder_uid" field.
func FolderUIDContainsFold(v string) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFolderUID), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WebLink) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WebLink) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WebLink) predicate.WebLink {
	return predicate.WebLink(func(s *sql.Selector) {
		p(s.Not())
	})
}
