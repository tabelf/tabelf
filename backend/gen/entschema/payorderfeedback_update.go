// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/payorderfeedback"
	"tabelf/backend/gen/entschema/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PayOrderFeedbackUpdate is the builder for updating PayOrderFeedback entities.
type PayOrderFeedbackUpdate struct {
	config
	hooks    []Hook
	mutation *PayOrderFeedbackMutation
}

// Where appends a list predicates to the PayOrderFeedbackUpdate builder.
func (pofu *PayOrderFeedbackUpdate) Where(ps ...predicate.PayOrderFeedback) *PayOrderFeedbackUpdate {
	pofu.mutation.Where(ps...)
	return pofu
}

// SetUpdatedAt sets the "updated_at" field.
func (pofu *PayOrderFeedbackUpdate) SetUpdatedAt(t time.Time) *PayOrderFeedbackUpdate {
	pofu.mutation.SetUpdatedAt(t)
	return pofu
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (pofu *PayOrderFeedbackUpdate) SetDeactivatedAt(t time.Time) *PayOrderFeedbackUpdate {
	pofu.mutation.SetDeactivatedAt(t)
	return pofu
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (pofu *PayOrderFeedbackUpdate) SetNillableDeactivatedAt(t *time.Time) *PayOrderFeedbackUpdate {
	if t != nil {
		pofu.SetDeactivatedAt(*t)
	}
	return pofu
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (pofu *PayOrderFeedbackUpdate) ClearDeactivatedAt() *PayOrderFeedbackUpdate {
	pofu.mutation.ClearDeactivatedAt()
	return pofu
}

// SetUserUID sets the "user_uid" field.
func (pofu *PayOrderFeedbackUpdate) SetUserUID(s string) *PayOrderFeedbackUpdate {
	pofu.mutation.SetUserUID(s)
	return pofu
}

// SetOrderNumber sets the "order_number" field.
func (pofu *PayOrderFeedbackUpdate) SetOrderNumber(s string) *PayOrderFeedbackUpdate {
	pofu.mutation.SetOrderNumber(s)
	return pofu
}

// SetNillableOrderNumber sets the "order_number" field if the given value is not nil.
func (pofu *PayOrderFeedbackUpdate) SetNillableOrderNumber(s *string) *PayOrderFeedbackUpdate {
	if s != nil {
		pofu.SetOrderNumber(*s)
	}
	return pofu
}

// ClearOrderNumber clears the value of the "order_number" field.
func (pofu *PayOrderFeedbackUpdate) ClearOrderNumber() *PayOrderFeedbackUpdate {
	pofu.mutation.ClearOrderNumber()
	return pofu
}

// SetCategory sets the "category" field.
func (pofu *PayOrderFeedbackUpdate) SetCategory(s string) *PayOrderFeedbackUpdate {
	pofu.mutation.SetCategory(s)
	return pofu
}

// SetDescription sets the "description" field.
func (pofu *PayOrderFeedbackUpdate) SetDescription(s string) *PayOrderFeedbackUpdate {
	pofu.mutation.SetDescription(s)
	return pofu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pofu *PayOrderFeedbackUpdate) SetNillableDescription(s *string) *PayOrderFeedbackUpdate {
	if s != nil {
		pofu.SetDescription(*s)
	}
	return pofu
}

// ClearDescription clears the value of the "description" field.
func (pofu *PayOrderFeedbackUpdate) ClearDescription() *PayOrderFeedbackUpdate {
	pofu.mutation.ClearDescription()
	return pofu
}

// Mutation returns the PayOrderFeedbackMutation object of the builder.
func (pofu *PayOrderFeedbackUpdate) Mutation() *PayOrderFeedbackMutation {
	return pofu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pofu *PayOrderFeedbackUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pofu.defaults()
	if len(pofu.hooks) == 0 {
		affected, err = pofu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PayOrderFeedbackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pofu.mutation = mutation
			affected, err = pofu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pofu.hooks) - 1; i >= 0; i-- {
			if pofu.hooks[i] == nil {
				return 0, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = pofu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pofu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pofu *PayOrderFeedbackUpdate) SaveX(ctx context.Context) int {
	affected, err := pofu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pofu *PayOrderFeedbackUpdate) Exec(ctx context.Context) error {
	_, err := pofu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pofu *PayOrderFeedbackUpdate) ExecX(ctx context.Context) {
	if err := pofu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pofu *PayOrderFeedbackUpdate) defaults() {
	if _, ok := pofu.mutation.UpdatedAt(); !ok {
		v := payorderfeedback.UpdateDefaultUpdatedAt()
		pofu.mutation.SetUpdatedAt(v)
	}
}

func (pofu *PayOrderFeedbackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payorderfeedback.Table,
			Columns: payorderfeedback.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: payorderfeedback.FieldID,
			},
		},
	}
	if ps := pofu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pofu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorderfeedback.FieldUpdatedAt,
		})
	}
	if value, ok := pofu.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorderfeedback.FieldDeactivatedAt,
		})
	}
	if pofu.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: payorderfeedback.FieldDeactivatedAt,
		})
	}
	if value, ok := pofu.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorderfeedback.FieldUserUID,
		})
	}
	if value, ok := pofu.mutation.OrderNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorderfeedback.FieldOrderNumber,
		})
	}
	if pofu.mutation.OrderNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payorderfeedback.FieldOrderNumber,
		})
	}
	if value, ok := pofu.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorderfeedback.FieldCategory,
		})
	}
	if value, ok := pofu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorderfeedback.FieldDescription,
		})
	}
	if pofu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payorderfeedback.FieldDescription,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pofu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payorderfeedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PayOrderFeedbackUpdateOne is the builder for updating a single PayOrderFeedback entity.
type PayOrderFeedbackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PayOrderFeedbackMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pofuo *PayOrderFeedbackUpdateOne) SetUpdatedAt(t time.Time) *PayOrderFeedbackUpdateOne {
	pofuo.mutation.SetUpdatedAt(t)
	return pofuo
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (pofuo *PayOrderFeedbackUpdateOne) SetDeactivatedAt(t time.Time) *PayOrderFeedbackUpdateOne {
	pofuo.mutation.SetDeactivatedAt(t)
	return pofuo
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (pofuo *PayOrderFeedbackUpdateOne) SetNillableDeactivatedAt(t *time.Time) *PayOrderFeedbackUpdateOne {
	if t != nil {
		pofuo.SetDeactivatedAt(*t)
	}
	return pofuo
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (pofuo *PayOrderFeedbackUpdateOne) ClearDeactivatedAt() *PayOrderFeedbackUpdateOne {
	pofuo.mutation.ClearDeactivatedAt()
	return pofuo
}

// SetUserUID sets the "user_uid" field.
func (pofuo *PayOrderFeedbackUpdateOne) SetUserUID(s string) *PayOrderFeedbackUpdateOne {
	pofuo.mutation.SetUserUID(s)
	return pofuo
}

// SetOrderNumber sets the "order_number" field.
func (pofuo *PayOrderFeedbackUpdateOne) SetOrderNumber(s string) *PayOrderFeedbackUpdateOne {
	pofuo.mutation.SetOrderNumber(s)
	return pofuo
}

// SetNillableOrderNumber sets the "order_number" field if the given value is not nil.
func (pofuo *PayOrderFeedbackUpdateOne) SetNillableOrderNumber(s *string) *PayOrderFeedbackUpdateOne {
	if s != nil {
		pofuo.SetOrderNumber(*s)
	}
	return pofuo
}

// ClearOrderNumber clears the value of the "order_number" field.
func (pofuo *PayOrderFeedbackUpdateOne) ClearOrderNumber() *PayOrderFeedbackUpdateOne {
	pofuo.mutation.ClearOrderNumber()
	return pofuo
}

// SetCategory sets the "category" field.
func (pofuo *PayOrderFeedbackUpdateOne) SetCategory(s string) *PayOrderFeedbackUpdateOne {
	pofuo.mutation.SetCategory(s)
	return pofuo
}

// SetDescription sets the "description" field.
func (pofuo *PayOrderFeedbackUpdateOne) SetDescription(s string) *PayOrderFeedbackUpdateOne {
	pofuo.mutation.SetDescription(s)
	return pofuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pofuo *PayOrderFeedbackUpdateOne) SetNillableDescription(s *string) *PayOrderFeedbackUpdateOne {
	if s != nil {
		pofuo.SetDescription(*s)
	}
	return pofuo
}

// ClearDescription clears the value of the "description" field.
func (pofuo *PayOrderFeedbackUpdateOne) ClearDescription() *PayOrderFeedbackUpdateOne {
	pofuo.mutation.ClearDescription()
	return pofuo
}

// Mutation returns the PayOrderFeedbackMutation object of the builder.
func (pofuo *PayOrderFeedbackUpdateOne) Mutation() *PayOrderFeedbackMutation {
	return pofuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pofuo *PayOrderFeedbackUpdateOne) Select(field string, fields ...string) *PayOrderFeedbackUpdateOne {
	pofuo.fields = append([]string{field}, fields...)
	return pofuo
}

// Save executes the query and returns the updated PayOrderFeedback entity.
func (pofuo *PayOrderFeedbackUpdateOne) Save(ctx context.Context) (*PayOrderFeedback, error) {
	var (
		err  error
		node *PayOrderFeedback
	)
	pofuo.defaults()
	if len(pofuo.hooks) == 0 {
		node, err = pofuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PayOrderFeedbackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pofuo.mutation = mutation
			node, err = pofuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pofuo.hooks) - 1; i >= 0; i-- {
			if pofuo.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = pofuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pofuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pofuo *PayOrderFeedbackUpdateOne) SaveX(ctx context.Context) *PayOrderFeedback {
	node, err := pofuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pofuo *PayOrderFeedbackUpdateOne) Exec(ctx context.Context) error {
	_, err := pofuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pofuo *PayOrderFeedbackUpdateOne) ExecX(ctx context.Context) {
	if err := pofuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pofuo *PayOrderFeedbackUpdateOne) defaults() {
	if _, ok := pofuo.mutation.UpdatedAt(); !ok {
		v := payorderfeedback.UpdateDefaultUpdatedAt()
		pofuo.mutation.SetUpdatedAt(v)
	}
}

func (pofuo *PayOrderFeedbackUpdateOne) sqlSave(ctx context.Context) (_node *PayOrderFeedback, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payorderfeedback.Table,
			Columns: payorderfeedback.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: payorderfeedback.FieldID,
			},
		},
	}
	id, ok := pofuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entschema: missing "PayOrderFeedback.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pofuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, payorderfeedback.FieldID)
		for _, f := range fields {
			if !payorderfeedback.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entschema: invalid field %q for query", f)}
			}
			if f != payorderfeedback.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pofuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pofuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorderfeedback.FieldUpdatedAt,
		})
	}
	if value, ok := pofuo.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorderfeedback.FieldDeactivatedAt,
		})
	}
	if pofuo.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: payorderfeedback.FieldDeactivatedAt,
		})
	}
	if value, ok := pofuo.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorderfeedback.FieldUserUID,
		})
	}
	if value, ok := pofuo.mutation.OrderNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorderfeedback.FieldOrderNumber,
		})
	}
	if pofuo.mutation.OrderNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payorderfeedback.FieldOrderNumber,
		})
	}
	if value, ok := pofuo.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorderfeedback.FieldCategory,
		})
	}
	if value, ok := pofuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorderfeedback.FieldDescription,
		})
	}
	if pofuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payorderfeedback.FieldDescription,
		})
	}
	_node = &PayOrderFeedback{config: pofuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pofuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payorderfeedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
