// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/teamfolder"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamFolderCreate is the builder for creating a TeamFolder entity.
type TeamFolderCreate struct {
	config
	mutation *TeamFolderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (tfc *TeamFolderCreate) SetUID(s string) *TeamFolderCreate {
	tfc.mutation.SetUID(s)
	return tfc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (tfc *TeamFolderCreate) SetNillableUID(s *string) *TeamFolderCreate {
	if s != nil {
		tfc.SetUID(*s)
	}
	return tfc
}

// SetCreatedAt sets the "created_at" field.
func (tfc *TeamFolderCreate) SetCreatedAt(t time.Time) *TeamFolderCreate {
	tfc.mutation.SetCreatedAt(t)
	return tfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tfc *TeamFolderCreate) SetNillableCreatedAt(t *time.Time) *TeamFolderCreate {
	if t != nil {
		tfc.SetCreatedAt(*t)
	}
	return tfc
}

// SetUpdatedAt sets the "updated_at" field.
func (tfc *TeamFolderCreate) SetUpdatedAt(t time.Time) *TeamFolderCreate {
	tfc.mutation.SetUpdatedAt(t)
	return tfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tfc *TeamFolderCreate) SetNillableUpdatedAt(t *time.Time) *TeamFolderCreate {
	if t != nil {
		tfc.SetUpdatedAt(*t)
	}
	return tfc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (tfc *TeamFolderCreate) SetDeactivatedAt(t time.Time) *TeamFolderCreate {
	tfc.mutation.SetDeactivatedAt(t)
	return tfc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (tfc *TeamFolderCreate) SetNillableDeactivatedAt(t *time.Time) *TeamFolderCreate {
	if t != nil {
		tfc.SetDeactivatedAt(*t)
	}
	return tfc
}

// SetTeamUID sets the "team_uid" field.
func (tfc *TeamFolderCreate) SetTeamUID(s string) *TeamFolderCreate {
	tfc.mutation.SetTeamUID(s)
	return tfc
}

// SetFileName sets the "file_name" field.
func (tfc *TeamFolderCreate) SetFileName(s string) *TeamFolderCreate {
	tfc.mutation.SetFileName(s)
	return tfc
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (tfc *TeamFolderCreate) SetNillableFileName(s *string) *TeamFolderCreate {
	if s != nil {
		tfc.SetFileName(*s)
	}
	return tfc
}

// SetID sets the "id" field.
func (tfc *TeamFolderCreate) SetID(u uint64) *TeamFolderCreate {
	tfc.mutation.SetID(u)
	return tfc
}

// Mutation returns the TeamFolderMutation object of the builder.
func (tfc *TeamFolderCreate) Mutation() *TeamFolderMutation {
	return tfc.mutation
}

// Save creates the TeamFolder in the database.
func (tfc *TeamFolderCreate) Save(ctx context.Context) (*TeamFolder, error) {
	var (
		err  error
		node *TeamFolder
	)
	tfc.defaults()
	if len(tfc.hooks) == 0 {
		if err = tfc.check(); err != nil {
			return nil, err
		}
		node, err = tfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeamFolderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tfc.check(); err != nil {
				return nil, err
			}
			tfc.mutation = mutation
			if node, err = tfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tfc.hooks) - 1; i >= 0; i-- {
			if tfc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = tfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tfc *TeamFolderCreate) SaveX(ctx context.Context) *TeamFolder {
	v, err := tfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfc *TeamFolderCreate) Exec(ctx context.Context) error {
	_, err := tfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfc *TeamFolderCreate) ExecX(ctx context.Context) {
	if err := tfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfc *TeamFolderCreate) defaults() {
	if _, ok := tfc.mutation.UID(); !ok {
		v := teamfolder.DefaultUID()
		tfc.mutation.SetUID(v)
	}
	if _, ok := tfc.mutation.CreatedAt(); !ok {
		v := teamfolder.DefaultCreatedAt()
		tfc.mutation.SetCreatedAt(v)
	}
	if _, ok := tfc.mutation.UpdatedAt(); !ok {
		v := teamfolder.DefaultUpdatedAt()
		tfc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfc *TeamFolderCreate) check() error {
	if _, ok := tfc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "TeamFolder.uid"`)}
	}
	if v, ok := tfc.mutation.UID(); ok {
		if err := teamfolder.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "TeamFolder.uid": %w`, err)}
		}
	}
	if _, ok := tfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "TeamFolder.created_at"`)}
	}
	if _, ok := tfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "TeamFolder.updated_at"`)}
	}
	if _, ok := tfc.mutation.TeamUID(); !ok {
		return &ValidationError{Name: "team_uid", err: errors.New(`entschema: missing required field "TeamFolder.team_uid"`)}
	}
	return nil
}

func (tfc *TeamFolderCreate) sqlSave(ctx context.Context) (*TeamFolder, error) {
	_node, _spec := tfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (tfc *TeamFolderCreate) createSpec() (*TeamFolder, *sqlgraph.CreateSpec) {
	var (
		_node = &TeamFolder{config: tfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: teamfolder.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: teamfolder.FieldID,
			},
		}
	)
	_spec.OnConflict = tfc.conflict
	if id, ok := tfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tfc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teamfolder.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := tfc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teamfolder.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tfc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teamfolder.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tfc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teamfolder.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := tfc.mutation.TeamUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teamfolder.FieldTeamUID,
		})
		_node.TeamUID = value
	}
	if value, ok := tfc.mutation.FileName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teamfolder.FieldFileName,
		})
		_node.FileName = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TeamFolder.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeamFolderUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (tfc *TeamFolderCreate) OnConflict(opts ...sql.ConflictOption) *TeamFolderUpsertOne {
	tfc.conflict = opts
	return &TeamFolderUpsertOne{
		create: tfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TeamFolder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tfc *TeamFolderCreate) OnConflictColumns(columns ...string) *TeamFolderUpsertOne {
	tfc.conflict = append(tfc.conflict, sql.ConflictColumns(columns...))
	return &TeamFolderUpsertOne{
		create: tfc,
	}
}

type (
	// TeamFolderUpsertOne is the builder for "upsert"-ing
	//  one TeamFolder node.
	TeamFolderUpsertOne struct {
		create *TeamFolderCreate
	}

	// TeamFolderUpsert is the "OnConflict" setter.
	TeamFolderUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *TeamFolderUpsert) SetUID(v string) *TeamFolderUpsert {
	u.Set(teamfolder.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *TeamFolderUpsert) UpdateUID() *TeamFolderUpsert {
	u.SetExcluded(teamfolder.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TeamFolderUpsert) SetCreatedAt(v time.Time) *TeamFolderUpsert {
	u.Set(teamfolder.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TeamFolderUpsert) UpdateCreatedAt() *TeamFolderUpsert {
	u.SetExcluded(teamfolder.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeamFolderUpsert) SetUpdatedAt(v time.Time) *TeamFolderUpsert {
	u.Set(teamfolder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeamFolderUpsert) UpdateUpdatedAt() *TeamFolderUpsert {
	u.SetExcluded(teamfolder.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *TeamFolderUpsert) SetDeactivatedAt(v time.Time) *TeamFolderUpsert {
	u.Set(teamfolder.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *TeamFolderUpsert) UpdateDeactivatedAt() *TeamFolderUpsert {
	u.SetExcluded(teamfolder.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *TeamFolderUpsert) ClearDeactivatedAt() *TeamFolderUpsert {
	u.SetNull(teamfolder.FieldDeactivatedAt)
	return u
}

// SetTeamUID sets the "team_uid" field.
func (u *TeamFolderUpsert) SetTeamUID(v string) *TeamFolderUpsert {
	u.Set(teamfolder.FieldTeamUID, v)
	return u
}

// UpdateTeamUID sets the "team_uid" field to the value that was provided on create.
func (u *TeamFolderUpsert) UpdateTeamUID() *TeamFolderUpsert {
	u.SetExcluded(teamfolder.FieldTeamUID)
	return u
}

// SetFileName sets the "file_name" field.
func (u *TeamFolderUpsert) SetFileName(v string) *TeamFolderUpsert {
	u.Set(teamfolder.FieldFileName, v)
	return u
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *TeamFolderUpsert) UpdateFileName() *TeamFolderUpsert {
	u.SetExcluded(teamfolder.FieldFileName)
	return u
}

// ClearFileName clears the value of the "file_name" field.
func (u *TeamFolderUpsert) ClearFileName() *TeamFolderUpsert {
	u.SetNull(teamfolder.FieldFileName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TeamFolder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(teamfolder.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TeamFolderUpsertOne) UpdateNewValues() *TeamFolderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(teamfolder.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(teamfolder.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(teamfolder.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TeamFolder.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TeamFolderUpsertOne) Ignore() *TeamFolderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeamFolderUpsertOne) DoNothing() *TeamFolderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeamFolderCreate.OnConflict
// documentation for more info.
func (u *TeamFolderUpsertOne) Update(set func(*TeamFolderUpsert)) *TeamFolderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeamFolderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *TeamFolderUpsertOne) SetUID(v string) *TeamFolderUpsertOne {
	return u.Update(func(s *TeamFolderUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *TeamFolderUpsertOne) UpdateUID() *TeamFolderUpsertOne {
	return u.Update(func(s *TeamFolderUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TeamFolderUpsertOne) SetCreatedAt(v time.Time) *TeamFolderUpsertOne {
	return u.Update(func(s *TeamFolderUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TeamFolderUpsertOne) UpdateCreatedAt() *TeamFolderUpsertOne {
	return u.Update(func(s *TeamFolderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeamFolderUpsertOne) SetUpdatedAt(v time.Time) *TeamFolderUpsertOne {
	return u.Update(func(s *TeamFolderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeamFolderUpsertOne) UpdateUpdatedAt() *TeamFolderUpsertOne {
	return u.Update(func(s *TeamFolderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *TeamFolderUpsertOne) SetDeactivatedAt(v time.Time) *TeamFolderUpsertOne {
	return u.Update(func(s *TeamFolderUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *TeamFolderUpsertOne) UpdateDeactivatedAt() *TeamFolderUpsertOne {
	return u.Update(func(s *TeamFolderUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *TeamFolderUpsertOne) ClearDeactivatedAt() *TeamFolderUpsertOne {
	return u.Update(func(s *TeamFolderUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetTeamUID sets the "team_uid" field.
func (u *TeamFolderUpsertOne) SetTeamUID(v string) *TeamFolderUpsertOne {
	return u.Update(func(s *TeamFolderUpsert) {
		s.SetTeamUID(v)
	})
}

// UpdateTeamUID sets the "team_uid" field to the value that was provided on create.
func (u *TeamFolderUpsertOne) UpdateTeamUID() *TeamFolderUpsertOne {
	return u.Update(func(s *TeamFolderUpsert) {
		s.UpdateTeamUID()
	})
}

// SetFileName sets the "file_name" field.
func (u *TeamFolderUpsertOne) SetFileName(v string) *TeamFolderUpsertOne {
	return u.Update(func(s *TeamFolderUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *TeamFolderUpsertOne) UpdateFileName() *TeamFolderUpsertOne {
	return u.Update(func(s *TeamFolderUpsert) {
		s.UpdateFileName()
	})
}

// ClearFileName clears the value of the "file_name" field.
func (u *TeamFolderUpsertOne) ClearFileName() *TeamFolderUpsertOne {
	return u.Update(func(s *TeamFolderUpsert) {
		s.ClearFileName()
	})
}

// Exec executes the query.
func (u *TeamFolderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for TeamFolderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeamFolderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TeamFolderUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TeamFolderUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TeamFolderCreateBulk is the builder for creating many TeamFolder entities in bulk.
type TeamFolderCreateBulk struct {
	config
	builders []*TeamFolderCreate
	conflict []sql.ConflictOption
}

// Save creates the TeamFolder entities in the database.
func (tfcb *TeamFolderCreateBulk) Save(ctx context.Context) ([]*TeamFolder, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tfcb.builders))
	nodes := make([]*TeamFolder, len(tfcb.builders))
	mutators := make([]Mutator, len(tfcb.builders))
	for i := range tfcb.builders {
		func(i int, root context.Context) {
			builder := tfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeamFolderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tfcb *TeamFolderCreateBulk) SaveX(ctx context.Context) []*TeamFolder {
	v, err := tfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfcb *TeamFolderCreateBulk) Exec(ctx context.Context) error {
	_, err := tfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfcb *TeamFolderCreateBulk) ExecX(ctx context.Context) {
	if err := tfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TeamFolder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeamFolderUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (tfcb *TeamFolderCreateBulk) OnConflict(opts ...sql.ConflictOption) *TeamFolderUpsertBulk {
	tfcb.conflict = opts
	return &TeamFolderUpsertBulk{
		create: tfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TeamFolder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tfcb *TeamFolderCreateBulk) OnConflictColumns(columns ...string) *TeamFolderUpsertBulk {
	tfcb.conflict = append(tfcb.conflict, sql.ConflictColumns(columns...))
	return &TeamFolderUpsertBulk{
		create: tfcb,
	}
}

// TeamFolderUpsertBulk is the builder for "upsert"-ing
// a bulk of TeamFolder nodes.
type TeamFolderUpsertBulk struct {
	create *TeamFolderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TeamFolder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(teamfolder.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TeamFolderUpsertBulk) UpdateNewValues() *TeamFolderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(teamfolder.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(teamfolder.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(teamfolder.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TeamFolder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TeamFolderUpsertBulk) Ignore() *TeamFolderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeamFolderUpsertBulk) DoNothing() *TeamFolderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeamFolderCreateBulk.OnConflict
// documentation for more info.
func (u *TeamFolderUpsertBulk) Update(set func(*TeamFolderUpsert)) *TeamFolderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeamFolderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *TeamFolderUpsertBulk) SetUID(v string) *TeamFolderUpsertBulk {
	return u.Update(func(s *TeamFolderUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *TeamFolderUpsertBulk) UpdateUID() *TeamFolderUpsertBulk {
	return u.Update(func(s *TeamFolderUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TeamFolderUpsertBulk) SetCreatedAt(v time.Time) *TeamFolderUpsertBulk {
	return u.Update(func(s *TeamFolderUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TeamFolderUpsertBulk) UpdateCreatedAt() *TeamFolderUpsertBulk {
	return u.Update(func(s *TeamFolderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeamFolderUpsertBulk) SetUpdatedAt(v time.Time) *TeamFolderUpsertBulk {
	return u.Update(func(s *TeamFolderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeamFolderUpsertBulk) UpdateUpdatedAt() *TeamFolderUpsertBulk {
	return u.Update(func(s *TeamFolderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *TeamFolderUpsertBulk) SetDeactivatedAt(v time.Time) *TeamFolderUpsertBulk {
	return u.Update(func(s *TeamFolderUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *TeamFolderUpsertBulk) UpdateDeactivatedAt() *TeamFolderUpsertBulk {
	return u.Update(func(s *TeamFolderUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *TeamFolderUpsertBulk) ClearDeactivatedAt() *TeamFolderUpsertBulk {
	return u.Update(func(s *TeamFolderUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetTeamUID sets the "team_uid" field.
func (u *TeamFolderUpsertBulk) SetTeamUID(v string) *TeamFolderUpsertBulk {
	return u.Update(func(s *TeamFolderUpsert) {
		s.SetTeamUID(v)
	})
}

// UpdateTeamUID sets the "team_uid" field to the value that was provided on create.
func (u *TeamFolderUpsertBulk) UpdateTeamUID() *TeamFolderUpsertBulk {
	return u.Update(func(s *TeamFolderUpsert) {
		s.UpdateTeamUID()
	})
}

// SetFileName sets the "file_name" field.
func (u *TeamFolderUpsertBulk) SetFileName(v string) *TeamFolderUpsertBulk {
	return u.Update(func(s *TeamFolderUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *TeamFolderUpsertBulk) UpdateFileName() *TeamFolderUpsertBulk {
	return u.Update(func(s *TeamFolderUpsert) {
		s.UpdateFileName()
	})
}

// ClearFileName clears the value of the "file_name" field.
func (u *TeamFolderUpsertBulk) ClearFileName() *TeamFolderUpsertBulk {
	return u.Update(func(s *TeamFolderUpsert) {
		s.ClearFileName()
	})
}

// Exec executes the query.
func (u *TeamFolderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the TeamFolderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for TeamFolderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeamFolderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
