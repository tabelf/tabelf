// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/community"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommunityCreate is the builder for creating a Community entity.
type CommunityCreate struct {
	config
	mutation *CommunityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (cc *CommunityCreate) SetUID(s string) *CommunityCreate {
	cc.mutation.SetUID(s)
	return cc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableUID(s *string) *CommunityCreate {
	if s != nil {
		cc.SetUID(*s)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CommunityCreate) SetCreatedAt(t time.Time) *CommunityCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableCreatedAt(t *time.Time) *CommunityCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CommunityCreate) SetUpdatedAt(t time.Time) *CommunityCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableUpdatedAt(t *time.Time) *CommunityCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (cc *CommunityCreate) SetDeactivatedAt(t time.Time) *CommunityCreate {
	cc.mutation.SetDeactivatedAt(t)
	return cc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableDeactivatedAt(t *time.Time) *CommunityCreate {
	if t != nil {
		cc.SetDeactivatedAt(*t)
	}
	return cc
}

// SetTitle sets the "title" field.
func (cc *CommunityCreate) SetTitle(s string) *CommunityCreate {
	cc.mutation.SetTitle(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *CommunityCreate) SetDescription(s string) *CommunityCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableDescription(s *string) *CommunityCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetImage sets the "image" field.
func (cc *CommunityCreate) SetImage(s string) *CommunityCreate {
	cc.mutation.SetImage(s)
	return cc
}

// SetTags sets the "tags" field.
func (cc *CommunityCreate) SetTags(s []string) *CommunityCreate {
	cc.mutation.SetTags(s)
	return cc
}

// SetPraise sets the "praise" field.
func (cc *CommunityCreate) SetPraise(i int) *CommunityCreate {
	cc.mutation.SetPraise(i)
	return cc
}

// SetNillablePraise sets the "praise" field if the given value is not nil.
func (cc *CommunityCreate) SetNillablePraise(i *int) *CommunityCreate {
	if i != nil {
		cc.SetPraise(*i)
	}
	return cc
}

// SetStar sets the "star" field.
func (cc *CommunityCreate) SetStar(i int) *CommunityCreate {
	cc.mutation.SetStar(i)
	return cc
}

// SetNillableStar sets the "star" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableStar(i *int) *CommunityCreate {
	if i != nil {
		cc.SetStar(*i)
	}
	return cc
}

// SetView sets the "view" field.
func (cc *CommunityCreate) SetView(i int) *CommunityCreate {
	cc.mutation.SetView(i)
	return cc
}

// SetNillableView sets the "view" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableView(i *int) *CommunityCreate {
	if i != nil {
		cc.SetView(*i)
	}
	return cc
}

// SetUsed sets the "used" field.
func (cc *CommunityCreate) SetUsed(i int) *CommunityCreate {
	cc.mutation.SetUsed(i)
	return cc
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableUsed(i *int) *CommunityCreate {
	if i != nil {
		cc.SetUsed(*i)
	}
	return cc
}

// SetFolderUID sets the "folder_uid" field.
func (cc *CommunityCreate) SetFolderUID(s string) *CommunityCreate {
	cc.mutation.SetFolderUID(s)
	return cc
}

// SetUserUID sets the "user_uid" field.
func (cc *CommunityCreate) SetUserUID(s string) *CommunityCreate {
	cc.mutation.SetUserUID(s)
	return cc
}

// SetStatus sets the "status" field.
func (cc *CommunityCreate) SetStatus(s string) *CommunityCreate {
	cc.mutation.SetStatus(s)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableStatus(s *string) *CommunityCreate {
	if s != nil {
		cc.SetStatus(*s)
	}
	return cc
}

// SetRemark sets the "remark" field.
func (cc *CommunityCreate) SetRemark(s string) *CommunityCreate {
	cc.mutation.SetRemark(s)
	return cc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cc *CommunityCreate) SetNillableRemark(s *string) *CommunityCreate {
	if s != nil {
		cc.SetRemark(*s)
	}
	return cc
}

// SetCategoryUID sets the "category_uid" field.
func (cc *CommunityCreate) SetCategoryUID(s string) *CommunityCreate {
	cc.mutation.SetCategoryUID(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CommunityCreate) SetID(u uint64) *CommunityCreate {
	cc.mutation.SetID(u)
	return cc
}

// Mutation returns the CommunityMutation object of the builder.
func (cc *CommunityCreate) Mutation() *CommunityMutation {
	return cc.mutation
}

// Save creates the Community in the database.
func (cc *CommunityCreate) Save(ctx context.Context) (*Community, error) {
	var (
		err  error
		node *Community
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommunityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CommunityCreate) SaveX(ctx context.Context) *Community {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CommunityCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CommunityCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CommunityCreate) defaults() {
	if _, ok := cc.mutation.UID(); !ok {
		v := community.DefaultUID()
		cc.mutation.SetUID(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := community.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := community.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Praise(); !ok {
		v := community.DefaultPraise
		cc.mutation.SetPraise(v)
	}
	if _, ok := cc.mutation.Star(); !ok {
		v := community.DefaultStar
		cc.mutation.SetStar(v)
	}
	if _, ok := cc.mutation.View(); !ok {
		v := community.DefaultView
		cc.mutation.SetView(v)
	}
	if _, ok := cc.mutation.Used(); !ok {
		v := community.DefaultUsed
		cc.mutation.SetUsed(v)
	}
	if _, ok := cc.mutation.Status(); !ok {
		v := community.DefaultStatus
		cc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CommunityCreate) check() error {
	if _, ok := cc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "Community.uid"`)}
	}
	if v, ok := cc.mutation.UID(); ok {
		if err := community.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "Community.uid": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "Community.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "Community.updated_at"`)}
	}
	if _, ok := cc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`entschema: missing required field "Community.title"`)}
	}
	if _, ok := cc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`entschema: missing required field "Community.image"`)}
	}
	if _, ok := cc.mutation.Praise(); !ok {
		return &ValidationError{Name: "praise", err: errors.New(`entschema: missing required field "Community.praise"`)}
	}
	if _, ok := cc.mutation.Star(); !ok {
		return &ValidationError{Name: "star", err: errors.New(`entschema: missing required field "Community.star"`)}
	}
	if _, ok := cc.mutation.View(); !ok {
		return &ValidationError{Name: "view", err: errors.New(`entschema: missing required field "Community.view"`)}
	}
	if _, ok := cc.mutation.Used(); !ok {
		return &ValidationError{Name: "used", err: errors.New(`entschema: missing required field "Community.used"`)}
	}
	if _, ok := cc.mutation.FolderUID(); !ok {
		return &ValidationError{Name: "folder_uid", err: errors.New(`entschema: missing required field "Community.folder_uid"`)}
	}
	if _, ok := cc.mutation.UserUID(); !ok {
		return &ValidationError{Name: "user_uid", err: errors.New(`entschema: missing required field "Community.user_uid"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`entschema: missing required field "Community.status"`)}
	}
	if _, ok := cc.mutation.CategoryUID(); !ok {
		return &ValidationError{Name: "category_uid", err: errors.New(`entschema: missing required field "Community.category_uid"`)}
	}
	return nil
}

func (cc *CommunityCreate) sqlSave(ctx context.Context) (*Community, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (cc *CommunityCreate) createSpec() (*Community, *sqlgraph.CreateSpec) {
	var (
		_node = &Community{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: community.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: community.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := cc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := cc.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := cc.mutation.Tags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: community.FieldTags,
		})
		_node.Tags = value
	}
	if value, ok := cc.mutation.Praise(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldPraise,
		})
		_node.Praise = value
	}
	if value, ok := cc.mutation.Star(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldStar,
		})
		_node.Star = value
	}
	if value, ok := cc.mutation.View(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldView,
		})
		_node.View = value
	}
	if value, ok := cc.mutation.Used(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldUsed,
		})
		_node.Used = value
	}
	if value, ok := cc.mutation.FolderUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldFolderUID,
		})
		_node.FolderUID = value
	}
	if value, ok := cc.mutation.UserUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldUserUID,
		})
		_node.UserUID = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := cc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := cc.mutation.CategoryUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldCategoryUID,
		})
		_node.CategoryUID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Community.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommunityUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (cc *CommunityCreate) OnConflict(opts ...sql.ConflictOption) *CommunityUpsertOne {
	cc.conflict = opts
	return &CommunityUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Community.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cc *CommunityCreate) OnConflictColumns(columns ...string) *CommunityUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CommunityUpsertOne{
		create: cc,
	}
}

type (
	// CommunityUpsertOne is the builder for "upsert"-ing
	//  one Community node.
	CommunityUpsertOne struct {
		create *CommunityCreate
	}

	// CommunityUpsert is the "OnConflict" setter.
	CommunityUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *CommunityUpsert) SetUID(v string) *CommunityUpsert {
	u.Set(community.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *CommunityUpsert) UpdateUID() *CommunityUpsert {
	u.SetExcluded(community.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CommunityUpsert) SetCreatedAt(v time.Time) *CommunityUpsert {
	u.Set(community.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CommunityUpsert) UpdateCreatedAt() *CommunityUpsert {
	u.SetExcluded(community.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommunityUpsert) SetUpdatedAt(v time.Time) *CommunityUpsert {
	u.Set(community.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommunityUpsert) UpdateUpdatedAt() *CommunityUpsert {
	u.SetExcluded(community.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *CommunityUpsert) SetDeactivatedAt(v time.Time) *CommunityUpsert {
	u.Set(community.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *CommunityUpsert) UpdateDeactivatedAt() *CommunityUpsert {
	u.SetExcluded(community.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *CommunityUpsert) ClearDeactivatedAt() *CommunityUpsert {
	u.SetNull(community.FieldDeactivatedAt)
	return u
}

// SetTitle sets the "title" field.
func (u *CommunityUpsert) SetTitle(v string) *CommunityUpsert {
	u.Set(community.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *CommunityUpsert) UpdateTitle() *CommunityUpsert {
	u.SetExcluded(community.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *CommunityUpsert) SetDescription(v string) *CommunityUpsert {
	u.Set(community.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CommunityUpsert) UpdateDescription() *CommunityUpsert {
	u.SetExcluded(community.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *CommunityUpsert) ClearDescription() *CommunityUpsert {
	u.SetNull(community.FieldDescription)
	return u
}

// SetImage sets the "image" field.
func (u *CommunityUpsert) SetImage(v string) *CommunityUpsert {
	u.Set(community.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *CommunityUpsert) UpdateImage() *CommunityUpsert {
	u.SetExcluded(community.FieldImage)
	return u
}

// SetTags sets the "tags" field.
func (u *CommunityUpsert) SetTags(v []string) *CommunityUpsert {
	u.Set(community.FieldTags, v)
	return u
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *CommunityUpsert) UpdateTags() *CommunityUpsert {
	u.SetExcluded(community.FieldTags)
	return u
}

// ClearTags clears the value of the "tags" field.
func (u *CommunityUpsert) ClearTags() *CommunityUpsert {
	u.SetNull(community.FieldTags)
	return u
}

// SetPraise sets the "praise" field.
func (u *CommunityUpsert) SetPraise(v int) *CommunityUpsert {
	u.Set(community.FieldPraise, v)
	return u
}

// UpdatePraise sets the "praise" field to the value that was provided on create.
func (u *CommunityUpsert) UpdatePraise() *CommunityUpsert {
	u.SetExcluded(community.FieldPraise)
	return u
}

// AddPraise adds v to the "praise" field.
func (u *CommunityUpsert) AddPraise(v int) *CommunityUpsert {
	u.Add(community.FieldPraise, v)
	return u
}

// SetStar sets the "star" field.
func (u *CommunityUpsert) SetStar(v int) *CommunityUpsert {
	u.Set(community.FieldStar, v)
	return u
}

// UpdateStar sets the "star" field to the value that was provided on create.
func (u *CommunityUpsert) UpdateStar() *CommunityUpsert {
	u.SetExcluded(community.FieldStar)
	return u
}

// AddStar adds v to the "star" field.
func (u *CommunityUpsert) AddStar(v int) *CommunityUpsert {
	u.Add(community.FieldStar, v)
	return u
}

// SetView sets the "view" field.
func (u *CommunityUpsert) SetView(v int) *CommunityUpsert {
	u.Set(community.FieldView, v)
	return u
}

// UpdateView sets the "view" field to the value that was provided on create.
func (u *CommunityUpsert) UpdateView() *CommunityUpsert {
	u.SetExcluded(community.FieldView)
	return u
}

// AddView adds v to the "view" field.
func (u *CommunityUpsert) AddView(v int) *CommunityUpsert {
	u.Add(community.FieldView, v)
	return u
}

// SetUsed sets the "used" field.
func (u *CommunityUpsert) SetUsed(v int) *CommunityUpsert {
	u.Set(community.FieldUsed, v)
	return u
}

// UpdateUsed sets the "used" field to the value that was provided on create.
func (u *CommunityUpsert) UpdateUsed() *CommunityUpsert {
	u.SetExcluded(community.FieldUsed)
	return u
}

// AddUsed adds v to the "used" field.
func (u *CommunityUpsert) AddUsed(v int) *CommunityUpsert {
	u.Add(community.FieldUsed, v)
	return u
}

// SetFolderUID sets the "folder_uid" field.
func (u *CommunityUpsert) SetFolderUID(v string) *CommunityUpsert {
	u.Set(community.FieldFolderUID, v)
	return u
}

// UpdateFolderUID sets the "folder_uid" field to the value that was provided on create.
func (u *CommunityUpsert) UpdateFolderUID() *CommunityUpsert {
	u.SetExcluded(community.FieldFolderUID)
	return u
}

// SetUserUID sets the "user_uid" field.
func (u *CommunityUpsert) SetUserUID(v string) *CommunityUpsert {
	u.Set(community.FieldUserUID, v)
	return u
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *CommunityUpsert) UpdateUserUID() *CommunityUpsert {
	u.SetExcluded(community.FieldUserUID)
	return u
}

// SetStatus sets the "status" field.
func (u *CommunityUpsert) SetStatus(v string) *CommunityUpsert {
	u.Set(community.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CommunityUpsert) UpdateStatus() *CommunityUpsert {
	u.SetExcluded(community.FieldStatus)
	return u
}

// SetRemark sets the "remark" field.
func (u *CommunityUpsert) SetRemark(v string) *CommunityUpsert {
	u.Set(community.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CommunityUpsert) UpdateRemark() *CommunityUpsert {
	u.SetExcluded(community.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *CommunityUpsert) ClearRemark() *CommunityUpsert {
	u.SetNull(community.FieldRemark)
	return u
}

// SetCategoryUID sets the "category_uid" field.
func (u *CommunityUpsert) SetCategoryUID(v string) *CommunityUpsert {
	u.Set(community.FieldCategoryUID, v)
	return u
}

// UpdateCategoryUID sets the "category_uid" field to the value that was provided on create.
func (u *CommunityUpsert) UpdateCategoryUID() *CommunityUpsert {
	u.SetExcluded(community.FieldCategoryUID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Community.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(community.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CommunityUpsertOne) UpdateNewValues() *CommunityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(community.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(community.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(community.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Community.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CommunityUpsertOne) Ignore() *CommunityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommunityUpsertOne) DoNothing() *CommunityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommunityCreate.OnConflict
// documentation for more info.
func (u *CommunityUpsertOne) Update(set func(*CommunityUpsert)) *CommunityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommunityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *CommunityUpsertOne) SetUID(v string) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdateUID() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *CommunityUpsertOne) SetCreatedAt(v time.Time) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdateCreatedAt() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommunityUpsertOne) SetUpdatedAt(v time.Time) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdateUpdatedAt() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *CommunityUpsertOne) SetDeactivatedAt(v time.Time) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdateDeactivatedAt() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *CommunityUpsertOne) ClearDeactivatedAt() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetTitle sets the "title" field.
func (u *CommunityUpsertOne) SetTitle(v string) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdateTitle() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *CommunityUpsertOne) SetDescription(v string) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdateDescription() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *CommunityUpsertOne) ClearDescription() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.ClearDescription()
	})
}

// SetImage sets the "image" field.
func (u *CommunityUpsertOne) SetImage(v string) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdateImage() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateImage()
	})
}

// SetTags sets the "tags" field.
func (u *CommunityUpsertOne) SetTags(v []string) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdateTags() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateTags()
	})
}

// ClearTags clears the value of the "tags" field.
func (u *CommunityUpsertOne) ClearTags() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.ClearTags()
	})
}

// SetPraise sets the "praise" field.
func (u *CommunityUpsertOne) SetPraise(v int) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetPraise(v)
	})
}

// AddPraise adds v to the "praise" field.
func (u *CommunityUpsertOne) AddPraise(v int) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.AddPraise(v)
	})
}

// UpdatePraise sets the "praise" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdatePraise() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdatePraise()
	})
}

// SetStar sets the "star" field.
func (u *CommunityUpsertOne) SetStar(v int) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetStar(v)
	})
}

// AddStar adds v to the "star" field.
func (u *CommunityUpsertOne) AddStar(v int) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.AddStar(v)
	})
}

// UpdateStar sets the "star" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdateStar() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateStar()
	})
}

// SetView sets the "view" field.
func (u *CommunityUpsertOne) SetView(v int) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetView(v)
	})
}

// AddView adds v to the "view" field.
func (u *CommunityUpsertOne) AddView(v int) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.AddView(v)
	})
}

// UpdateView sets the "view" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdateView() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateView()
	})
}

// SetUsed sets the "used" field.
func (u *CommunityUpsertOne) SetUsed(v int) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetUsed(v)
	})
}

// AddUsed adds v to the "used" field.
func (u *CommunityUpsertOne) AddUsed(v int) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.AddUsed(v)
	})
}

// UpdateUsed sets the "used" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdateUsed() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateUsed()
	})
}

// SetFolderUID sets the "folder_uid" field.
func (u *CommunityUpsertOne) SetFolderUID(v string) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetFolderUID(v)
	})
}

// UpdateFolderUID sets the "folder_uid" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdateFolderUID() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateFolderUID()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *CommunityUpsertOne) SetUserUID(v string) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdateUserUID() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateUserUID()
	})
}

// SetStatus sets the "status" field.
func (u *CommunityUpsertOne) SetStatus(v string) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdateStatus() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateStatus()
	})
}

// SetRemark sets the "remark" field.
func (u *CommunityUpsertOne) SetRemark(v string) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdateRemark() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CommunityUpsertOne) ClearRemark() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.ClearRemark()
	})
}

// SetCategoryUID sets the "category_uid" field.
func (u *CommunityUpsertOne) SetCategoryUID(v string) *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.SetCategoryUID(v)
	})
}

// UpdateCategoryUID sets the "category_uid" field to the value that was provided on create.
func (u *CommunityUpsertOne) UpdateCategoryUID() *CommunityUpsertOne {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateCategoryUID()
	})
}

// Exec executes the query.
func (u *CommunityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for CommunityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommunityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CommunityUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CommunityUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CommunityCreateBulk is the builder for creating many Community entities in bulk.
type CommunityCreateBulk struct {
	config
	builders []*CommunityCreate
	conflict []sql.ConflictOption
}

// Save creates the Community entities in the database.
func (ccb *CommunityCreateBulk) Save(ctx context.Context) ([]*Community, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Community, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommunityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CommunityCreateBulk) SaveX(ctx context.Context) []*Community {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CommunityCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CommunityCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Community.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommunityUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (ccb *CommunityCreateBulk) OnConflict(opts ...sql.ConflictOption) *CommunityUpsertBulk {
	ccb.conflict = opts
	return &CommunityUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Community.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ccb *CommunityCreateBulk) OnConflictColumns(columns ...string) *CommunityUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CommunityUpsertBulk{
		create: ccb,
	}
}

// CommunityUpsertBulk is the builder for "upsert"-ing
// a bulk of Community nodes.
type CommunityUpsertBulk struct {
	create *CommunityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Community.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(community.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CommunityUpsertBulk) UpdateNewValues() *CommunityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(community.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(community.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(community.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Community.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CommunityUpsertBulk) Ignore() *CommunityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommunityUpsertBulk) DoNothing() *CommunityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommunityCreateBulk.OnConflict
// documentation for more info.
func (u *CommunityUpsertBulk) Update(set func(*CommunityUpsert)) *CommunityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommunityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *CommunityUpsertBulk) SetUID(v string) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdateUID() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *CommunityUpsertBulk) SetCreatedAt(v time.Time) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdateCreatedAt() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommunityUpsertBulk) SetUpdatedAt(v time.Time) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdateUpdatedAt() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *CommunityUpsertBulk) SetDeactivatedAt(v time.Time) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdateDeactivatedAt() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *CommunityUpsertBulk) ClearDeactivatedAt() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetTitle sets the "title" field.
func (u *CommunityUpsertBulk) SetTitle(v string) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdateTitle() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *CommunityUpsertBulk) SetDescription(v string) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdateDescription() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *CommunityUpsertBulk) ClearDescription() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.ClearDescription()
	})
}

// SetImage sets the "image" field.
func (u *CommunityUpsertBulk) SetImage(v string) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdateImage() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateImage()
	})
}

// SetTags sets the "tags" field.
func (u *CommunityUpsertBulk) SetTags(v []string) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetTags(v)
	})
}

// UpdateTags sets the "tags" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdateTags() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateTags()
	})
}

// ClearTags clears the value of the "tags" field.
func (u *CommunityUpsertBulk) ClearTags() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.ClearTags()
	})
}

// SetPraise sets the "praise" field.
func (u *CommunityUpsertBulk) SetPraise(v int) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetPraise(v)
	})
}

// AddPraise adds v to the "praise" field.
func (u *CommunityUpsertBulk) AddPraise(v int) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.AddPraise(v)
	})
}

// UpdatePraise sets the "praise" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdatePraise() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdatePraise()
	})
}

// SetStar sets the "star" field.
func (u *CommunityUpsertBulk) SetStar(v int) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetStar(v)
	})
}

// AddStar adds v to the "star" field.
func (u *CommunityUpsertBulk) AddStar(v int) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.AddStar(v)
	})
}

// UpdateStar sets the "star" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdateStar() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateStar()
	})
}

// SetView sets the "view" field.
func (u *CommunityUpsertBulk) SetView(v int) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetView(v)
	})
}

// AddView adds v to the "view" field.
func (u *CommunityUpsertBulk) AddView(v int) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.AddView(v)
	})
}

// UpdateView sets the "view" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdateView() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateView()
	})
}

// SetUsed sets the "used" field.
func (u *CommunityUpsertBulk) SetUsed(v int) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetUsed(v)
	})
}

// AddUsed adds v to the "used" field.
func (u *CommunityUpsertBulk) AddUsed(v int) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.AddUsed(v)
	})
}

// UpdateUsed sets the "used" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdateUsed() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateUsed()
	})
}

// SetFolderUID sets the "folder_uid" field.
func (u *CommunityUpsertBulk) SetFolderUID(v string) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetFolderUID(v)
	})
}

// UpdateFolderUID sets the "folder_uid" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdateFolderUID() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateFolderUID()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *CommunityUpsertBulk) SetUserUID(v string) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdateUserUID() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateUserUID()
	})
}

// SetStatus sets the "status" field.
func (u *CommunityUpsertBulk) SetStatus(v string) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdateStatus() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateStatus()
	})
}

// SetRemark sets the "remark" field.
func (u *CommunityUpsertBulk) SetRemark(v string) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdateRemark() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CommunityUpsertBulk) ClearRemark() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.ClearRemark()
	})
}

// SetCategoryUID sets the "category_uid" field.
func (u *CommunityUpsertBulk) SetCategoryUID(v string) *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.SetCategoryUID(v)
	})
}

// UpdateCategoryUID sets the "category_uid" field to the value that was provided on create.
func (u *CommunityUpsertBulk) UpdateCategoryUID() *CommunityUpsertBulk {
	return u.Update(func(s *CommunityUpsert) {
		s.UpdateCategoryUID()
	})
}

// Exec executes the query.
func (u *CommunityUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the CommunityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for CommunityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommunityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
