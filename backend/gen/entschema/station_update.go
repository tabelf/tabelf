// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/predicate"
	"tabelf/backend/gen/entschema/station"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StationUpdate is the builder for updating Station entities.
type StationUpdate struct {
	config
	hooks    []Hook
	mutation *StationMutation
}

// Where appends a list predicates to the StationUpdate builder.
func (su *StationUpdate) Where(ps ...predicate.Station) *StationUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StationUpdate) SetUpdatedAt(t time.Time) *StationUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (su *StationUpdate) SetDeactivatedAt(t time.Time) *StationUpdate {
	su.mutation.SetDeactivatedAt(t)
	return su
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (su *StationUpdate) SetNillableDeactivatedAt(t *time.Time) *StationUpdate {
	if t != nil {
		su.SetDeactivatedAt(*t)
	}
	return su
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (su *StationUpdate) ClearDeactivatedAt() *StationUpdate {
	su.mutation.ClearDeactivatedAt()
	return su
}

// SetTitle sets the "title" field.
func (su *StationUpdate) SetTitle(s string) *StationUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetDescription sets the "description" field.
func (su *StationUpdate) SetDescription(s string) *StationUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *StationUpdate) SetNillableDescription(s *string) *StationUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *StationUpdate) ClearDescription() *StationUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetImage sets the "image" field.
func (su *StationUpdate) SetImage(s string) *StationUpdate {
	su.mutation.SetImage(s)
	return su
}

// SetTags sets the "tags" field.
func (su *StationUpdate) SetTags(s []string) *StationUpdate {
	su.mutation.SetTags(s)
	return su
}

// ClearTags clears the value of the "tags" field.
func (su *StationUpdate) ClearTags() *StationUpdate {
	su.mutation.ClearTags()
	return su
}

// SetIcon sets the "icon" field.
func (su *StationUpdate) SetIcon(s string) *StationUpdate {
	su.mutation.SetIcon(s)
	return su
}

// SetSource sets the "source" field.
func (su *StationUpdate) SetSource(s string) *StationUpdate {
	su.mutation.SetSource(s)
	return su
}

// SetLink sets the "link" field.
func (su *StationUpdate) SetLink(s string) *StationUpdate {
	su.mutation.SetLink(s)
	return su
}

// SetPraise sets the "praise" field.
func (su *StationUpdate) SetPraise(i int) *StationUpdate {
	su.mutation.ResetPraise()
	su.mutation.SetPraise(i)
	return su
}

// SetNillablePraise sets the "praise" field if the given value is not nil.
func (su *StationUpdate) SetNillablePraise(i *int) *StationUpdate {
	if i != nil {
		su.SetPraise(*i)
	}
	return su
}

// AddPraise adds i to the "praise" field.
func (su *StationUpdate) AddPraise(i int) *StationUpdate {
	su.mutation.AddPraise(i)
	return su
}

// SetStar sets the "star" field.
func (su *StationUpdate) SetStar(i int) *StationUpdate {
	su.mutation.ResetStar()
	su.mutation.SetStar(i)
	return su
}

// SetNillableStar sets the "star" field if the given value is not nil.
func (su *StationUpdate) SetNillableStar(i *int) *StationUpdate {
	if i != nil {
		su.SetStar(*i)
	}
	return su
}

// AddStar adds i to the "star" field.
func (su *StationUpdate) AddStar(i int) *StationUpdate {
	su.mutation.AddStar(i)
	return su
}

// SetView sets the "view" field.
func (su *StationUpdate) SetView(i int) *StationUpdate {
	su.mutation.ResetView()
	su.mutation.SetView(i)
	return su
}

// SetNillableView sets the "view" field if the given value is not nil.
func (su *StationUpdate) SetNillableView(i *int) *StationUpdate {
	if i != nil {
		su.SetView(*i)
	}
	return su
}

// AddView adds i to the "view" field.
func (su *StationUpdate) AddView(i int) *StationUpdate {
	su.mutation.AddView(i)
	return su
}

// SetUserUID sets the "user_uid" field.
func (su *StationUpdate) SetUserUID(s string) *StationUpdate {
	su.mutation.SetUserUID(s)
	return su
}

// SetStatus sets the "status" field.
func (su *StationUpdate) SetStatus(b bool) *StationUpdate {
	su.mutation.SetStatus(b)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *StationUpdate) SetNillableStatus(b *bool) *StationUpdate {
	if b != nil {
		su.SetStatus(*b)
	}
	return su
}

// SetCategoryUID sets the "category_uid" field.
func (su *StationUpdate) SetCategoryUID(s string) *StationUpdate {
	su.mutation.SetCategoryUID(s)
	return su
}

// Mutation returns the StationMutation object of the builder.
func (su *StationUpdate) Mutation() *StationMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StationUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StationUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StationUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StationUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := station.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *StationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   station.Table,
			Columns: station.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: station.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: station.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: station.FieldDeactivatedAt,
		})
	}
	if su.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: station.FieldDeactivatedAt,
		})
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldTitle,
		})
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldDescription,
		})
	}
	if su.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: station.FieldDescription,
		})
	}
	if value, ok := su.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldImage,
		})
	}
	if value, ok := su.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: station.FieldTags,
		})
	}
	if su.mutation.TagsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: station.FieldTags,
		})
	}
	if value, ok := su.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldIcon,
		})
	}
	if value, ok := su.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldSource,
		})
	}
	if value, ok := su.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldLink,
		})
	}
	if value, ok := su.mutation.Praise(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: station.FieldPraise,
		})
	}
	if value, ok := su.mutation.AddedPraise(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: station.FieldPraise,
		})
	}
	if value, ok := su.mutation.Star(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: station.FieldStar,
		})
	}
	if value, ok := su.mutation.AddedStar(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: station.FieldStar,
		})
	}
	if value, ok := su.mutation.View(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: station.FieldView,
		})
	}
	if value, ok := su.mutation.AddedView(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: station.FieldView,
		})
	}
	if value, ok := su.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldUserUID,
		})
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: station.FieldStatus,
		})
	}
	if value, ok := su.mutation.CategoryUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldCategoryUID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{station.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StationUpdateOne is the builder for updating a single Station entity.
type StationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StationUpdateOne) SetUpdatedAt(t time.Time) *StationUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (suo *StationUpdateOne) SetDeactivatedAt(t time.Time) *StationUpdateOne {
	suo.mutation.SetDeactivatedAt(t)
	return suo
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableDeactivatedAt(t *time.Time) *StationUpdateOne {
	if t != nil {
		suo.SetDeactivatedAt(*t)
	}
	return suo
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (suo *StationUpdateOne) ClearDeactivatedAt() *StationUpdateOne {
	suo.mutation.ClearDeactivatedAt()
	return suo
}

// SetTitle sets the "title" field.
func (suo *StationUpdateOne) SetTitle(s string) *StationUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetDescription sets the "description" field.
func (suo *StationUpdateOne) SetDescription(s string) *StationUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableDescription(s *string) *StationUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *StationUpdateOne) ClearDescription() *StationUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetImage sets the "image" field.
func (suo *StationUpdateOne) SetImage(s string) *StationUpdateOne {
	suo.mutation.SetImage(s)
	return suo
}

// SetTags sets the "tags" field.
func (suo *StationUpdateOne) SetTags(s []string) *StationUpdateOne {
	suo.mutation.SetTags(s)
	return suo
}

// ClearTags clears the value of the "tags" field.
func (suo *StationUpdateOne) ClearTags() *StationUpdateOne {
	suo.mutation.ClearTags()
	return suo
}

// SetIcon sets the "icon" field.
func (suo *StationUpdateOne) SetIcon(s string) *StationUpdateOne {
	suo.mutation.SetIcon(s)
	return suo
}

// SetSource sets the "source" field.
func (suo *StationUpdateOne) SetSource(s string) *StationUpdateOne {
	suo.mutation.SetSource(s)
	return suo
}

// SetLink sets the "link" field.
func (suo *StationUpdateOne) SetLink(s string) *StationUpdateOne {
	suo.mutation.SetLink(s)
	return suo
}

// SetPraise sets the "praise" field.
func (suo *StationUpdateOne) SetPraise(i int) *StationUpdateOne {
	suo.mutation.ResetPraise()
	suo.mutation.SetPraise(i)
	return suo
}

// SetNillablePraise sets the "praise" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillablePraise(i *int) *StationUpdateOne {
	if i != nil {
		suo.SetPraise(*i)
	}
	return suo
}

// AddPraise adds i to the "praise" field.
func (suo *StationUpdateOne) AddPraise(i int) *StationUpdateOne {
	suo.mutation.AddPraise(i)
	return suo
}

// SetStar sets the "star" field.
func (suo *StationUpdateOne) SetStar(i int) *StationUpdateOne {
	suo.mutation.ResetStar()
	suo.mutation.SetStar(i)
	return suo
}

// SetNillableStar sets the "star" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableStar(i *int) *StationUpdateOne {
	if i != nil {
		suo.SetStar(*i)
	}
	return suo
}

// AddStar adds i to the "star" field.
func (suo *StationUpdateOne) AddStar(i int) *StationUpdateOne {
	suo.mutation.AddStar(i)
	return suo
}

// SetView sets the "view" field.
func (suo *StationUpdateOne) SetView(i int) *StationUpdateOne {
	suo.mutation.ResetView()
	suo.mutation.SetView(i)
	return suo
}

// SetNillableView sets the "view" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableView(i *int) *StationUpdateOne {
	if i != nil {
		suo.SetView(*i)
	}
	return suo
}

// AddView adds i to the "view" field.
func (suo *StationUpdateOne) AddView(i int) *StationUpdateOne {
	suo.mutation.AddView(i)
	return suo
}

// SetUserUID sets the "user_uid" field.
func (suo *StationUpdateOne) SetUserUID(s string) *StationUpdateOne {
	suo.mutation.SetUserUID(s)
	return suo
}

// SetStatus sets the "status" field.
func (suo *StationUpdateOne) SetStatus(b bool) *StationUpdateOne {
	suo.mutation.SetStatus(b)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *StationUpdateOne) SetNillableStatus(b *bool) *StationUpdateOne {
	if b != nil {
		suo.SetStatus(*b)
	}
	return suo
}

// SetCategoryUID sets the "category_uid" field.
func (suo *StationUpdateOne) SetCategoryUID(s string) *StationUpdateOne {
	suo.mutation.SetCategoryUID(s)
	return suo
}

// Mutation returns the StationMutation object of the builder.
func (suo *StationUpdateOne) Mutation() *StationMutation {
	return suo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StationUpdateOne) Select(field string, fields ...string) *StationUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Station entity.
func (suo *StationUpdateOne) Save(ctx context.Context) (*Station, error) {
	var (
		err  error
		node *Station
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StationUpdateOne) SaveX(ctx context.Context) *Station {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StationUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StationUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StationUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := station.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *StationUpdateOne) sqlSave(ctx context.Context) (_node *Station, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   station.Table,
			Columns: station.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: station.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entschema: missing "Station.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, station.FieldID)
		for _, f := range fields {
			if !station.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entschema: invalid field %q for query", f)}
			}
			if f != station.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: station.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: station.FieldDeactivatedAt,
		})
	}
	if suo.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: station.FieldDeactivatedAt,
		})
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldTitle,
		})
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldDescription,
		})
	}
	if suo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: station.FieldDescription,
		})
	}
	if value, ok := suo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldImage,
		})
	}
	if value, ok := suo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: station.FieldTags,
		})
	}
	if suo.mutation.TagsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: station.FieldTags,
		})
	}
	if value, ok := suo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldIcon,
		})
	}
	if value, ok := suo.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldSource,
		})
	}
	if value, ok := suo.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldLink,
		})
	}
	if value, ok := suo.mutation.Praise(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: station.FieldPraise,
		})
	}
	if value, ok := suo.mutation.AddedPraise(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: station.FieldPraise,
		})
	}
	if value, ok := suo.mutation.Star(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: station.FieldStar,
		})
	}
	if value, ok := suo.mutation.AddedStar(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: station.FieldStar,
		})
	}
	if value, ok := suo.mutation.View(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: station.FieldView,
		})
	}
	if value, ok := suo.mutation.AddedView(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: station.FieldView,
		})
	}
	if value, ok := suo.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldUserUID,
		})
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: station.FieldStatus,
		})
	}
	if value, ok := suo.mutation.CategoryUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: station.FieldCategoryUID,
		})
	}
	_node = &Station{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{station.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
