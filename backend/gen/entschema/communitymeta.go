// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"fmt"
	"strings"
	"tabelf/backend/gen/entschema/communitymeta"
	"time"

	"entgo.io/ent/dialect/sql"
)

// CommunityMeta is the model entity for the CommunityMeta schema.
type CommunityMeta struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeactivatedAt holds the value of the "deactivated_at" field.
	DeactivatedAt *time.Time `json:"deactivated_at,omitempty"`
	// CommunityUID holds the value of the "community_uid" field.
	// 社区uid
	CommunityUID string `json:"community_uid,omitempty"`
	// UserUID holds the value of the "user_uid" field.
	// 用户uid
	UserUID string `json:"user_uid,omitempty"`
	// HasPraise holds the value of the "has_praise" field.
	// 是否点赞
	HasPraise bool `json:"has_praise,omitempty"`
	// HasStar holds the value of the "has_star" field.
	// 是否收藏
	HasStar bool `json:"has_star,omitempty"`
	// HasView holds the value of the "has_view" field.
	// 是否查看
	HasView bool `json:"has_view,omitempty"`
	// HasUsed holds the value of the "has_used" field.
	// 是否使用
	HasUsed bool `json:"has_used,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CommunityMeta) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case communitymeta.FieldHasPraise, communitymeta.FieldHasStar, communitymeta.FieldHasView, communitymeta.FieldHasUsed:
			values[i] = new(sql.NullBool)
		case communitymeta.FieldID:
			values[i] = new(sql.NullInt64)
		case communitymeta.FieldUID, communitymeta.FieldCommunityUID, communitymeta.FieldUserUID:
			values[i] = new(sql.NullString)
		case communitymeta.FieldCreatedAt, communitymeta.FieldUpdatedAt, communitymeta.FieldDeactivatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CommunityMeta", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CommunityMeta fields.
func (cm *CommunityMeta) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case communitymeta.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = uint64(value.Int64)
		case communitymeta.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				cm.UID = value.String
			}
		case communitymeta.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cm.CreatedAt = value.Time
			}
		case communitymeta.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cm.UpdatedAt = value.Time
			}
		case communitymeta.FieldDeactivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deactivated_at", values[i])
			} else if value.Valid {
				cm.DeactivatedAt = new(time.Time)
				*cm.DeactivatedAt = value.Time
			}
		case communitymeta.FieldCommunityUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field community_uid", values[i])
			} else if value.Valid {
				cm.CommunityUID = value.String
			}
		case communitymeta.FieldUserUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_uid", values[i])
			} else if value.Valid {
				cm.UserUID = value.String
			}
		case communitymeta.FieldHasPraise:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_praise", values[i])
			} else if value.Valid {
				cm.HasPraise = value.Bool
			}
		case communitymeta.FieldHasStar:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_star", values[i])
			} else if value.Valid {
				cm.HasStar = value.Bool
			}
		case communitymeta.FieldHasView:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_view", values[i])
			} else if value.Valid {
				cm.HasView = value.Bool
			}
		case communitymeta.FieldHasUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_used", values[i])
			} else if value.Valid {
				cm.HasUsed = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CommunityMeta.
// Note that you need to call CommunityMeta.Unwrap() before calling this method if this CommunityMeta
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *CommunityMeta) Update() *CommunityMetaUpdateOne {
	return (&CommunityMetaClient{config: cm.config}).UpdateOne(cm)
}

// Unwrap unwraps the CommunityMeta entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *CommunityMeta) Unwrap() *CommunityMeta {
	tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("entschema: CommunityMeta is not a transactional entity")
	}
	cm.config.driver = tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *CommunityMeta) String() string {
	var builder strings.Builder
	builder.WriteString("CommunityMeta(")
	builder.WriteString(fmt.Sprintf("id=%v", cm.ID))
	builder.WriteString(", uid=")
	builder.WriteString(cm.UID)
	builder.WriteString(", created_at=")
	builder.WriteString(cm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(cm.UpdatedAt.Format(time.ANSIC))
	if v := cm.DeactivatedAt; v != nil {
		builder.WriteString(", deactivated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", community_uid=")
	builder.WriteString(cm.CommunityUID)
	builder.WriteString(", user_uid=")
	builder.WriteString(cm.UserUID)
	builder.WriteString(", has_praise=")
	builder.WriteString(fmt.Sprintf("%v", cm.HasPraise))
	builder.WriteString(", has_star=")
	builder.WriteString(fmt.Sprintf("%v", cm.HasStar))
	builder.WriteString(", has_view=")
	builder.WriteString(fmt.Sprintf("%v", cm.HasView))
	builder.WriteString(", has_used=")
	builder.WriteString(fmt.Sprintf("%v", cm.HasUsed))
	builder.WriteByte(')')
	return builder.String()
}

// CommunityMetaSlice is a parsable slice of CommunityMeta.
type CommunityMetaSlice []*CommunityMeta

func (cm CommunityMetaSlice) config(cfg config) {
	for _i := range cm {
		cm[_i].config = cfg
	}
}
