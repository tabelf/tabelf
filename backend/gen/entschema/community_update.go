// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/community"
	"tabelf/backend/gen/entschema/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommunityUpdate is the builder for updating Community entities.
type CommunityUpdate struct {
	config
	hooks    []Hook
	mutation *CommunityMutation
}

// Where appends a list predicates to the CommunityUpdate builder.
func (cu *CommunityUpdate) Where(ps ...predicate.Community) *CommunityUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CommunityUpdate) SetUpdatedAt(t time.Time) *CommunityUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (cu *CommunityUpdate) SetDeactivatedAt(t time.Time) *CommunityUpdate {
	cu.mutation.SetDeactivatedAt(t)
	return cu
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableDeactivatedAt(t *time.Time) *CommunityUpdate {
	if t != nil {
		cu.SetDeactivatedAt(*t)
	}
	return cu
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (cu *CommunityUpdate) ClearDeactivatedAt() *CommunityUpdate {
	cu.mutation.ClearDeactivatedAt()
	return cu
}

// SetTitle sets the "title" field.
func (cu *CommunityUpdate) SetTitle(s string) *CommunityUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetDescription sets the "description" field.
func (cu *CommunityUpdate) SetDescription(s string) *CommunityUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableDescription(s *string) *CommunityUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CommunityUpdate) ClearDescription() *CommunityUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetImage sets the "image" field.
func (cu *CommunityUpdate) SetImage(s string) *CommunityUpdate {
	cu.mutation.SetImage(s)
	return cu
}

// SetTags sets the "tags" field.
func (cu *CommunityUpdate) SetTags(s []string) *CommunityUpdate {
	cu.mutation.SetTags(s)
	return cu
}

// ClearTags clears the value of the "tags" field.
func (cu *CommunityUpdate) ClearTags() *CommunityUpdate {
	cu.mutation.ClearTags()
	return cu
}

// SetPraise sets the "praise" field.
func (cu *CommunityUpdate) SetPraise(i int) *CommunityUpdate {
	cu.mutation.ResetPraise()
	cu.mutation.SetPraise(i)
	return cu
}

// SetNillablePraise sets the "praise" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillablePraise(i *int) *CommunityUpdate {
	if i != nil {
		cu.SetPraise(*i)
	}
	return cu
}

// AddPraise adds i to the "praise" field.
func (cu *CommunityUpdate) AddPraise(i int) *CommunityUpdate {
	cu.mutation.AddPraise(i)
	return cu
}

// SetStar sets the "star" field.
func (cu *CommunityUpdate) SetStar(i int) *CommunityUpdate {
	cu.mutation.ResetStar()
	cu.mutation.SetStar(i)
	return cu
}

// SetNillableStar sets the "star" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableStar(i *int) *CommunityUpdate {
	if i != nil {
		cu.SetStar(*i)
	}
	return cu
}

// AddStar adds i to the "star" field.
func (cu *CommunityUpdate) AddStar(i int) *CommunityUpdate {
	cu.mutation.AddStar(i)
	return cu
}

// SetView sets the "view" field.
func (cu *CommunityUpdate) SetView(i int) *CommunityUpdate {
	cu.mutation.ResetView()
	cu.mutation.SetView(i)
	return cu
}

// SetNillableView sets the "view" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableView(i *int) *CommunityUpdate {
	if i != nil {
		cu.SetView(*i)
	}
	return cu
}

// AddView adds i to the "view" field.
func (cu *CommunityUpdate) AddView(i int) *CommunityUpdate {
	cu.mutation.AddView(i)
	return cu
}

// SetUsed sets the "used" field.
func (cu *CommunityUpdate) SetUsed(i int) *CommunityUpdate {
	cu.mutation.ResetUsed()
	cu.mutation.SetUsed(i)
	return cu
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableUsed(i *int) *CommunityUpdate {
	if i != nil {
		cu.SetUsed(*i)
	}
	return cu
}

// AddUsed adds i to the "used" field.
func (cu *CommunityUpdate) AddUsed(i int) *CommunityUpdate {
	cu.mutation.AddUsed(i)
	return cu
}

// SetFolderUID sets the "folder_uid" field.
func (cu *CommunityUpdate) SetFolderUID(s string) *CommunityUpdate {
	cu.mutation.SetFolderUID(s)
	return cu
}

// SetUserUID sets the "user_uid" field.
func (cu *CommunityUpdate) SetUserUID(s string) *CommunityUpdate {
	cu.mutation.SetUserUID(s)
	return cu
}

// SetStatus sets the "status" field.
func (cu *CommunityUpdate) SetStatus(s string) *CommunityUpdate {
	cu.mutation.SetStatus(s)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableStatus(s *string) *CommunityUpdate {
	if s != nil {
		cu.SetStatus(*s)
	}
	return cu
}

// SetRemark sets the "remark" field.
func (cu *CommunityUpdate) SetRemark(s string) *CommunityUpdate {
	cu.mutation.SetRemark(s)
	return cu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cu *CommunityUpdate) SetNillableRemark(s *string) *CommunityUpdate {
	if s != nil {
		cu.SetRemark(*s)
	}
	return cu
}

// ClearRemark clears the value of the "remark" field.
func (cu *CommunityUpdate) ClearRemark() *CommunityUpdate {
	cu.mutation.ClearRemark()
	return cu
}

// SetCategoryUID sets the "category_uid" field.
func (cu *CommunityUpdate) SetCategoryUID(s string) *CommunityUpdate {
	cu.mutation.SetCategoryUID(s)
	return cu
}

// Mutation returns the CommunityMutation object of the builder.
func (cu *CommunityUpdate) Mutation() *CommunityMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommunityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommunityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommunityUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommunityUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommunityUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CommunityUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := community.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *CommunityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   community.Table,
			Columns: community.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: community.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldDeactivatedAt,
		})
	}
	if cu.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: community.FieldDeactivatedAt,
		})
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldTitle,
		})
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldDescription,
		})
	}
	if cu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: community.FieldDescription,
		})
	}
	if value, ok := cu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldImage,
		})
	}
	if value, ok := cu.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: community.FieldTags,
		})
	}
	if cu.mutation.TagsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: community.FieldTags,
		})
	}
	if value, ok := cu.mutation.Praise(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldPraise,
		})
	}
	if value, ok := cu.mutation.AddedPraise(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldPraise,
		})
	}
	if value, ok := cu.mutation.Star(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldStar,
		})
	}
	if value, ok := cu.mutation.AddedStar(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldStar,
		})
	}
	if value, ok := cu.mutation.View(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldView,
		})
	}
	if value, ok := cu.mutation.AddedView(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldView,
		})
	}
	if value, ok := cu.mutation.Used(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldUsed,
		})
	}
	if value, ok := cu.mutation.AddedUsed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldUsed,
		})
	}
	if value, ok := cu.mutation.FolderUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldFolderUID,
		})
	}
	if value, ok := cu.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldUserUID,
		})
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldStatus,
		})
	}
	if value, ok := cu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldRemark,
		})
	}
	if cu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: community.FieldRemark,
		})
	}
	if value, ok := cu.mutation.CategoryUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldCategoryUID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{community.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CommunityUpdateOne is the builder for updating a single Community entity.
type CommunityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommunityMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CommunityUpdateOne) SetUpdatedAt(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (cuo *CommunityUpdateOne) SetDeactivatedAt(t time.Time) *CommunityUpdateOne {
	cuo.mutation.SetDeactivatedAt(t)
	return cuo
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableDeactivatedAt(t *time.Time) *CommunityUpdateOne {
	if t != nil {
		cuo.SetDeactivatedAt(*t)
	}
	return cuo
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (cuo *CommunityUpdateOne) ClearDeactivatedAt() *CommunityUpdateOne {
	cuo.mutation.ClearDeactivatedAt()
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *CommunityUpdateOne) SetTitle(s string) *CommunityUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CommunityUpdateOne) SetDescription(s string) *CommunityUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableDescription(s *string) *CommunityUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CommunityUpdateOne) ClearDescription() *CommunityUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetImage sets the "image" field.
func (cuo *CommunityUpdateOne) SetImage(s string) *CommunityUpdateOne {
	cuo.mutation.SetImage(s)
	return cuo
}

// SetTags sets the "tags" field.
func (cuo *CommunityUpdateOne) SetTags(s []string) *CommunityUpdateOne {
	cuo.mutation.SetTags(s)
	return cuo
}

// ClearTags clears the value of the "tags" field.
func (cuo *CommunityUpdateOne) ClearTags() *CommunityUpdateOne {
	cuo.mutation.ClearTags()
	return cuo
}

// SetPraise sets the "praise" field.
func (cuo *CommunityUpdateOne) SetPraise(i int) *CommunityUpdateOne {
	cuo.mutation.ResetPraise()
	cuo.mutation.SetPraise(i)
	return cuo
}

// SetNillablePraise sets the "praise" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillablePraise(i *int) *CommunityUpdateOne {
	if i != nil {
		cuo.SetPraise(*i)
	}
	return cuo
}

// AddPraise adds i to the "praise" field.
func (cuo *CommunityUpdateOne) AddPraise(i int) *CommunityUpdateOne {
	cuo.mutation.AddPraise(i)
	return cuo
}

// SetStar sets the "star" field.
func (cuo *CommunityUpdateOne) SetStar(i int) *CommunityUpdateOne {
	cuo.mutation.ResetStar()
	cuo.mutation.SetStar(i)
	return cuo
}

// SetNillableStar sets the "star" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableStar(i *int) *CommunityUpdateOne {
	if i != nil {
		cuo.SetStar(*i)
	}
	return cuo
}

// AddStar adds i to the "star" field.
func (cuo *CommunityUpdateOne) AddStar(i int) *CommunityUpdateOne {
	cuo.mutation.AddStar(i)
	return cuo
}

// SetView sets the "view" field.
func (cuo *CommunityUpdateOne) SetView(i int) *CommunityUpdateOne {
	cuo.mutation.ResetView()
	cuo.mutation.SetView(i)
	return cuo
}

// SetNillableView sets the "view" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableView(i *int) *CommunityUpdateOne {
	if i != nil {
		cuo.SetView(*i)
	}
	return cuo
}

// AddView adds i to the "view" field.
func (cuo *CommunityUpdateOne) AddView(i int) *CommunityUpdateOne {
	cuo.mutation.AddView(i)
	return cuo
}

// SetUsed sets the "used" field.
func (cuo *CommunityUpdateOne) SetUsed(i int) *CommunityUpdateOne {
	cuo.mutation.ResetUsed()
	cuo.mutation.SetUsed(i)
	return cuo
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableUsed(i *int) *CommunityUpdateOne {
	if i != nil {
		cuo.SetUsed(*i)
	}
	return cuo
}

// AddUsed adds i to the "used" field.
func (cuo *CommunityUpdateOne) AddUsed(i int) *CommunityUpdateOne {
	cuo.mutation.AddUsed(i)
	return cuo
}

// SetFolderUID sets the "folder_uid" field.
func (cuo *CommunityUpdateOne) SetFolderUID(s string) *CommunityUpdateOne {
	cuo.mutation.SetFolderUID(s)
	return cuo
}

// SetUserUID sets the "user_uid" field.
func (cuo *CommunityUpdateOne) SetUserUID(s string) *CommunityUpdateOne {
	cuo.mutation.SetUserUID(s)
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CommunityUpdateOne) SetStatus(s string) *CommunityUpdateOne {
	cuo.mutation.SetStatus(s)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableStatus(s *string) *CommunityUpdateOne {
	if s != nil {
		cuo.SetStatus(*s)
	}
	return cuo
}

// SetRemark sets the "remark" field.
func (cuo *CommunityUpdateOne) SetRemark(s string) *CommunityUpdateOne {
	cuo.mutation.SetRemark(s)
	return cuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cuo *CommunityUpdateOne) SetNillableRemark(s *string) *CommunityUpdateOne {
	if s != nil {
		cuo.SetRemark(*s)
	}
	return cuo
}

// ClearRemark clears the value of the "remark" field.
func (cuo *CommunityUpdateOne) ClearRemark() *CommunityUpdateOne {
	cuo.mutation.ClearRemark()
	return cuo
}

// SetCategoryUID sets the "category_uid" field.
func (cuo *CommunityUpdateOne) SetCategoryUID(s string) *CommunityUpdateOne {
	cuo.mutation.SetCategoryUID(s)
	return cuo
}

// Mutation returns the CommunityMutation object of the builder.
func (cuo *CommunityUpdateOne) Mutation() *CommunityMutation {
	return cuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommunityUpdateOne) Select(field string, fields ...string) *CommunityUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Community entity.
func (cuo *CommunityUpdateOne) Save(ctx context.Context) (*Community, error) {
	var (
		err  error
		node *Community
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommunityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommunityUpdateOne) SaveX(ctx context.Context) *Community {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommunityUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommunityUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CommunityUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := community.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *CommunityUpdateOne) sqlSave(ctx context.Context) (_node *Community, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   community.Table,
			Columns: community.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: community.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entschema: missing "Community.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, community.FieldID)
		for _, f := range fields {
			if !community.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entschema: invalid field %q for query", f)}
			}
			if f != community.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: community.FieldDeactivatedAt,
		})
	}
	if cuo.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: community.FieldDeactivatedAt,
		})
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldTitle,
		})
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldDescription,
		})
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: community.FieldDescription,
		})
	}
	if value, ok := cuo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldImage,
		})
	}
	if value, ok := cuo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: community.FieldTags,
		})
	}
	if cuo.mutation.TagsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: community.FieldTags,
		})
	}
	if value, ok := cuo.mutation.Praise(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldPraise,
		})
	}
	if value, ok := cuo.mutation.AddedPraise(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldPraise,
		})
	}
	if value, ok := cuo.mutation.Star(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldStar,
		})
	}
	if value, ok := cuo.mutation.AddedStar(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldStar,
		})
	}
	if value, ok := cuo.mutation.View(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldView,
		})
	}
	if value, ok := cuo.mutation.AddedView(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldView,
		})
	}
	if value, ok := cuo.mutation.Used(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldUsed,
		})
	}
	if value, ok := cuo.mutation.AddedUsed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: community.FieldUsed,
		})
	}
	if value, ok := cuo.mutation.FolderUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldFolderUID,
		})
	}
	if value, ok := cuo.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldUserUID,
		})
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldStatus,
		})
	}
	if value, ok := cuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldRemark,
		})
	}
	if cuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: community.FieldRemark,
		})
	}
	if value, ok := cuo.mutation.CategoryUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: community.FieldCategoryUID,
		})
	}
	_node = &Community{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{community.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
