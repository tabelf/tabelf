// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/goodarticle"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GoodArticleCreate is the builder for creating a GoodArticle entity.
type GoodArticleCreate struct {
	config
	mutation *GoodArticleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (gac *GoodArticleCreate) SetUID(s string) *GoodArticleCreate {
	gac.mutation.SetUID(s)
	return gac
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (gac *GoodArticleCreate) SetNillableUID(s *string) *GoodArticleCreate {
	if s != nil {
		gac.SetUID(*s)
	}
	return gac
}

// SetCreatedAt sets the "created_at" field.
func (gac *GoodArticleCreate) SetCreatedAt(t time.Time) *GoodArticleCreate {
	gac.mutation.SetCreatedAt(t)
	return gac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gac *GoodArticleCreate) SetNillableCreatedAt(t *time.Time) *GoodArticleCreate {
	if t != nil {
		gac.SetCreatedAt(*t)
	}
	return gac
}

// SetUpdatedAt sets the "updated_at" field.
func (gac *GoodArticleCreate) SetUpdatedAt(t time.Time) *GoodArticleCreate {
	gac.mutation.SetUpdatedAt(t)
	return gac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gac *GoodArticleCreate) SetNillableUpdatedAt(t *time.Time) *GoodArticleCreate {
	if t != nil {
		gac.SetUpdatedAt(*t)
	}
	return gac
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (gac *GoodArticleCreate) SetDeactivatedAt(t time.Time) *GoodArticleCreate {
	gac.mutation.SetDeactivatedAt(t)
	return gac
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (gac *GoodArticleCreate) SetNillableDeactivatedAt(t *time.Time) *GoodArticleCreate {
	if t != nil {
		gac.SetDeactivatedAt(*t)
	}
	return gac
}

// SetTitle sets the "title" field.
func (gac *GoodArticleCreate) SetTitle(s string) *GoodArticleCreate {
	gac.mutation.SetTitle(s)
	return gac
}

// SetDescription sets the "description" field.
func (gac *GoodArticleCreate) SetDescription(s string) *GoodArticleCreate {
	gac.mutation.SetDescription(s)
	return gac
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gac *GoodArticleCreate) SetNillableDescription(s *string) *GoodArticleCreate {
	if s != nil {
		gac.SetDescription(*s)
	}
	return gac
}

// SetImage sets the "image" field.
func (gac *GoodArticleCreate) SetImage(s string) *GoodArticleCreate {
	gac.mutation.SetImage(s)
	return gac
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (gac *GoodArticleCreate) SetNillableImage(s *string) *GoodArticleCreate {
	if s != nil {
		gac.SetImage(*s)
	}
	return gac
}

// SetSource sets the "source" field.
func (gac *GoodArticleCreate) SetSource(s string) *GoodArticleCreate {
	gac.mutation.SetSource(s)
	return gac
}

// SetIcon sets the "icon" field.
func (gac *GoodArticleCreate) SetIcon(s string) *GoodArticleCreate {
	gac.mutation.SetIcon(s)
	return gac
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (gac *GoodArticleCreate) SetNillableIcon(s *string) *GoodArticleCreate {
	if s != nil {
		gac.SetIcon(*s)
	}
	return gac
}

// SetLink sets the "link" field.
func (gac *GoodArticleCreate) SetLink(s string) *GoodArticleCreate {
	gac.mutation.SetLink(s)
	return gac
}

// SetStar sets the "star" field.
func (gac *GoodArticleCreate) SetStar(i int) *GoodArticleCreate {
	gac.mutation.SetStar(i)
	return gac
}

// SetNillableStar sets the "star" field if the given value is not nil.
func (gac *GoodArticleCreate) SetNillableStar(i *int) *GoodArticleCreate {
	if i != nil {
		gac.SetStar(*i)
	}
	return gac
}

// SetView sets the "view" field.
func (gac *GoodArticleCreate) SetView(i int) *GoodArticleCreate {
	gac.mutation.SetView(i)
	return gac
}

// SetNillableView sets the "view" field if the given value is not nil.
func (gac *GoodArticleCreate) SetNillableView(i *int) *GoodArticleCreate {
	if i != nil {
		gac.SetView(*i)
	}
	return gac
}

// SetUsed sets the "used" field.
func (gac *GoodArticleCreate) SetUsed(i int) *GoodArticleCreate {
	gac.mutation.SetUsed(i)
	return gac
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (gac *GoodArticleCreate) SetNillableUsed(i *int) *GoodArticleCreate {
	if i != nil {
		gac.SetUsed(*i)
	}
	return gac
}

// SetUserUID sets the "user_uid" field.
func (gac *GoodArticleCreate) SetUserUID(s string) *GoodArticleCreate {
	gac.mutation.SetUserUID(s)
	return gac
}

// SetStatus sets the "status" field.
func (gac *GoodArticleCreate) SetStatus(s string) *GoodArticleCreate {
	gac.mutation.SetStatus(s)
	return gac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gac *GoodArticleCreate) SetNillableStatus(s *string) *GoodArticleCreate {
	if s != nil {
		gac.SetStatus(*s)
	}
	return gac
}

// SetCategoryUID sets the "category_uid" field.
func (gac *GoodArticleCreate) SetCategoryUID(s string) *GoodArticleCreate {
	gac.mutation.SetCategoryUID(s)
	return gac
}

// SetID sets the "id" field.
func (gac *GoodArticleCreate) SetID(u uint64) *GoodArticleCreate {
	gac.mutation.SetID(u)
	return gac
}

// Mutation returns the GoodArticleMutation object of the builder.
func (gac *GoodArticleCreate) Mutation() *GoodArticleMutation {
	return gac.mutation
}

// Save creates the GoodArticle in the database.
func (gac *GoodArticleCreate) Save(ctx context.Context) (*GoodArticle, error) {
	var (
		err  error
		node *GoodArticle
	)
	gac.defaults()
	if len(gac.hooks) == 0 {
		if err = gac.check(); err != nil {
			return nil, err
		}
		node, err = gac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodArticleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gac.check(); err != nil {
				return nil, err
			}
			gac.mutation = mutation
			if node, err = gac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gac.hooks) - 1; i >= 0; i-- {
			if gac.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = gac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gac *GoodArticleCreate) SaveX(ctx context.Context) *GoodArticle {
	v, err := gac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gac *GoodArticleCreate) Exec(ctx context.Context) error {
	_, err := gac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gac *GoodArticleCreate) ExecX(ctx context.Context) {
	if err := gac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gac *GoodArticleCreate) defaults() {
	if _, ok := gac.mutation.UID(); !ok {
		v := goodarticle.DefaultUID()
		gac.mutation.SetUID(v)
	}
	if _, ok := gac.mutation.CreatedAt(); !ok {
		v := goodarticle.DefaultCreatedAt()
		gac.mutation.SetCreatedAt(v)
	}
	if _, ok := gac.mutation.UpdatedAt(); !ok {
		v := goodarticle.DefaultUpdatedAt()
		gac.mutation.SetUpdatedAt(v)
	}
	if _, ok := gac.mutation.Star(); !ok {
		v := goodarticle.DefaultStar
		gac.mutation.SetStar(v)
	}
	if _, ok := gac.mutation.View(); !ok {
		v := goodarticle.DefaultView
		gac.mutation.SetView(v)
	}
	if _, ok := gac.mutation.Used(); !ok {
		v := goodarticle.DefaultUsed
		gac.mutation.SetUsed(v)
	}
	if _, ok := gac.mutation.Status(); !ok {
		v := goodarticle.DefaultStatus
		gac.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gac *GoodArticleCreate) check() error {
	if _, ok := gac.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "GoodArticle.uid"`)}
	}
	if v, ok := gac.mutation.UID(); ok {
		if err := goodarticle.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "GoodArticle.uid": %w`, err)}
		}
	}
	if _, ok := gac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "GoodArticle.created_at"`)}
	}
	if _, ok := gac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "GoodArticle.updated_at"`)}
	}
	if _, ok := gac.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`entschema: missing required field "GoodArticle.title"`)}
	}
	if _, ok := gac.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`entschema: missing required field "GoodArticle.source"`)}
	}
	if _, ok := gac.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`entschema: missing required field "GoodArticle.link"`)}
	}
	if _, ok := gac.mutation.Star(); !ok {
		return &ValidationError{Name: "star", err: errors.New(`entschema: missing required field "GoodArticle.star"`)}
	}
	if _, ok := gac.mutation.View(); !ok {
		return &ValidationError{Name: "view", err: errors.New(`entschema: missing required field "GoodArticle.view"`)}
	}
	if _, ok := gac.mutation.Used(); !ok {
		return &ValidationError{Name: "used", err: errors.New(`entschema: missing required field "GoodArticle.used"`)}
	}
	if _, ok := gac.mutation.UserUID(); !ok {
		return &ValidationError{Name: "user_uid", err: errors.New(`entschema: missing required field "GoodArticle.user_uid"`)}
	}
	if _, ok := gac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`entschema: missing required field "GoodArticle.status"`)}
	}
	if _, ok := gac.mutation.CategoryUID(); !ok {
		return &ValidationError{Name: "category_uid", err: errors.New(`entschema: missing required field "GoodArticle.category_uid"`)}
	}
	return nil
}

func (gac *GoodArticleCreate) sqlSave(ctx context.Context) (*GoodArticle, error) {
	_node, _spec := gac.createSpec()
	if err := sqlgraph.CreateNode(ctx, gac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (gac *GoodArticleCreate) createSpec() (*GoodArticle, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodArticle{config: gac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodarticle.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: goodarticle.FieldID,
			},
		}
	)
	_spec.OnConflict = gac.conflict
	if id, ok := gac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gac.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := gac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticle.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticle.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gac.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticle.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := gac.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := gac.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := gac.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := gac.mutation.Source(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldSource,
		})
		_node.Source = value
	}
	if value, ok := gac.mutation.Icon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldIcon,
		})
		_node.Icon = value
	}
	if value, ok := gac.mutation.Link(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldLink,
		})
		_node.Link = value
	}
	if value, ok := gac.mutation.Star(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodarticle.FieldStar,
		})
		_node.Star = value
	}
	if value, ok := gac.mutation.View(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodarticle.FieldView,
		})
		_node.View = value
	}
	if value, ok := gac.mutation.Used(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodarticle.FieldUsed,
		})
		_node.Used = value
	}
	if value, ok := gac.mutation.UserUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldUserUID,
		})
		_node.UserUID = value
	}
	if value, ok := gac.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := gac.mutation.CategoryUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticle.FieldCategoryUID,
		})
		_node.CategoryUID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodArticle.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodArticleUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (gac *GoodArticleCreate) OnConflict(opts ...sql.ConflictOption) *GoodArticleUpsertOne {
	gac.conflict = opts
	return &GoodArticleUpsertOne{
		create: gac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodArticle.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gac *GoodArticleCreate) OnConflictColumns(columns ...string) *GoodArticleUpsertOne {
	gac.conflict = append(gac.conflict, sql.ConflictColumns(columns...))
	return &GoodArticleUpsertOne{
		create: gac,
	}
}

type (
	// GoodArticleUpsertOne is the builder for "upsert"-ing
	//  one GoodArticle node.
	GoodArticleUpsertOne struct {
		create *GoodArticleCreate
	}

	// GoodArticleUpsert is the "OnConflict" setter.
	GoodArticleUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *GoodArticleUpsert) SetUID(v string) *GoodArticleUpsert {
	u.Set(goodarticle.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *GoodArticleUpsert) UpdateUID() *GoodArticleUpsert {
	u.SetExcluded(goodarticle.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodArticleUpsert) SetCreatedAt(v time.Time) *GoodArticleUpsert {
	u.Set(goodarticle.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodArticleUpsert) UpdateCreatedAt() *GoodArticleUpsert {
	u.SetExcluded(goodarticle.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodArticleUpsert) SetUpdatedAt(v time.Time) *GoodArticleUpsert {
	u.Set(goodarticle.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodArticleUpsert) UpdateUpdatedAt() *GoodArticleUpsert {
	u.SetExcluded(goodarticle.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *GoodArticleUpsert) SetDeactivatedAt(v time.Time) *GoodArticleUpsert {
	u.Set(goodarticle.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *GoodArticleUpsert) UpdateDeactivatedAt() *GoodArticleUpsert {
	u.SetExcluded(goodarticle.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *GoodArticleUpsert) ClearDeactivatedAt() *GoodArticleUpsert {
	u.SetNull(goodarticle.FieldDeactivatedAt)
	return u
}

// SetTitle sets the "title" field.
func (u *GoodArticleUpsert) SetTitle(v string) *GoodArticleUpsert {
	u.Set(goodarticle.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GoodArticleUpsert) UpdateTitle() *GoodArticleUpsert {
	u.SetExcluded(goodarticle.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *GoodArticleUpsert) SetDescription(v string) *GoodArticleUpsert {
	u.Set(goodarticle.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *GoodArticleUpsert) UpdateDescription() *GoodArticleUpsert {
	u.SetExcluded(goodarticle.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *GoodArticleUpsert) ClearDescription() *GoodArticleUpsert {
	u.SetNull(goodarticle.FieldDescription)
	return u
}

// SetImage sets the "image" field.
func (u *GoodArticleUpsert) SetImage(v string) *GoodArticleUpsert {
	u.Set(goodarticle.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *GoodArticleUpsert) UpdateImage() *GoodArticleUpsert {
	u.SetExcluded(goodarticle.FieldImage)
	return u
}

// ClearImage clears the value of the "image" field.
func (u *GoodArticleUpsert) ClearImage() *GoodArticleUpsert {
	u.SetNull(goodarticle.FieldImage)
	return u
}

// SetSource sets the "source" field.
func (u *GoodArticleUpsert) SetSource(v string) *GoodArticleUpsert {
	u.Set(goodarticle.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *GoodArticleUpsert) UpdateSource() *GoodArticleUpsert {
	u.SetExcluded(goodarticle.FieldSource)
	return u
}

// SetIcon sets the "icon" field.
func (u *GoodArticleUpsert) SetIcon(v string) *GoodArticleUpsert {
	u.Set(goodarticle.FieldIcon, v)
	return u
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *GoodArticleUpsert) UpdateIcon() *GoodArticleUpsert {
	u.SetExcluded(goodarticle.FieldIcon)
	return u
}

// ClearIcon clears the value of the "icon" field.
func (u *GoodArticleUpsert) ClearIcon() *GoodArticleUpsert {
	u.SetNull(goodarticle.FieldIcon)
	return u
}

// SetLink sets the "link" field.
func (u *GoodArticleUpsert) SetLink(v string) *GoodArticleUpsert {
	u.Set(goodarticle.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *GoodArticleUpsert) UpdateLink() *GoodArticleUpsert {
	u.SetExcluded(goodarticle.FieldLink)
	return u
}

// SetStar sets the "star" field.
func (u *GoodArticleUpsert) SetStar(v int) *GoodArticleUpsert {
	u.Set(goodarticle.FieldStar, v)
	return u
}

// UpdateStar sets the "star" field to the value that was provided on create.
func (u *GoodArticleUpsert) UpdateStar() *GoodArticleUpsert {
	u.SetExcluded(goodarticle.FieldStar)
	return u
}

// AddStar adds v to the "star" field.
func (u *GoodArticleUpsert) AddStar(v int) *GoodArticleUpsert {
	u.Add(goodarticle.FieldStar, v)
	return u
}

// SetView sets the "view" field.
func (u *GoodArticleUpsert) SetView(v int) *GoodArticleUpsert {
	u.Set(goodarticle.FieldView, v)
	return u
}

// UpdateView sets the "view" field to the value that was provided on create.
func (u *GoodArticleUpsert) UpdateView() *GoodArticleUpsert {
	u.SetExcluded(goodarticle.FieldView)
	return u
}

// AddView adds v to the "view" field.
func (u *GoodArticleUpsert) AddView(v int) *GoodArticleUpsert {
	u.Add(goodarticle.FieldView, v)
	return u
}

// SetUsed sets the "used" field.
func (u *GoodArticleUpsert) SetUsed(v int) *GoodArticleUpsert {
	u.Set(goodarticle.FieldUsed, v)
	return u
}

// UpdateUsed sets the "used" field to the value that was provided on create.
func (u *GoodArticleUpsert) UpdateUsed() *GoodArticleUpsert {
	u.SetExcluded(goodarticle.FieldUsed)
	return u
}

// AddUsed adds v to the "used" field.
func (u *GoodArticleUpsert) AddUsed(v int) *GoodArticleUpsert {
	u.Add(goodarticle.FieldUsed, v)
	return u
}

// SetUserUID sets the "user_uid" field.
func (u *GoodArticleUpsert) SetUserUID(v string) *GoodArticleUpsert {
	u.Set(goodarticle.FieldUserUID, v)
	return u
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *GoodArticleUpsert) UpdateUserUID() *GoodArticleUpsert {
	u.SetExcluded(goodarticle.FieldUserUID)
	return u
}

// SetStatus sets the "status" field.
func (u *GoodArticleUpsert) SetStatus(v string) *GoodArticleUpsert {
	u.Set(goodarticle.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GoodArticleUpsert) UpdateStatus() *GoodArticleUpsert {
	u.SetExcluded(goodarticle.FieldStatus)
	return u
}

// SetCategoryUID sets the "category_uid" field.
func (u *GoodArticleUpsert) SetCategoryUID(v string) *GoodArticleUpsert {
	u.Set(goodarticle.FieldCategoryUID, v)
	return u
}

// UpdateCategoryUID sets the "category_uid" field to the value that was provided on create.
func (u *GoodArticleUpsert) UpdateCategoryUID() *GoodArticleUpsert {
	u.SetExcluded(goodarticle.FieldCategoryUID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodArticle.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodarticle.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodArticleUpsertOne) UpdateNewValues() *GoodArticleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodarticle.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(goodarticle.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(goodarticle.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GoodArticle.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GoodArticleUpsertOne) Ignore() *GoodArticleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodArticleUpsertOne) DoNothing() *GoodArticleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodArticleCreate.OnConflict
// documentation for more info.
func (u *GoodArticleUpsertOne) Update(set func(*GoodArticleUpsert)) *GoodArticleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodArticleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *GoodArticleUpsertOne) SetUID(v string) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *GoodArticleUpsertOne) UpdateUID() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodArticleUpsertOne) SetCreatedAt(v time.Time) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodArticleUpsertOne) UpdateCreatedAt() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodArticleUpsertOne) SetUpdatedAt(v time.Time) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodArticleUpsertOne) UpdateUpdatedAt() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *GoodArticleUpsertOne) SetDeactivatedAt(v time.Time) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *GoodArticleUpsertOne) UpdateDeactivatedAt() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *GoodArticleUpsertOne) ClearDeactivatedAt() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetTitle sets the "title" field.
func (u *GoodArticleUpsertOne) SetTitle(v string) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GoodArticleUpsertOne) UpdateTitle() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *GoodArticleUpsertOne) SetDescription(v string) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *GoodArticleUpsertOne) UpdateDescription() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *GoodArticleUpsertOne) ClearDescription() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.ClearDescription()
	})
}

// SetImage sets the "image" field.
func (u *GoodArticleUpsertOne) SetImage(v string) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *GoodArticleUpsertOne) UpdateImage() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateImage()
	})
}

// ClearImage clears the value of the "image" field.
func (u *GoodArticleUpsertOne) ClearImage() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.ClearImage()
	})
}

// SetSource sets the "source" field.
func (u *GoodArticleUpsertOne) SetSource(v string) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *GoodArticleUpsertOne) UpdateSource() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateSource()
	})
}

// SetIcon sets the "icon" field.
func (u *GoodArticleUpsertOne) SetIcon(v string) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *GoodArticleUpsertOne) UpdateIcon() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateIcon()
	})
}

// ClearIcon clears the value of the "icon" field.
func (u *GoodArticleUpsertOne) ClearIcon() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.ClearIcon()
	})
}

// SetLink sets the "link" field.
func (u *GoodArticleUpsertOne) SetLink(v string) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *GoodArticleUpsertOne) UpdateLink() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateLink()
	})
}

// SetStar sets the "star" field.
func (u *GoodArticleUpsertOne) SetStar(v int) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetStar(v)
	})
}

// AddStar adds v to the "star" field.
func (u *GoodArticleUpsertOne) AddStar(v int) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.AddStar(v)
	})
}

// UpdateStar sets the "star" field to the value that was provided on create.
func (u *GoodArticleUpsertOne) UpdateStar() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateStar()
	})
}

// SetView sets the "view" field.
func (u *GoodArticleUpsertOne) SetView(v int) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetView(v)
	})
}

// AddView adds v to the "view" field.
func (u *GoodArticleUpsertOne) AddView(v int) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.AddView(v)
	})
}

// UpdateView sets the "view" field to the value that was provided on create.
func (u *GoodArticleUpsertOne) UpdateView() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateView()
	})
}

// SetUsed sets the "used" field.
func (u *GoodArticleUpsertOne) SetUsed(v int) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetUsed(v)
	})
}

// AddUsed adds v to the "used" field.
func (u *GoodArticleUpsertOne) AddUsed(v int) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.AddUsed(v)
	})
}

// UpdateUsed sets the "used" field to the value that was provided on create.
func (u *GoodArticleUpsertOne) UpdateUsed() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateUsed()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *GoodArticleUpsertOne) SetUserUID(v string) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *GoodArticleUpsertOne) UpdateUserUID() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateUserUID()
	})
}

// SetStatus sets the "status" field.
func (u *GoodArticleUpsertOne) SetStatus(v string) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GoodArticleUpsertOne) UpdateStatus() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateStatus()
	})
}

// SetCategoryUID sets the "category_uid" field.
func (u *GoodArticleUpsertOne) SetCategoryUID(v string) *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetCategoryUID(v)
	})
}

// UpdateCategoryUID sets the "category_uid" field to the value that was provided on create.
func (u *GoodArticleUpsertOne) UpdateCategoryUID() *GoodArticleUpsertOne {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateCategoryUID()
	})
}

// Exec executes the query.
func (u *GoodArticleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for GoodArticleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodArticleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodArticleUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodArticleUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodArticleCreateBulk is the builder for creating many GoodArticle entities in bulk.
type GoodArticleCreateBulk struct {
	config
	builders []*GoodArticleCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodArticle entities in the database.
func (gacb *GoodArticleCreateBulk) Save(ctx context.Context) ([]*GoodArticle, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gacb.builders))
	nodes := make([]*GoodArticle, len(gacb.builders))
	mutators := make([]Mutator, len(gacb.builders))
	for i := range gacb.builders {
		func(i int, root context.Context) {
			builder := gacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodArticleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gacb *GoodArticleCreateBulk) SaveX(ctx context.Context) []*GoodArticle {
	v, err := gacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gacb *GoodArticleCreateBulk) Exec(ctx context.Context) error {
	_, err := gacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gacb *GoodArticleCreateBulk) ExecX(ctx context.Context) {
	if err := gacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodArticle.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodArticleUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (gacb *GoodArticleCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodArticleUpsertBulk {
	gacb.conflict = opts
	return &GoodArticleUpsertBulk{
		create: gacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodArticle.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gacb *GoodArticleCreateBulk) OnConflictColumns(columns ...string) *GoodArticleUpsertBulk {
	gacb.conflict = append(gacb.conflict, sql.ConflictColumns(columns...))
	return &GoodArticleUpsertBulk{
		create: gacb,
	}
}

// GoodArticleUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodArticle nodes.
type GoodArticleUpsertBulk struct {
	create *GoodArticleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodArticle.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodarticle.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodArticleUpsertBulk) UpdateNewValues() *GoodArticleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodarticle.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(goodarticle.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(goodarticle.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodArticle.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GoodArticleUpsertBulk) Ignore() *GoodArticleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodArticleUpsertBulk) DoNothing() *GoodArticleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodArticleCreateBulk.OnConflict
// documentation for more info.
func (u *GoodArticleUpsertBulk) Update(set func(*GoodArticleUpsert)) *GoodArticleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodArticleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *GoodArticleUpsertBulk) SetUID(v string) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *GoodArticleUpsertBulk) UpdateUID() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodArticleUpsertBulk) SetCreatedAt(v time.Time) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodArticleUpsertBulk) UpdateCreatedAt() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodArticleUpsertBulk) SetUpdatedAt(v time.Time) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodArticleUpsertBulk) UpdateUpdatedAt() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *GoodArticleUpsertBulk) SetDeactivatedAt(v time.Time) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *GoodArticleUpsertBulk) UpdateDeactivatedAt() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *GoodArticleUpsertBulk) ClearDeactivatedAt() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetTitle sets the "title" field.
func (u *GoodArticleUpsertBulk) SetTitle(v string) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GoodArticleUpsertBulk) UpdateTitle() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *GoodArticleUpsertBulk) SetDescription(v string) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *GoodArticleUpsertBulk) UpdateDescription() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *GoodArticleUpsertBulk) ClearDescription() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.ClearDescription()
	})
}

// SetImage sets the "image" field.
func (u *GoodArticleUpsertBulk) SetImage(v string) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *GoodArticleUpsertBulk) UpdateImage() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateImage()
	})
}

// ClearImage clears the value of the "image" field.
func (u *GoodArticleUpsertBulk) ClearImage() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.ClearImage()
	})
}

// SetSource sets the "source" field.
func (u *GoodArticleUpsertBulk) SetSource(v string) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *GoodArticleUpsertBulk) UpdateSource() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateSource()
	})
}

// SetIcon sets the "icon" field.
func (u *GoodArticleUpsertBulk) SetIcon(v string) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *GoodArticleUpsertBulk) UpdateIcon() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateIcon()
	})
}

// ClearIcon clears the value of the "icon" field.
func (u *GoodArticleUpsertBulk) ClearIcon() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.ClearIcon()
	})
}

// SetLink sets the "link" field.
func (u *GoodArticleUpsertBulk) SetLink(v string) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *GoodArticleUpsertBulk) UpdateLink() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateLink()
	})
}

// SetStar sets the "star" field.
func (u *GoodArticleUpsertBulk) SetStar(v int) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetStar(v)
	})
}

// AddStar adds v to the "star" field.
func (u *GoodArticleUpsertBulk) AddStar(v int) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.AddStar(v)
	})
}

// UpdateStar sets the "star" field to the value that was provided on create.
func (u *GoodArticleUpsertBulk) UpdateStar() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateStar()
	})
}

// SetView sets the "view" field.
func (u *GoodArticleUpsertBulk) SetView(v int) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetView(v)
	})
}

// AddView adds v to the "view" field.
func (u *GoodArticleUpsertBulk) AddView(v int) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.AddView(v)
	})
}

// UpdateView sets the "view" field to the value that was provided on create.
func (u *GoodArticleUpsertBulk) UpdateView() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateView()
	})
}

// SetUsed sets the "used" field.
func (u *GoodArticleUpsertBulk) SetUsed(v int) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetUsed(v)
	})
}

// AddUsed adds v to the "used" field.
func (u *GoodArticleUpsertBulk) AddUsed(v int) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.AddUsed(v)
	})
}

// UpdateUsed sets the "used" field to the value that was provided on create.
func (u *GoodArticleUpsertBulk) UpdateUsed() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateUsed()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *GoodArticleUpsertBulk) SetUserUID(v string) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *GoodArticleUpsertBulk) UpdateUserUID() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateUserUID()
	})
}

// SetStatus sets the "status" field.
func (u *GoodArticleUpsertBulk) SetStatus(v string) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GoodArticleUpsertBulk) UpdateStatus() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateStatus()
	})
}

// SetCategoryUID sets the "category_uid" field.
func (u *GoodArticleUpsertBulk) SetCategoryUID(v string) *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.SetCategoryUID(v)
	})
}

// UpdateCategoryUID sets the "category_uid" field to the value that was provided on create.
func (u *GoodArticleUpsertBulk) UpdateCategoryUID() *GoodArticleUpsertBulk {
	return u.Update(func(s *GoodArticleUpsert) {
		s.UpdateCategoryUID()
	})
}

// Exec executes the query.
func (u *GoodArticleUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the GoodArticleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for GoodArticleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodArticleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
