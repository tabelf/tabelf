// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/goodarticlemeta"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GoodArticleMetaCreate is the builder for creating a GoodArticleMeta entity.
type GoodArticleMetaCreate struct {
	config
	mutation *GoodArticleMetaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (gamc *GoodArticleMetaCreate) SetUID(s string) *GoodArticleMetaCreate {
	gamc.mutation.SetUID(s)
	return gamc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (gamc *GoodArticleMetaCreate) SetNillableUID(s *string) *GoodArticleMetaCreate {
	if s != nil {
		gamc.SetUID(*s)
	}
	return gamc
}

// SetCreatedAt sets the "created_at" field.
func (gamc *GoodArticleMetaCreate) SetCreatedAt(t time.Time) *GoodArticleMetaCreate {
	gamc.mutation.SetCreatedAt(t)
	return gamc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gamc *GoodArticleMetaCreate) SetNillableCreatedAt(t *time.Time) *GoodArticleMetaCreate {
	if t != nil {
		gamc.SetCreatedAt(*t)
	}
	return gamc
}

// SetUpdatedAt sets the "updated_at" field.
func (gamc *GoodArticleMetaCreate) SetUpdatedAt(t time.Time) *GoodArticleMetaCreate {
	gamc.mutation.SetUpdatedAt(t)
	return gamc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gamc *GoodArticleMetaCreate) SetNillableUpdatedAt(t *time.Time) *GoodArticleMetaCreate {
	if t != nil {
		gamc.SetUpdatedAt(*t)
	}
	return gamc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (gamc *GoodArticleMetaCreate) SetDeactivatedAt(t time.Time) *GoodArticleMetaCreate {
	gamc.mutation.SetDeactivatedAt(t)
	return gamc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (gamc *GoodArticleMetaCreate) SetNillableDeactivatedAt(t *time.Time) *GoodArticleMetaCreate {
	if t != nil {
		gamc.SetDeactivatedAt(*t)
	}
	return gamc
}

// SetArticleUID sets the "article_uid" field.
func (gamc *GoodArticleMetaCreate) SetArticleUID(s string) *GoodArticleMetaCreate {
	gamc.mutation.SetArticleUID(s)
	return gamc
}

// SetUserUID sets the "user_uid" field.
func (gamc *GoodArticleMetaCreate) SetUserUID(s string) *GoodArticleMetaCreate {
	gamc.mutation.SetUserUID(s)
	return gamc
}

// SetHasStar sets the "has_star" field.
func (gamc *GoodArticleMetaCreate) SetHasStar(b bool) *GoodArticleMetaCreate {
	gamc.mutation.SetHasStar(b)
	return gamc
}

// SetNillableHasStar sets the "has_star" field if the given value is not nil.
func (gamc *GoodArticleMetaCreate) SetNillableHasStar(b *bool) *GoodArticleMetaCreate {
	if b != nil {
		gamc.SetHasStar(*b)
	}
	return gamc
}

// SetHasView sets the "has_view" field.
func (gamc *GoodArticleMetaCreate) SetHasView(b bool) *GoodArticleMetaCreate {
	gamc.mutation.SetHasView(b)
	return gamc
}

// SetNillableHasView sets the "has_view" field if the given value is not nil.
func (gamc *GoodArticleMetaCreate) SetNillableHasView(b *bool) *GoodArticleMetaCreate {
	if b != nil {
		gamc.SetHasView(*b)
	}
	return gamc
}

// SetHasUsed sets the "has_used" field.
func (gamc *GoodArticleMetaCreate) SetHasUsed(b bool) *GoodArticleMetaCreate {
	gamc.mutation.SetHasUsed(b)
	return gamc
}

// SetNillableHasUsed sets the "has_used" field if the given value is not nil.
func (gamc *GoodArticleMetaCreate) SetNillableHasUsed(b *bool) *GoodArticleMetaCreate {
	if b != nil {
		gamc.SetHasUsed(*b)
	}
	return gamc
}

// SetID sets the "id" field.
func (gamc *GoodArticleMetaCreate) SetID(u uint64) *GoodArticleMetaCreate {
	gamc.mutation.SetID(u)
	return gamc
}

// Mutation returns the GoodArticleMetaMutation object of the builder.
func (gamc *GoodArticleMetaCreate) Mutation() *GoodArticleMetaMutation {
	return gamc.mutation
}

// Save creates the GoodArticleMeta in the database.
func (gamc *GoodArticleMetaCreate) Save(ctx context.Context) (*GoodArticleMeta, error) {
	var (
		err  error
		node *GoodArticleMeta
	)
	gamc.defaults()
	if len(gamc.hooks) == 0 {
		if err = gamc.check(); err != nil {
			return nil, err
		}
		node, err = gamc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodArticleMetaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gamc.check(); err != nil {
				return nil, err
			}
			gamc.mutation = mutation
			if node, err = gamc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gamc.hooks) - 1; i >= 0; i-- {
			if gamc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = gamc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gamc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gamc *GoodArticleMetaCreate) SaveX(ctx context.Context) *GoodArticleMeta {
	v, err := gamc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gamc *GoodArticleMetaCreate) Exec(ctx context.Context) error {
	_, err := gamc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gamc *GoodArticleMetaCreate) ExecX(ctx context.Context) {
	if err := gamc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gamc *GoodArticleMetaCreate) defaults() {
	if _, ok := gamc.mutation.UID(); !ok {
		v := goodarticlemeta.DefaultUID()
		gamc.mutation.SetUID(v)
	}
	if _, ok := gamc.mutation.CreatedAt(); !ok {
		v := goodarticlemeta.DefaultCreatedAt()
		gamc.mutation.SetCreatedAt(v)
	}
	if _, ok := gamc.mutation.UpdatedAt(); !ok {
		v := goodarticlemeta.DefaultUpdatedAt()
		gamc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gamc.mutation.HasStar(); !ok {
		v := goodarticlemeta.DefaultHasStar
		gamc.mutation.SetHasStar(v)
	}
	if _, ok := gamc.mutation.HasView(); !ok {
		v := goodarticlemeta.DefaultHasView
		gamc.mutation.SetHasView(v)
	}
	if _, ok := gamc.mutation.HasUsed(); !ok {
		v := goodarticlemeta.DefaultHasUsed
		gamc.mutation.SetHasUsed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gamc *GoodArticleMetaCreate) check() error {
	if _, ok := gamc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "GoodArticleMeta.uid"`)}
	}
	if v, ok := gamc.mutation.UID(); ok {
		if err := goodarticlemeta.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "GoodArticleMeta.uid": %w`, err)}
		}
	}
	if _, ok := gamc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "GoodArticleMeta.created_at"`)}
	}
	if _, ok := gamc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "GoodArticleMeta.updated_at"`)}
	}
	if _, ok := gamc.mutation.ArticleUID(); !ok {
		return &ValidationError{Name: "article_uid", err: errors.New(`entschema: missing required field "GoodArticleMeta.article_uid"`)}
	}
	if _, ok := gamc.mutation.UserUID(); !ok {
		return &ValidationError{Name: "user_uid", err: errors.New(`entschema: missing required field "GoodArticleMeta.user_uid"`)}
	}
	if _, ok := gamc.mutation.HasStar(); !ok {
		return &ValidationError{Name: "has_star", err: errors.New(`entschema: missing required field "GoodArticleMeta.has_star"`)}
	}
	if _, ok := gamc.mutation.HasView(); !ok {
		return &ValidationError{Name: "has_view", err: errors.New(`entschema: missing required field "GoodArticleMeta.has_view"`)}
	}
	if _, ok := gamc.mutation.HasUsed(); !ok {
		return &ValidationError{Name: "has_used", err: errors.New(`entschema: missing required field "GoodArticleMeta.has_used"`)}
	}
	return nil
}

func (gamc *GoodArticleMetaCreate) sqlSave(ctx context.Context) (*GoodArticleMeta, error) {
	_node, _spec := gamc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gamc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (gamc *GoodArticleMetaCreate) createSpec() (*GoodArticleMeta, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodArticleMeta{config: gamc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodarticlemeta.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: goodarticlemeta.FieldID,
			},
		}
	)
	_spec.OnConflict = gamc.conflict
	if id, ok := gamc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gamc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticlemeta.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := gamc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlemeta.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gamc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlemeta.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gamc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlemeta.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := gamc.mutation.ArticleUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticlemeta.FieldArticleUID,
		})
		_node.ArticleUID = value
	}
	if value, ok := gamc.mutation.UserUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticlemeta.FieldUserUID,
		})
		_node.UserUID = value
	}
	if value, ok := gamc.mutation.HasStar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodarticlemeta.FieldHasStar,
		})
		_node.HasStar = value
	}
	if value, ok := gamc.mutation.HasView(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodarticlemeta.FieldHasView,
		})
		_node.HasView = value
	}
	if value, ok := gamc.mutation.HasUsed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodarticlemeta.FieldHasUsed,
		})
		_node.HasUsed = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodArticleMeta.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodArticleMetaUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (gamc *GoodArticleMetaCreate) OnConflict(opts ...sql.ConflictOption) *GoodArticleMetaUpsertOne {
	gamc.conflict = opts
	return &GoodArticleMetaUpsertOne{
		create: gamc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodArticleMeta.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gamc *GoodArticleMetaCreate) OnConflictColumns(columns ...string) *GoodArticleMetaUpsertOne {
	gamc.conflict = append(gamc.conflict, sql.ConflictColumns(columns...))
	return &GoodArticleMetaUpsertOne{
		create: gamc,
	}
}

type (
	// GoodArticleMetaUpsertOne is the builder for "upsert"-ing
	//  one GoodArticleMeta node.
	GoodArticleMetaUpsertOne struct {
		create *GoodArticleMetaCreate
	}

	// GoodArticleMetaUpsert is the "OnConflict" setter.
	GoodArticleMetaUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *GoodArticleMetaUpsert) SetUID(v string) *GoodArticleMetaUpsert {
	u.Set(goodarticlemeta.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *GoodArticleMetaUpsert) UpdateUID() *GoodArticleMetaUpsert {
	u.SetExcluded(goodarticlemeta.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodArticleMetaUpsert) SetCreatedAt(v time.Time) *GoodArticleMetaUpsert {
	u.Set(goodarticlemeta.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodArticleMetaUpsert) UpdateCreatedAt() *GoodArticleMetaUpsert {
	u.SetExcluded(goodarticlemeta.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodArticleMetaUpsert) SetUpdatedAt(v time.Time) *GoodArticleMetaUpsert {
	u.Set(goodarticlemeta.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodArticleMetaUpsert) UpdateUpdatedAt() *GoodArticleMetaUpsert {
	u.SetExcluded(goodarticlemeta.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *GoodArticleMetaUpsert) SetDeactivatedAt(v time.Time) *GoodArticleMetaUpsert {
	u.Set(goodarticlemeta.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *GoodArticleMetaUpsert) UpdateDeactivatedAt() *GoodArticleMetaUpsert {
	u.SetExcluded(goodarticlemeta.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *GoodArticleMetaUpsert) ClearDeactivatedAt() *GoodArticleMetaUpsert {
	u.SetNull(goodarticlemeta.FieldDeactivatedAt)
	return u
}

// SetArticleUID sets the "article_uid" field.
func (u *GoodArticleMetaUpsert) SetArticleUID(v string) *GoodArticleMetaUpsert {
	u.Set(goodarticlemeta.FieldArticleUID, v)
	return u
}

// UpdateArticleUID sets the "article_uid" field to the value that was provided on create.
func (u *GoodArticleMetaUpsert) UpdateArticleUID() *GoodArticleMetaUpsert {
	u.SetExcluded(goodarticlemeta.FieldArticleUID)
	return u
}

// SetUserUID sets the "user_uid" field.
func (u *GoodArticleMetaUpsert) SetUserUID(v string) *GoodArticleMetaUpsert {
	u.Set(goodarticlemeta.FieldUserUID, v)
	return u
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *GoodArticleMetaUpsert) UpdateUserUID() *GoodArticleMetaUpsert {
	u.SetExcluded(goodarticlemeta.FieldUserUID)
	return u
}

// SetHasStar sets the "has_star" field.
func (u *GoodArticleMetaUpsert) SetHasStar(v bool) *GoodArticleMetaUpsert {
	u.Set(goodarticlemeta.FieldHasStar, v)
	return u
}

// UpdateHasStar sets the "has_star" field to the value that was provided on create.
func (u *GoodArticleMetaUpsert) UpdateHasStar() *GoodArticleMetaUpsert {
	u.SetExcluded(goodarticlemeta.FieldHasStar)
	return u
}

// SetHasView sets the "has_view" field.
func (u *GoodArticleMetaUpsert) SetHasView(v bool) *GoodArticleMetaUpsert {
	u.Set(goodarticlemeta.FieldHasView, v)
	return u
}

// UpdateHasView sets the "has_view" field to the value that was provided on create.
func (u *GoodArticleMetaUpsert) UpdateHasView() *GoodArticleMetaUpsert {
	u.SetExcluded(goodarticlemeta.FieldHasView)
	return u
}

// SetHasUsed sets the "has_used" field.
func (u *GoodArticleMetaUpsert) SetHasUsed(v bool) *GoodArticleMetaUpsert {
	u.Set(goodarticlemeta.FieldHasUsed, v)
	return u
}

// UpdateHasUsed sets the "has_used" field to the value that was provided on create.
func (u *GoodArticleMetaUpsert) UpdateHasUsed() *GoodArticleMetaUpsert {
	u.SetExcluded(goodarticlemeta.FieldHasUsed)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodArticleMeta.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodarticlemeta.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodArticleMetaUpsertOne) UpdateNewValues() *GoodArticleMetaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodarticlemeta.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(goodarticlemeta.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(goodarticlemeta.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GoodArticleMeta.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GoodArticleMetaUpsertOne) Ignore() *GoodArticleMetaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodArticleMetaUpsertOne) DoNothing() *GoodArticleMetaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodArticleMetaCreate.OnConflict
// documentation for more info.
func (u *GoodArticleMetaUpsertOne) Update(set func(*GoodArticleMetaUpsert)) *GoodArticleMetaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodArticleMetaUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *GoodArticleMetaUpsertOne) SetUID(v string) *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertOne) UpdateUID() *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodArticleMetaUpsertOne) SetCreatedAt(v time.Time) *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertOne) UpdateCreatedAt() *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodArticleMetaUpsertOne) SetUpdatedAt(v time.Time) *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertOne) UpdateUpdatedAt() *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *GoodArticleMetaUpsertOne) SetDeactivatedAt(v time.Time) *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertOne) UpdateDeactivatedAt() *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *GoodArticleMetaUpsertOne) ClearDeactivatedAt() *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetArticleUID sets the "article_uid" field.
func (u *GoodArticleMetaUpsertOne) SetArticleUID(v string) *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetArticleUID(v)
	})
}

// UpdateArticleUID sets the "article_uid" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertOne) UpdateArticleUID() *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateArticleUID()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *GoodArticleMetaUpsertOne) SetUserUID(v string) *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertOne) UpdateUserUID() *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateUserUID()
	})
}

// SetHasStar sets the "has_star" field.
func (u *GoodArticleMetaUpsertOne) SetHasStar(v bool) *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetHasStar(v)
	})
}

// UpdateHasStar sets the "has_star" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertOne) UpdateHasStar() *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateHasStar()
	})
}

// SetHasView sets the "has_view" field.
func (u *GoodArticleMetaUpsertOne) SetHasView(v bool) *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetHasView(v)
	})
}

// UpdateHasView sets the "has_view" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertOne) UpdateHasView() *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateHasView()
	})
}

// SetHasUsed sets the "has_used" field.
func (u *GoodArticleMetaUpsertOne) SetHasUsed(v bool) *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetHasUsed(v)
	})
}

// UpdateHasUsed sets the "has_used" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertOne) UpdateHasUsed() *GoodArticleMetaUpsertOne {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateHasUsed()
	})
}

// Exec executes the query.
func (u *GoodArticleMetaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for GoodArticleMetaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodArticleMetaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodArticleMetaUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodArticleMetaUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodArticleMetaCreateBulk is the builder for creating many GoodArticleMeta entities in bulk.
type GoodArticleMetaCreateBulk struct {
	config
	builders []*GoodArticleMetaCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodArticleMeta entities in the database.
func (gamcb *GoodArticleMetaCreateBulk) Save(ctx context.Context) ([]*GoodArticleMeta, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gamcb.builders))
	nodes := make([]*GoodArticleMeta, len(gamcb.builders))
	mutators := make([]Mutator, len(gamcb.builders))
	for i := range gamcb.builders {
		func(i int, root context.Context) {
			builder := gamcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodArticleMetaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gamcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gamcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gamcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gamcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gamcb *GoodArticleMetaCreateBulk) SaveX(ctx context.Context) []*GoodArticleMeta {
	v, err := gamcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gamcb *GoodArticleMetaCreateBulk) Exec(ctx context.Context) error {
	_, err := gamcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gamcb *GoodArticleMetaCreateBulk) ExecX(ctx context.Context) {
	if err := gamcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodArticleMeta.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodArticleMetaUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (gamcb *GoodArticleMetaCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodArticleMetaUpsertBulk {
	gamcb.conflict = opts
	return &GoodArticleMetaUpsertBulk{
		create: gamcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodArticleMeta.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gamcb *GoodArticleMetaCreateBulk) OnConflictColumns(columns ...string) *GoodArticleMetaUpsertBulk {
	gamcb.conflict = append(gamcb.conflict, sql.ConflictColumns(columns...))
	return &GoodArticleMetaUpsertBulk{
		create: gamcb,
	}
}

// GoodArticleMetaUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodArticleMeta nodes.
type GoodArticleMetaUpsertBulk struct {
	create *GoodArticleMetaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodArticleMeta.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodarticlemeta.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodArticleMetaUpsertBulk) UpdateNewValues() *GoodArticleMetaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodarticlemeta.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(goodarticlemeta.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(goodarticlemeta.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodArticleMeta.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GoodArticleMetaUpsertBulk) Ignore() *GoodArticleMetaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodArticleMetaUpsertBulk) DoNothing() *GoodArticleMetaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodArticleMetaCreateBulk.OnConflict
// documentation for more info.
func (u *GoodArticleMetaUpsertBulk) Update(set func(*GoodArticleMetaUpsert)) *GoodArticleMetaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodArticleMetaUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *GoodArticleMetaUpsertBulk) SetUID(v string) *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertBulk) UpdateUID() *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodArticleMetaUpsertBulk) SetCreatedAt(v time.Time) *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertBulk) UpdateCreatedAt() *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodArticleMetaUpsertBulk) SetUpdatedAt(v time.Time) *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertBulk) UpdateUpdatedAt() *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *GoodArticleMetaUpsertBulk) SetDeactivatedAt(v time.Time) *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertBulk) UpdateDeactivatedAt() *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *GoodArticleMetaUpsertBulk) ClearDeactivatedAt() *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetArticleUID sets the "article_uid" field.
func (u *GoodArticleMetaUpsertBulk) SetArticleUID(v string) *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetArticleUID(v)
	})
}

// UpdateArticleUID sets the "article_uid" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertBulk) UpdateArticleUID() *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateArticleUID()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *GoodArticleMetaUpsertBulk) SetUserUID(v string) *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertBulk) UpdateUserUID() *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateUserUID()
	})
}

// SetHasStar sets the "has_star" field.
func (u *GoodArticleMetaUpsertBulk) SetHasStar(v bool) *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetHasStar(v)
	})
}

// UpdateHasStar sets the "has_star" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertBulk) UpdateHasStar() *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateHasStar()
	})
}

// SetHasView sets the "has_view" field.
func (u *GoodArticleMetaUpsertBulk) SetHasView(v bool) *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetHasView(v)
	})
}

// UpdateHasView sets the "has_view" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertBulk) UpdateHasView() *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateHasView()
	})
}

// SetHasUsed sets the "has_used" field.
func (u *GoodArticleMetaUpsertBulk) SetHasUsed(v bool) *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.SetHasUsed(v)
	})
}

// UpdateHasUsed sets the "has_used" field to the value that was provided on create.
func (u *GoodArticleMetaUpsertBulk) UpdateHasUsed() *GoodArticleMetaUpsertBulk {
	return u.Update(func(s *GoodArticleMetaUpsert) {
		s.UpdateHasUsed()
	})
}

// Exec executes the query.
func (u *GoodArticleMetaUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the GoodArticleMetaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for GoodArticleMetaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodArticleMetaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
