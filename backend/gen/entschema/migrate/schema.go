// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountColumns holds the columns for the "account" table.
	AccountColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "phone", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "nickname", Type: field.TypeString, Nullable: true},
		{Name: "sex", Type: field.TypeInt, Default: 0},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "wx_openid", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "image", Type: field.TypeString, Nullable: true},
		{Name: "industry", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "address", Type: field.TypeJSON, Nullable: true},
		{Name: "auth_code", Type: field.TypeString, Unique: true},
		{Name: "auth_expired", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "url_count", Type: field.TypeInt, Default: 0},
		{Name: "url_limit", Type: field.TypeInt, Default: 30},
		{Name: "member_type", Type: field.TypeString, Default: "0"},
		{Name: "member_expired", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "has_entire", Type: field.TypeBool, Default: false},
		{Name: "has_new", Type: field.TypeBool, Default: true},
		{Name: "has_admin", Type: field.TypeBool, Default: false},
		{Name: "fans", Type: field.TypeInt, Default: 0},
		{Name: "focus", Type: field.TypeInt, Default: 0},
	}
	// AccountTable holds the schema information for the "account" table.
	AccountTable = &schema.Table{
		Name:       "account",
		Columns:    AccountColumns,
		PrimaryKey: []*schema.Column{AccountColumns[0]},
	}
	// AdminColumns holds the columns for the "admin" table.
	AdminColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "user_uid", Type: field.TypeString},
	}
	// AdminTable holds the schema information for the "admin" table.
	AdminTable = &schema.Table{
		Name:       "admin",
		Columns:    AdminColumns,
		PrimaryKey: []*schema.Column{AdminColumns[0]},
	}
	// CollaborationColumns holds the columns for the "collaboration" table.
	CollaborationColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "shard_uid", Type: field.TypeString},
		{Name: "folder_uid", Type: field.TypeString},
		{Name: "user_uid", Type: field.TypeString},
		{Name: "authority", Type: field.TypeString},
		{Name: "folder_number", Type: field.TypeString, Size: 8},
	}
	// CollaborationTable holds the schema information for the "collaboration" table.
	CollaborationTable = &schema.Table{
		Name:       "collaboration",
		Columns:    CollaborationColumns,
		PrimaryKey: []*schema.Column{CollaborationColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "collaboration_shard_uid",
				Unique:  false,
				Columns: []*schema.Column{CollaborationColumns[5]},
			},
			{
				Name:    "collaboration_folder_uid",
				Unique:  false,
				Columns: []*schema.Column{CollaborationColumns[6]},
			},
			{
				Name:    "collaboration_folder_number",
				Unique:  false,
				Columns: []*schema.Column{CollaborationColumns[9]},
			},
		},
	}
	// CommunityColumns holds the columns for the "community" table.
	CommunityColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "image", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "praise", Type: field.TypeInt, Default: 0},
		{Name: "star", Type: field.TypeInt, Default: 0},
		{Name: "view", Type: field.TypeInt, Default: 0},
		{Name: "used", Type: field.TypeInt, Default: 0},
		{Name: "folder_uid", Type: field.TypeString},
		{Name: "user_uid", Type: field.TypeString},
		{Name: "status", Type: field.TypeString, Default: "0"},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "category_uid", Type: field.TypeString},
	}
	// CommunityTable holds the schema information for the "community" table.
	CommunityTable = &schema.Table{
		Name:       "community",
		Columns:    CommunityColumns,
		PrimaryKey: []*schema.Column{CommunityColumns[0]},
	}
	// CommunityCategoryColumns holds the columns for the "community_category" table.
	CommunityCategoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "name", Type: field.TypeString},
		{Name: "status", Type: field.TypeBool, Default: true},
		{Name: "sequence", Type: field.TypeInt},
	}
	// CommunityCategoryTable holds the schema information for the "community_category" table.
	CommunityCategoryTable = &schema.Table{
		Name:       "community_category",
		Columns:    CommunityCategoryColumns,
		PrimaryKey: []*schema.Column{CommunityCategoryColumns[0]},
	}
	// CommunityMetaColumns holds the columns for the "community_meta" table.
	CommunityMetaColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "community_uid", Type: field.TypeString},
		{Name: "user_uid", Type: field.TypeString},
		{Name: "has_praise", Type: field.TypeBool, Default: false},
		{Name: "has_star", Type: field.TypeBool, Default: false},
		{Name: "has_view", Type: field.TypeBool, Default: false},
		{Name: "has_used", Type: field.TypeBool, Default: false},
	}
	// CommunityMetaTable holds the schema information for the "community_meta" table.
	CommunityMetaTable = &schema.Table{
		Name:       "community_meta",
		Columns:    CommunityMetaColumns,
		PrimaryKey: []*schema.Column{CommunityMetaColumns[0]},
	}
	// FeedbackColumns holds the columns for the "feedback" table.
	FeedbackColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "user_uid", Type: field.TypeString},
		{Name: "category", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
	}
	// FeedbackTable holds the schema information for the "feedback" table.
	FeedbackTable = &schema.Table{
		Name:       "feedback",
		Columns:    FeedbackColumns,
		PrimaryKey: []*schema.Column{FeedbackColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "feedback_user_uid",
				Unique:  false,
				Columns: []*schema.Column{FeedbackColumns[5]},
			},
		},
	}
	// FocusColumns holds the columns for the "focus" table.
	FocusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "follower_uid", Type: field.TypeString},
		{Name: "followee_uid", Type: field.TypeString},
		{Name: "status", Type: field.TypeBool, Default: false},
	}
	// FocusTable holds the schema information for the "focus" table.
	FocusTable = &schema.Table{
		Name:       "focus",
		Columns:    FocusColumns,
		PrimaryKey: []*schema.Column{FocusColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "focus_follower_uid",
				Unique:  false,
				Columns: []*schema.Column{FocusColumns[5]},
			},
			{
				Name:    "focus_followee_uid",
				Unique:  false,
				Columns: []*schema.Column{FocusColumns[6]},
			},
		},
	}
	// GoodArticleColumns holds the columns for the "good_article" table.
	GoodArticleColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(500)"}},
		{Name: "image", Type: field.TypeString, Nullable: true},
		{Name: "source", Type: field.TypeString},
		{Name: "icon", Type: field.TypeString, Nullable: true},
		{Name: "link", Type: field.TypeString},
		{Name: "star", Type: field.TypeInt, Default: 0},
		{Name: "view", Type: field.TypeInt, Default: 0},
		{Name: "used", Type: field.TypeInt, Default: 0},
		{Name: "user_uid", Type: field.TypeString},
		{Name: "status", Type: field.TypeString, Default: "0"},
		{Name: "category_uid", Type: field.TypeString},
	}
	// GoodArticleTable holds the schema information for the "good_article" table.
	GoodArticleTable = &schema.Table{
		Name:       "good_article",
		Columns:    GoodArticleColumns,
		PrimaryKey: []*schema.Column{GoodArticleColumns[0]},
	}
	// GoodArticleCategoryColumns holds the columns for the "good_article_category" table.
	GoodArticleCategoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "name", Type: field.TypeString},
		{Name: "status", Type: field.TypeBool, Default: true},
		{Name: "sequence", Type: field.TypeInt},
	}
	// GoodArticleCategoryTable holds the schema information for the "good_article_category" table.
	GoodArticleCategoryTable = &schema.Table{
		Name:       "good_article_category",
		Columns:    GoodArticleCategoryColumns,
		PrimaryKey: []*schema.Column{GoodArticleCategoryColumns[0]},
	}
	// GoodArticleHotColumns holds the columns for the "good_article_hot" table.
	GoodArticleHotColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "article_uid", Type: field.TypeString},
		{Name: "has_expired", Type: field.TypeBool, Default: false},
	}
	// GoodArticleHotTable holds the schema information for the "good_article_hot" table.
	GoodArticleHotTable = &schema.Table{
		Name:       "good_article_hot",
		Columns:    GoodArticleHotColumns,
		PrimaryKey: []*schema.Column{GoodArticleHotColumns[0]},
	}
	// GoodArticleMetaColumns holds the columns for the "good_article_meta" table.
	GoodArticleMetaColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "article_uid", Type: field.TypeString},
		{Name: "user_uid", Type: field.TypeString},
		{Name: "has_star", Type: field.TypeBool, Default: false},
		{Name: "has_view", Type: field.TypeBool, Default: false},
		{Name: "has_used", Type: field.TypeBool, Default: false},
	}
	// GoodArticleMetaTable holds the schema information for the "good_article_meta" table.
	GoodArticleMetaTable = &schema.Table{
		Name:       "good_article_meta",
		Columns:    GoodArticleMetaColumns,
		PrimaryKey: []*schema.Column{GoodArticleMetaColumns[0]},
	}
	// InviteColumns holds the columns for the "invite" table.
	InviteColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "referral_uid", Type: field.TypeString},
		{Name: "referee_uid", Type: field.TypeString},
	}
	// InviteTable holds the schema information for the "invite" table.
	InviteTable = &schema.Table{
		Name:       "invite",
		Columns:    InviteColumns,
		PrimaryKey: []*schema.Column{InviteColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "invite_referral_uid",
				Unique:  false,
				Columns: []*schema.Column{InviteColumns[5]},
			},
		},
	}
	// MessageColumns holds the columns for the "message" table.
	MessageColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "user_uid", Type: field.TypeString},
		{Name: "promoter_uid", Type: field.TypeString},
		{Name: "category", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "has_read", Type: field.TypeBool, Default: false},
	}
	// MessageTable holds the schema information for the "message" table.
	MessageTable = &schema.Table{
		Name:       "message",
		Columns:    MessageColumns,
		PrimaryKey: []*schema.Column{MessageColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "message_user_uid",
				Unique:  false,
				Columns: []*schema.Column{MessageColumns[5]},
			},
		},
	}
	// NoticeColumns holds the columns for the "notice" table.
	NoticeColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "content", Type: field.TypeString},
		{Name: "process", Type: field.TypeBool, Default: false},
	}
	// NoticeTable holds the schema information for the "notice" table.
	NoticeTable = &schema.Table{
		Name:       "notice",
		Columns:    NoticeColumns,
		PrimaryKey: []*schema.Column{NoticeColumns[0]},
	}
	// PayOrderColumns holds the columns for the "pay_order" table.
	PayOrderColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "order_number", Type: field.TypeString},
		{Name: "order_type", Type: field.TypeString},
		{Name: "user_uid", Type: field.TypeString},
		{Name: "pay_method", Type: field.TypeString},
		{Name: "payment_amount", Type: field.TypeString, SchemaType: map[string]string{"mysql": "decimal(12,2)"}},
		{Name: "total_price", Type: field.TypeString, SchemaType: map[string]string{"mysql": "decimal(12,2)"}},
		{Name: "recharge_record", Type: field.TypeJSON},
		{Name: "status", Type: field.TypeString},
		{Name: "transaction_number", Type: field.TypeString, Nullable: true},
		{Name: "thirdparty_number", Type: field.TypeString, Nullable: true},
		{Name: "mch_id", Type: field.TypeString, Nullable: true},
		{Name: "open_id", Type: field.TypeString, Nullable: true},
		{Name: "member_expired", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "cancel_event", Type: field.TypeString, Nullable: true},
	}
	// PayOrderTable holds the schema information for the "pay_order" table.
	PayOrderTable = &schema.Table{
		Name:       "pay_order",
		Columns:    PayOrderColumns,
		PrimaryKey: []*schema.Column{PayOrderColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "payorder_user_uid",
				Unique:  false,
				Columns: []*schema.Column{PayOrderColumns[7]},
			},
			{
				Name:    "payorder_order_number",
				Unique:  false,
				Columns: []*schema.Column{PayOrderColumns[5]},
			},
		},
	}
	// PayOrderFeedbackColumns holds the columns for the "pay_order_feedback" table.
	PayOrderFeedbackColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "user_uid", Type: field.TypeString},
		{Name: "order_number", Type: field.TypeString, Nullable: true},
		{Name: "category", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
	}
	// PayOrderFeedbackTable holds the schema information for the "pay_order_feedback" table.
	PayOrderFeedbackTable = &schema.Table{
		Name:       "pay_order_feedback",
		Columns:    PayOrderFeedbackColumns,
		PrimaryKey: []*schema.Column{PayOrderFeedbackColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "payorderfeedback_user_uid",
				Unique:  false,
				Columns: []*schema.Column{PayOrderFeedbackColumns[5]},
			},
		},
	}
	// PersonalFolderColumns holds the columns for the "personal_folder" table.
	PersonalFolderColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "user_uid", Type: field.TypeString},
		{Name: "folder_name", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(30)"}},
		{Name: "folder_number", Type: field.TypeString, Size: 8},
		{Name: "has_open", Type: field.TypeBool, Default: false},
	}
	// PersonalFolderTable holds the schema information for the "personal_folder" table.
	PersonalFolderTable = &schema.Table{
		Name:       "personal_folder",
		Columns:    PersonalFolderColumns,
		PrimaryKey: []*schema.Column{PersonalFolderColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "personalfolder_user_uid",
				Unique:  false,
				Columns: []*schema.Column{PersonalFolderColumns[5]},
			},
			{
				Name:    "personalfolder_folder_number",
				Unique:  false,
				Columns: []*schema.Column{PersonalFolderColumns[7]},
			},
			{
				Name:    "personalfolder_folder_number_user_uid",
				Unique:  false,
				Columns: []*schema.Column{PersonalFolderColumns[7], PersonalFolderColumns[5]},
			},
		},
	}
	// RechargeColumns holds the columns for the "recharge" table.
	RechargeColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "title", Type: field.TypeString},
		{Name: "origin_amount", Type: field.TypeString, SchemaType: map[string]string{"mysql": "decimal(12,2)"}},
		{Name: "amount", Type: field.TypeString, SchemaType: map[string]string{"mysql": "decimal(12,2)"}},
		{Name: "descriptions", Type: field.TypeJSON},
		{Name: "theme_color", Type: field.TypeString, Nullable: true},
		{Name: "year", Type: field.TypeInt},
		{Name: "month", Type: field.TypeInt},
		{Name: "default", Type: field.TypeBool, Default: false},
	}
	// RechargeTable holds the schema information for the "recharge" table.
	RechargeTable = &schema.Table{
		Name:       "recharge",
		Columns:    RechargeColumns,
		PrimaryKey: []*schema.Column{RechargeColumns[0]},
	}
	// ShareLinkColumns holds the columns for the "share_link" table.
	ShareLinkColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "folder_uid", Type: field.TypeString, Unique: true},
		{Name: "user_uid", Type: field.TypeString},
		{Name: "authority", Type: field.TypeString},
		{Name: "valid_day", Type: field.TypeInt},
		{Name: "expired_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "recent_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "date"}},
		{Name: "folder_number", Type: field.TypeString, Size: 8},
	}
	// ShareLinkTable holds the schema information for the "share_link" table.
	ShareLinkTable = &schema.Table{
		Name:       "share_link",
		Columns:    ShareLinkColumns,
		PrimaryKey: []*schema.Column{ShareLinkColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "sharelink_user_uid",
				Unique:  false,
				Columns: []*schema.Column{ShareLinkColumns[6]},
			},
			{
				Name:    "sharelink_folder_number",
				Unique:  false,
				Columns: []*schema.Column{ShareLinkColumns[11]},
			},
			{
				Name:    "sharelink_folder_number_user_uid",
				Unique:  false,
				Columns: []*schema.Column{ShareLinkColumns[11], ShareLinkColumns[6]},
			},
		},
	}
	// StationColumns holds the columns for the "station" table.
	StationColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(500)"}},
		{Name: "image", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
		{Name: "icon", Type: field.TypeString},
		{Name: "source", Type: field.TypeString},
		{Name: "link", Type: field.TypeString},
		{Name: "praise", Type: field.TypeInt, Default: 0},
		{Name: "star", Type: field.TypeInt, Default: 0},
		{Name: "view", Type: field.TypeInt, Default: 0},
		{Name: "user_uid", Type: field.TypeString},
		{Name: "status", Type: field.TypeBool, Default: false},
		{Name: "category_uid", Type: field.TypeString},
	}
	// StationTable holds the schema information for the "station" table.
	StationTable = &schema.Table{
		Name:       "station",
		Columns:    StationColumns,
		PrimaryKey: []*schema.Column{StationColumns[0]},
	}
	// StationCategoryColumns holds the columns for the "station_category" table.
	StationCategoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "name", Type: field.TypeString},
		{Name: "status", Type: field.TypeBool, Default: true},
		{Name: "sequence", Type: field.TypeInt},
	}
	// StationCategoryTable holds the schema information for the "station_category" table.
	StationCategoryTable = &schema.Table{
		Name:       "station_category",
		Columns:    StationCategoryColumns,
		PrimaryKey: []*schema.Column{StationCategoryColumns[0]},
	}
	// StationMetaColumns holds the columns for the "station_meta" table.
	StationMetaColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "station_uid", Type: field.TypeString},
		{Name: "user_uid", Type: field.TypeString},
		{Name: "has_praise", Type: field.TypeBool, Default: false},
		{Name: "has_star", Type: field.TypeBool, Default: false},
		{Name: "has_view", Type: field.TypeBool, Default: false},
	}
	// StationMetaTable holds the schema information for the "station_meta" table.
	StationMetaTable = &schema.Table{
		Name:       "station_meta",
		Columns:    StationMetaColumns,
		PrimaryKey: []*schema.Column{StationMetaColumns[0]},
	}
	// TeamColumns holds the columns for the "team" table.
	TeamColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "name", Type: field.TypeString},
		{Name: "expired_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
	}
	// TeamTable holds the schema information for the "team" table.
	TeamTable = &schema.Table{
		Name:       "team",
		Columns:    TeamColumns,
		PrimaryKey: []*schema.Column{TeamColumns[0]},
	}
	// TeamFolderColumns holds the columns for the "team_folder" table.
	TeamFolderColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "team_uid", Type: field.TypeString},
		{Name: "file_name", Type: field.TypeString, Nullable: true},
	}
	// TeamFolderTable holds the schema information for the "team_folder" table.
	TeamFolderTable = &schema.Table{
		Name:       "team_folder",
		Columns:    TeamFolderColumns,
		PrimaryKey: []*schema.Column{TeamFolderColumns[0]},
	}
	// TeamGroupColumns holds the columns for the "team_group" table.
	TeamGroupColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "user_uid", Type: field.TypeString},
		{Name: "team_uid", Type: field.TypeString},
	}
	// TeamGroupTable holds the schema information for the "team_group" table.
	TeamGroupTable = &schema.Table{
		Name:       "team_group",
		Columns:    TeamGroupColumns,
		PrimaryKey: []*schema.Column{TeamGroupColumns[0]},
	}
	// URLCrawlColumns holds the columns for the "url_crawl" table.
	URLCrawlColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "url", Type: field.TypeString},
		{Name: "community_uid", Type: field.TypeString, Nullable: true},
		{Name: "count", Type: field.TypeInt, Default: 0},
		{Name: "has_complete", Type: field.TypeBool, Default: false},
	}
	// URLCrawlTable holds the schema information for the "url_crawl" table.
	URLCrawlTable = &schema.Table{
		Name:       "url_crawl",
		Columns:    URLCrawlColumns,
		PrimaryKey: []*schema.Column{URLCrawlColumns[0]},
	}
	// WebLinkColumns holds the columns for the "web_link" table.
	WebLinkColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "title", Type: field.TypeString},
		{Name: "image", Type: field.TypeString},
		{Name: "link", Type: field.TypeString, Size: 2147483647},
		{Name: "description", Type: field.TypeString, Default: ""},
		{Name: "file_type", Type: field.TypeString, Default: ""},
		{Name: "sequence", Type: field.TypeInt, Default: 0},
		{Name: "forever_delete", Type: field.TypeBool, Default: false},
		{Name: "user_uid", Type: field.TypeString},
		{Name: "workspace_uid", Type: field.TypeString},
		{Name: "folder_uid", Type: field.TypeString},
	}
	// WebLinkTable holds the schema information for the "web_link" table.
	WebLinkTable = &schema.Table{
		Name:       "web_link",
		Columns:    WebLinkColumns,
		PrimaryKey: []*schema.Column{WebLinkColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "weblink_user_uid",
				Unique:  false,
				Columns: []*schema.Column{WebLinkColumns[12]},
			},
			{
				Name:    "weblink_workspace_uid",
				Unique:  false,
				Columns: []*schema.Column{WebLinkColumns[13]},
			},
		},
	}
	// WorkspaceColumns holds the columns for the "workspace" table.
	WorkspaceColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "uid", Type: field.TypeString, Unique: true, Size: 32},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "deactivated_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeInt, Default: 0},
		{Name: "user_uid", Type: field.TypeString},
		{Name: "personal_folder_uid", Type: field.TypeString, Nullable: true},
		{Name: "team_folder_uid", Type: field.TypeString, Nullable: true},
		{Name: "is_open", Type: field.TypeBool, Default: false},
	}
	// WorkspaceTable holds the schema information for the "workspace" table.
	WorkspaceTable = &schema.Table{
		Name:       "workspace",
		Columns:    WorkspaceColumns,
		PrimaryKey: []*schema.Column{WorkspaceColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "workspace_user_uid",
				Unique:  false,
				Columns: []*schema.Column{WorkspaceColumns[7]},
			},
			{
				Name:    "workspace_personal_folder_uid",
				Unique:  false,
				Columns: []*schema.Column{WorkspaceColumns[8]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountTable,
		AdminTable,
		CollaborationTable,
		CommunityTable,
		CommunityCategoryTable,
		CommunityMetaTable,
		FeedbackTable,
		FocusTable,
		GoodArticleTable,
		GoodArticleCategoryTable,
		GoodArticleHotTable,
		GoodArticleMetaTable,
		InviteTable,
		MessageTable,
		NoticeTable,
		PayOrderTable,
		PayOrderFeedbackTable,
		PersonalFolderTable,
		RechargeTable,
		ShareLinkTable,
		StationTable,
		StationCategoryTable,
		StationMetaTable,
		TeamTable,
		TeamFolderTable,
		TeamGroupTable,
		URLCrawlTable,
		WebLinkTable,
		WorkspaceTable,
	}
)

func init() {
	AccountTable.Annotation = &entsql.Annotation{
		Table: "account",
	}
	AdminTable.Annotation = &entsql.Annotation{
		Table: "admin",
	}
	CollaborationTable.Annotation = &entsql.Annotation{
		Table: "collaboration",
	}
	CommunityTable.Annotation = &entsql.Annotation{
		Table: "community",
	}
	CommunityCategoryTable.Annotation = &entsql.Annotation{
		Table: "community_category",
	}
	CommunityMetaTable.Annotation = &entsql.Annotation{
		Table: "community_meta",
	}
	FeedbackTable.Annotation = &entsql.Annotation{
		Table: "feedback",
	}
	FocusTable.Annotation = &entsql.Annotation{
		Table: "focus",
	}
	GoodArticleTable.Annotation = &entsql.Annotation{
		Table: "good_article",
	}
	GoodArticleCategoryTable.Annotation = &entsql.Annotation{
		Table: "good_article_category",
	}
	GoodArticleHotTable.Annotation = &entsql.Annotation{
		Table: "good_article_hot",
	}
	GoodArticleMetaTable.Annotation = &entsql.Annotation{
		Table: "good_article_meta",
	}
	InviteTable.Annotation = &entsql.Annotation{
		Table: "invite",
	}
	MessageTable.Annotation = &entsql.Annotation{
		Table: "message",
	}
	NoticeTable.Annotation = &entsql.Annotation{
		Table: "notice",
	}
	PayOrderTable.Annotation = &entsql.Annotation{
		Table: "pay_order",
	}
	PayOrderFeedbackTable.Annotation = &entsql.Annotation{
		Table: "pay_order_feedback",
	}
	PersonalFolderTable.Annotation = &entsql.Annotation{
		Table: "personal_folder",
	}
	RechargeTable.Annotation = &entsql.Annotation{
		Table: "recharge",
	}
	ShareLinkTable.Annotation = &entsql.Annotation{
		Table: "share_link",
	}
	StationTable.Annotation = &entsql.Annotation{
		Table: "station",
	}
	StationCategoryTable.Annotation = &entsql.Annotation{
		Table: "station_category",
	}
	StationMetaTable.Annotation = &entsql.Annotation{
		Table: "station_meta",
	}
	TeamTable.Annotation = &entsql.Annotation{
		Table: "team",
	}
	TeamFolderTable.Annotation = &entsql.Annotation{
		Table: "team_folder",
	}
	TeamGroupTable.Annotation = &entsql.Annotation{
		Table: "team_group",
	}
	URLCrawlTable.Annotation = &entsql.Annotation{
		Table: "url_crawl",
	}
	WebLinkTable.Annotation = &entsql.Annotation{
		Table: "web_link",
	}
	WorkspaceTable.Annotation = &entsql.Annotation{
		Table: "workspace",
	}
}
