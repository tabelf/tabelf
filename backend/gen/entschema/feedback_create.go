// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/feedback"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeedbackCreate is the builder for creating a Feedback entity.
type FeedbackCreate struct {
	config
	mutation *FeedbackMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (fc *FeedbackCreate) SetUID(s string) *FeedbackCreate {
	fc.mutation.SetUID(s)
	return fc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (fc *FeedbackCreate) SetNillableUID(s *string) *FeedbackCreate {
	if s != nil {
		fc.SetUID(*s)
	}
	return fc
}

// SetCreatedAt sets the "created_at" field.
func (fc *FeedbackCreate) SetCreatedAt(t time.Time) *FeedbackCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FeedbackCreate) SetNillableCreatedAt(t *time.Time) *FeedbackCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FeedbackCreate) SetUpdatedAt(t time.Time) *FeedbackCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FeedbackCreate) SetNillableUpdatedAt(t *time.Time) *FeedbackCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (fc *FeedbackCreate) SetDeactivatedAt(t time.Time) *FeedbackCreate {
	fc.mutation.SetDeactivatedAt(t)
	return fc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (fc *FeedbackCreate) SetNillableDeactivatedAt(t *time.Time) *FeedbackCreate {
	if t != nil {
		fc.SetDeactivatedAt(*t)
	}
	return fc
}

// SetUserUID sets the "user_uid" field.
func (fc *FeedbackCreate) SetUserUID(s string) *FeedbackCreate {
	fc.mutation.SetUserUID(s)
	return fc
}

// SetCategory sets the "category" field.
func (fc *FeedbackCreate) SetCategory(s string) *FeedbackCreate {
	fc.mutation.SetCategory(s)
	return fc
}

// SetDescription sets the "description" field.
func (fc *FeedbackCreate) SetDescription(s string) *FeedbackCreate {
	fc.mutation.SetDescription(s)
	return fc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fc *FeedbackCreate) SetNillableDescription(s *string) *FeedbackCreate {
	if s != nil {
		fc.SetDescription(*s)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FeedbackCreate) SetID(u uint64) *FeedbackCreate {
	fc.mutation.SetID(u)
	return fc
}

// Mutation returns the FeedbackMutation object of the builder.
func (fc *FeedbackCreate) Mutation() *FeedbackMutation {
	return fc.mutation
}

// Save creates the Feedback in the database.
func (fc *FeedbackCreate) Save(ctx context.Context) (*Feedback, error) {
	var (
		err  error
		node *Feedback
	)
	fc.defaults()
	if len(fc.hooks) == 0 {
		if err = fc.check(); err != nil {
			return nil, err
		}
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeedbackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fc.check(); err != nil {
				return nil, err
			}
			fc.mutation = mutation
			if node, err = fc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			if fc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = fc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FeedbackCreate) SaveX(ctx context.Context) *Feedback {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FeedbackCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FeedbackCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FeedbackCreate) defaults() {
	if _, ok := fc.mutation.UID(); !ok {
		v := feedback.DefaultUID()
		fc.mutation.SetUID(v)
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := feedback.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := feedback.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FeedbackCreate) check() error {
	if _, ok := fc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "Feedback.uid"`)}
	}
	if v, ok := fc.mutation.UID(); ok {
		if err := feedback.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "Feedback.uid": %w`, err)}
		}
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "Feedback.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "Feedback.updated_at"`)}
	}
	if _, ok := fc.mutation.UserUID(); !ok {
		return &ValidationError{Name: "user_uid", err: errors.New(`entschema: missing required field "Feedback.user_uid"`)}
	}
	if _, ok := fc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`entschema: missing required field "Feedback.category"`)}
	}
	return nil
}

func (fc *FeedbackCreate) sqlSave(ctx context.Context) (*Feedback, error) {
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (fc *FeedbackCreate) createSpec() (*Feedback, *sqlgraph.CreateSpec) {
	var (
		_node = &Feedback{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: feedback.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: feedback.FieldID,
			},
		}
	)
	_spec.OnConflict = fc.conflict
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedback.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: feedback.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: feedback.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: feedback.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := fc.mutation.UserUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedback.FieldUserUID,
		})
		_node.UserUID = value
	}
	if value, ok := fc.mutation.Category(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedback.FieldCategory,
		})
		_node.Category = value
	}
	if value, ok := fc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feedback.FieldDescription,
		})
		_node.Description = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Feedback.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeedbackUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (fc *FeedbackCreate) OnConflict(opts ...sql.ConflictOption) *FeedbackUpsertOne {
	fc.conflict = opts
	return &FeedbackUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Feedback.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fc *FeedbackCreate) OnConflictColumns(columns ...string) *FeedbackUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FeedbackUpsertOne{
		create: fc,
	}
}

type (
	// FeedbackUpsertOne is the builder for "upsert"-ing
	//  one Feedback node.
	FeedbackUpsertOne struct {
		create *FeedbackCreate
	}

	// FeedbackUpsert is the "OnConflict" setter.
	FeedbackUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *FeedbackUpsert) SetUID(v string) *FeedbackUpsert {
	u.Set(feedback.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdateUID() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FeedbackUpsert) SetCreatedAt(v time.Time) *FeedbackUpsert {
	u.Set(feedback.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdateCreatedAt() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedbackUpsert) SetUpdatedAt(v time.Time) *FeedbackUpsert {
	u.Set(feedback.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdateUpdatedAt() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *FeedbackUpsert) SetDeactivatedAt(v time.Time) *FeedbackUpsert {
	u.Set(feedback.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdateDeactivatedAt() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *FeedbackUpsert) ClearDeactivatedAt() *FeedbackUpsert {
	u.SetNull(feedback.FieldDeactivatedAt)
	return u
}

// SetUserUID sets the "user_uid" field.
func (u *FeedbackUpsert) SetUserUID(v string) *FeedbackUpsert {
	u.Set(feedback.FieldUserUID, v)
	return u
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdateUserUID() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldUserUID)
	return u
}

// SetCategory sets the "category" field.
func (u *FeedbackUpsert) SetCategory(v string) *FeedbackUpsert {
	u.Set(feedback.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdateCategory() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldCategory)
	return u
}

// SetDescription sets the "description" field.
func (u *FeedbackUpsert) SetDescription(v string) *FeedbackUpsert {
	u.Set(feedback.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdateDescription() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *FeedbackUpsert) ClearDescription() *FeedbackUpsert {
	u.SetNull(feedback.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Feedback.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(feedback.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FeedbackUpsertOne) UpdateNewValues() *FeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(feedback.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(feedback.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(feedback.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Feedback.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *FeedbackUpsertOne) Ignore() *FeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeedbackUpsertOne) DoNothing() *FeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeedbackCreate.OnConflict
// documentation for more info.
func (u *FeedbackUpsertOne) Update(set func(*FeedbackUpsert)) *FeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeedbackUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *FeedbackUpsertOne) SetUID(v string) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdateUID() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *FeedbackUpsertOne) SetCreatedAt(v time.Time) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdateCreatedAt() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedbackUpsertOne) SetUpdatedAt(v time.Time) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdateUpdatedAt() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *FeedbackUpsertOne) SetDeactivatedAt(v time.Time) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdateDeactivatedAt() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *FeedbackUpsertOne) ClearDeactivatedAt() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *FeedbackUpsertOne) SetUserUID(v string) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdateUserUID() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateUserUID()
	})
}

// SetCategory sets the "category" field.
func (u *FeedbackUpsertOne) SetCategory(v string) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdateCategory() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateCategory()
	})
}

// SetDescription sets the "description" field.
func (u *FeedbackUpsertOne) SetDescription(v string) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdateDescription() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *FeedbackUpsertOne) ClearDescription() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *FeedbackUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for FeedbackCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeedbackUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FeedbackUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FeedbackUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FeedbackCreateBulk is the builder for creating many Feedback entities in bulk.
type FeedbackCreateBulk struct {
	config
	builders []*FeedbackCreate
	conflict []sql.ConflictOption
}

// Save creates the Feedback entities in the database.
func (fcb *FeedbackCreateBulk) Save(ctx context.Context) ([]*Feedback, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Feedback, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeedbackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FeedbackCreateBulk) SaveX(ctx context.Context) []*Feedback {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FeedbackCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FeedbackCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Feedback.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeedbackUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (fcb *FeedbackCreateBulk) OnConflict(opts ...sql.ConflictOption) *FeedbackUpsertBulk {
	fcb.conflict = opts
	return &FeedbackUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Feedback.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fcb *FeedbackCreateBulk) OnConflictColumns(columns ...string) *FeedbackUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FeedbackUpsertBulk{
		create: fcb,
	}
}

// FeedbackUpsertBulk is the builder for "upsert"-ing
// a bulk of Feedback nodes.
type FeedbackUpsertBulk struct {
	create *FeedbackCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Feedback.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(feedback.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FeedbackUpsertBulk) UpdateNewValues() *FeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(feedback.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(feedback.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(feedback.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Feedback.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *FeedbackUpsertBulk) Ignore() *FeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeedbackUpsertBulk) DoNothing() *FeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeedbackCreateBulk.OnConflict
// documentation for more info.
func (u *FeedbackUpsertBulk) Update(set func(*FeedbackUpsert)) *FeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeedbackUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *FeedbackUpsertBulk) SetUID(v string) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdateUID() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *FeedbackUpsertBulk) SetCreatedAt(v time.Time) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdateCreatedAt() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedbackUpsertBulk) SetUpdatedAt(v time.Time) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdateUpdatedAt() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *FeedbackUpsertBulk) SetDeactivatedAt(v time.Time) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdateDeactivatedAt() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *FeedbackUpsertBulk) ClearDeactivatedAt() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *FeedbackUpsertBulk) SetUserUID(v string) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdateUserUID() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateUserUID()
	})
}

// SetCategory sets the "category" field.
func (u *FeedbackUpsertBulk) SetCategory(v string) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdateCategory() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateCategory()
	})
}

// SetDescription sets the "description" field.
func (u *FeedbackUpsertBulk) SetDescription(v string) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdateDescription() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *FeedbackUpsertBulk) ClearDescription() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *FeedbackUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the FeedbackCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for FeedbackCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeedbackUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
