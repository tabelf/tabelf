// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/invite"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InviteCreate is the builder for creating a Invite entity.
type InviteCreate struct {
	config
	mutation *InviteMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (ic *InviteCreate) SetUID(s string) *InviteCreate {
	ic.mutation.SetUID(s)
	return ic
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (ic *InviteCreate) SetNillableUID(s *string) *InviteCreate {
	if s != nil {
		ic.SetUID(*s)
	}
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *InviteCreate) SetCreatedAt(t time.Time) *InviteCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InviteCreate) SetNillableCreatedAt(t *time.Time) *InviteCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InviteCreate) SetUpdatedAt(t time.Time) *InviteCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InviteCreate) SetNillableUpdatedAt(t *time.Time) *InviteCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (ic *InviteCreate) SetDeactivatedAt(t time.Time) *InviteCreate {
	ic.mutation.SetDeactivatedAt(t)
	return ic
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (ic *InviteCreate) SetNillableDeactivatedAt(t *time.Time) *InviteCreate {
	if t != nil {
		ic.SetDeactivatedAt(*t)
	}
	return ic
}

// SetReferralUID sets the "referral_uid" field.
func (ic *InviteCreate) SetReferralUID(s string) *InviteCreate {
	ic.mutation.SetReferralUID(s)
	return ic
}

// SetRefereeUID sets the "referee_uid" field.
func (ic *InviteCreate) SetRefereeUID(s string) *InviteCreate {
	ic.mutation.SetRefereeUID(s)
	return ic
}

// SetID sets the "id" field.
func (ic *InviteCreate) SetID(u uint64) *InviteCreate {
	ic.mutation.SetID(u)
	return ic
}

// Mutation returns the InviteMutation object of the builder.
func (ic *InviteCreate) Mutation() *InviteMutation {
	return ic.mutation
}

// Save creates the Invite in the database.
func (ic *InviteCreate) Save(ctx context.Context) (*Invite, error) {
	var (
		err  error
		node *Invite
	)
	ic.defaults()
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InviteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InviteCreate) SaveX(ctx context.Context) *Invite {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InviteCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InviteCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InviteCreate) defaults() {
	if _, ok := ic.mutation.UID(); !ok {
		v := invite.DefaultUID()
		ic.mutation.SetUID(v)
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := invite.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := invite.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InviteCreate) check() error {
	if _, ok := ic.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "Invite.uid"`)}
	}
	if v, ok := ic.mutation.UID(); ok {
		if err := invite.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "Invite.uid": %w`, err)}
		}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "Invite.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "Invite.updated_at"`)}
	}
	if _, ok := ic.mutation.ReferralUID(); !ok {
		return &ValidationError{Name: "referral_uid", err: errors.New(`entschema: missing required field "Invite.referral_uid"`)}
	}
	if _, ok := ic.mutation.RefereeUID(); !ok {
		return &ValidationError{Name: "referee_uid", err: errors.New(`entschema: missing required field "Invite.referee_uid"`)}
	}
	return nil
}

func (ic *InviteCreate) sqlSave(ctx context.Context) (*Invite, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (ic *InviteCreate) createSpec() (*Invite, *sqlgraph.CreateSpec) {
	var (
		_node = &Invite{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: invite.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: invite.FieldID,
			},
		}
	)
	_spec.OnConflict = ic.conflict
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: invite.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: invite.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: invite.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: invite.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := ic.mutation.ReferralUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: invite.FieldReferralUID,
		})
		_node.ReferralUID = value
	}
	if value, ok := ic.mutation.RefereeUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: invite.FieldRefereeUID,
		})
		_node.RefereeUID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Invite.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InviteUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (ic *InviteCreate) OnConflict(opts ...sql.ConflictOption) *InviteUpsertOne {
	ic.conflict = opts
	return &InviteUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Invite.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ic *InviteCreate) OnConflictColumns(columns ...string) *InviteUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &InviteUpsertOne{
		create: ic,
	}
}

type (
	// InviteUpsertOne is the builder for "upsert"-ing
	//  one Invite node.
	InviteUpsertOne struct {
		create *InviteCreate
	}

	// InviteUpsert is the "OnConflict" setter.
	InviteUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *InviteUpsert) SetUID(v string) *InviteUpsert {
	u.Set(invite.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *InviteUpsert) UpdateUID() *InviteUpsert {
	u.SetExcluded(invite.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *InviteUpsert) SetCreatedAt(v time.Time) *InviteUpsert {
	u.Set(invite.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *InviteUpsert) UpdateCreatedAt() *InviteUpsert {
	u.SetExcluded(invite.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InviteUpsert) SetUpdatedAt(v time.Time) *InviteUpsert {
	u.Set(invite.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InviteUpsert) UpdateUpdatedAt() *InviteUpsert {
	u.SetExcluded(invite.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *InviteUpsert) SetDeactivatedAt(v time.Time) *InviteUpsert {
	u.Set(invite.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *InviteUpsert) UpdateDeactivatedAt() *InviteUpsert {
	u.SetExcluded(invite.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *InviteUpsert) ClearDeactivatedAt() *InviteUpsert {
	u.SetNull(invite.FieldDeactivatedAt)
	return u
}

// SetReferralUID sets the "referral_uid" field.
func (u *InviteUpsert) SetReferralUID(v string) *InviteUpsert {
	u.Set(invite.FieldReferralUID, v)
	return u
}

// UpdateReferralUID sets the "referral_uid" field to the value that was provided on create.
func (u *InviteUpsert) UpdateReferralUID() *InviteUpsert {
	u.SetExcluded(invite.FieldReferralUID)
	return u
}

// SetRefereeUID sets the "referee_uid" field.
func (u *InviteUpsert) SetRefereeUID(v string) *InviteUpsert {
	u.Set(invite.FieldRefereeUID, v)
	return u
}

// UpdateRefereeUID sets the "referee_uid" field to the value that was provided on create.
func (u *InviteUpsert) UpdateRefereeUID() *InviteUpsert {
	u.SetExcluded(invite.FieldRefereeUID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Invite.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(invite.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *InviteUpsertOne) UpdateNewValues() *InviteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(invite.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(invite.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(invite.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Invite.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *InviteUpsertOne) Ignore() *InviteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InviteUpsertOne) DoNothing() *InviteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InviteCreate.OnConflict
// documentation for more info.
func (u *InviteUpsertOne) Update(set func(*InviteUpsert)) *InviteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InviteUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *InviteUpsertOne) SetUID(v string) *InviteUpsertOne {
	return u.Update(func(s *InviteUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *InviteUpsertOne) UpdateUID() *InviteUpsertOne {
	return u.Update(func(s *InviteUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *InviteUpsertOne) SetCreatedAt(v time.Time) *InviteUpsertOne {
	return u.Update(func(s *InviteUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *InviteUpsertOne) UpdateCreatedAt() *InviteUpsertOne {
	return u.Update(func(s *InviteUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InviteUpsertOne) SetUpdatedAt(v time.Time) *InviteUpsertOne {
	return u.Update(func(s *InviteUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InviteUpsertOne) UpdateUpdatedAt() *InviteUpsertOne {
	return u.Update(func(s *InviteUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *InviteUpsertOne) SetDeactivatedAt(v time.Time) *InviteUpsertOne {
	return u.Update(func(s *InviteUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *InviteUpsertOne) UpdateDeactivatedAt() *InviteUpsertOne {
	return u.Update(func(s *InviteUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *InviteUpsertOne) ClearDeactivatedAt() *InviteUpsertOne {
	return u.Update(func(s *InviteUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetReferralUID sets the "referral_uid" field.
func (u *InviteUpsertOne) SetReferralUID(v string) *InviteUpsertOne {
	return u.Update(func(s *InviteUpsert) {
		s.SetReferralUID(v)
	})
}

// UpdateReferralUID sets the "referral_uid" field to the value that was provided on create.
func (u *InviteUpsertOne) UpdateReferralUID() *InviteUpsertOne {
	return u.Update(func(s *InviteUpsert) {
		s.UpdateReferralUID()
	})
}

// SetRefereeUID sets the "referee_uid" field.
func (u *InviteUpsertOne) SetRefereeUID(v string) *InviteUpsertOne {
	return u.Update(func(s *InviteUpsert) {
		s.SetRefereeUID(v)
	})
}

// UpdateRefereeUID sets the "referee_uid" field to the value that was provided on create.
func (u *InviteUpsertOne) UpdateRefereeUID() *InviteUpsertOne {
	return u.Update(func(s *InviteUpsert) {
		s.UpdateRefereeUID()
	})
}

// Exec executes the query.
func (u *InviteUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for InviteCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InviteUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InviteUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InviteUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InviteCreateBulk is the builder for creating many Invite entities in bulk.
type InviteCreateBulk struct {
	config
	builders []*InviteCreate
	conflict []sql.ConflictOption
}

// Save creates the Invite entities in the database.
func (icb *InviteCreateBulk) Save(ctx context.Context) ([]*Invite, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Invite, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InviteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InviteCreateBulk) SaveX(ctx context.Context) []*Invite {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InviteCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InviteCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Invite.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InviteUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (icb *InviteCreateBulk) OnConflict(opts ...sql.ConflictOption) *InviteUpsertBulk {
	icb.conflict = opts
	return &InviteUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Invite.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (icb *InviteCreateBulk) OnConflictColumns(columns ...string) *InviteUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &InviteUpsertBulk{
		create: icb,
	}
}

// InviteUpsertBulk is the builder for "upsert"-ing
// a bulk of Invite nodes.
type InviteUpsertBulk struct {
	create *InviteCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Invite.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(invite.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *InviteUpsertBulk) UpdateNewValues() *InviteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(invite.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(invite.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(invite.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Invite.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *InviteUpsertBulk) Ignore() *InviteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InviteUpsertBulk) DoNothing() *InviteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InviteCreateBulk.OnConflict
// documentation for more info.
func (u *InviteUpsertBulk) Update(set func(*InviteUpsert)) *InviteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InviteUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *InviteUpsertBulk) SetUID(v string) *InviteUpsertBulk {
	return u.Update(func(s *InviteUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *InviteUpsertBulk) UpdateUID() *InviteUpsertBulk {
	return u.Update(func(s *InviteUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *InviteUpsertBulk) SetCreatedAt(v time.Time) *InviteUpsertBulk {
	return u.Update(func(s *InviteUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *InviteUpsertBulk) UpdateCreatedAt() *InviteUpsertBulk {
	return u.Update(func(s *InviteUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InviteUpsertBulk) SetUpdatedAt(v time.Time) *InviteUpsertBulk {
	return u.Update(func(s *InviteUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InviteUpsertBulk) UpdateUpdatedAt() *InviteUpsertBulk {
	return u.Update(func(s *InviteUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *InviteUpsertBulk) SetDeactivatedAt(v time.Time) *InviteUpsertBulk {
	return u.Update(func(s *InviteUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *InviteUpsertBulk) UpdateDeactivatedAt() *InviteUpsertBulk {
	return u.Update(func(s *InviteUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *InviteUpsertBulk) ClearDeactivatedAt() *InviteUpsertBulk {
	return u.Update(func(s *InviteUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetReferralUID sets the "referral_uid" field.
func (u *InviteUpsertBulk) SetReferralUID(v string) *InviteUpsertBulk {
	return u.Update(func(s *InviteUpsert) {
		s.SetReferralUID(v)
	})
}

// UpdateReferralUID sets the "referral_uid" field to the value that was provided on create.
func (u *InviteUpsertBulk) UpdateReferralUID() *InviteUpsertBulk {
	return u.Update(func(s *InviteUpsert) {
		s.UpdateReferralUID()
	})
}

// SetRefereeUID sets the "referee_uid" field.
func (u *InviteUpsertBulk) SetRefereeUID(v string) *InviteUpsertBulk {
	return u.Update(func(s *InviteUpsert) {
		s.SetRefereeUID(v)
	})
}

// UpdateRefereeUID sets the "referee_uid" field to the value that was provided on create.
func (u *InviteUpsertBulk) UpdateRefereeUID() *InviteUpsertBulk {
	return u.Update(func(s *InviteUpsert) {
		s.UpdateRefereeUID()
	})
}

// Exec executes the query.
func (u *InviteUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the InviteCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for InviteCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InviteUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
