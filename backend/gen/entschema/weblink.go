// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"fmt"
	"strings"
	"tabelf/backend/gen/entschema/weblink"
	"time"

	"entgo.io/ent/dialect/sql"
)

// WebLink is the model entity for the WebLink schema.
type WebLink struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeactivatedAt holds the value of the "deactivated_at" field.
	DeactivatedAt *time.Time `json:"deactivated_at,omitempty"`
	// Title holds the value of the "title" field.
	// 网页标题
	Title string `json:"title,omitempty"`
	// Image holds the value of the "image" field.
	// 网页图片
	Image string `json:"image,omitempty"`
	// Link holds the value of the "link" field.
	// 网页链接
	Link string `json:"link,omitempty"`
	// Description holds the value of the "description" field.
	// 链接描述
	Description string `json:"description,omitempty"`
	// FileType holds the value of the "file_type" field.
	// 文件类型
	FileType string `json:"file_type,omitempty"`
	// Sequence holds the value of the "sequence" field.
	// 序号
	Sequence int `json:"sequence,omitempty"`
	// ForeverDelete holds the value of the "forever_delete" field.
	// 永久删除, 0 否 1 是
	ForeverDelete bool `json:"forever_delete,omitempty"`
	// UserUID holds the value of the "user_uid" field.
	// 用户uid
	UserUID string `json:"user_uid,omitempty"`
	// WorkspaceUID holds the value of the "workspace_uid" field.
	// 工作空间uid
	WorkspaceUID string `json:"workspace_uid,omitempty"`
	// FolderUID holds the value of the "folder_uid" field.
	// 文件uid
	FolderUID string `json:"folder_uid,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WebLink) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case weblink.FieldForeverDelete:
			values[i] = new(sql.NullBool)
		case weblink.FieldID, weblink.FieldSequence:
			values[i] = new(sql.NullInt64)
		case weblink.FieldUID, weblink.FieldTitle, weblink.FieldImage, weblink.FieldLink, weblink.FieldDescription, weblink.FieldFileType, weblink.FieldUserUID, weblink.FieldWorkspaceUID, weblink.FieldFolderUID:
			values[i] = new(sql.NullString)
		case weblink.FieldCreatedAt, weblink.FieldUpdatedAt, weblink.FieldDeactivatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WebLink", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WebLink fields.
func (wl *WebLink) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case weblink.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wl.ID = uint64(value.Int64)
		case weblink.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				wl.UID = value.String
			}
		case weblink.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wl.CreatedAt = value.Time
			}
		case weblink.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wl.UpdatedAt = value.Time
			}
		case weblink.FieldDeactivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deactivated_at", values[i])
			} else if value.Valid {
				wl.DeactivatedAt = new(time.Time)
				*wl.DeactivatedAt = value.Time
			}
		case weblink.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				wl.Title = value.String
			}
		case weblink.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				wl.Image = value.String
			}
		case weblink.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				wl.Link = value.String
			}
		case weblink.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				wl.Description = value.String
			}
		case weblink.FieldFileType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_type", values[i])
			} else if value.Valid {
				wl.FileType = value.String
			}
		case weblink.FieldSequence:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sequence", values[i])
			} else if value.Valid {
				wl.Sequence = int(value.Int64)
			}
		case weblink.FieldForeverDelete:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field forever_delete", values[i])
			} else if value.Valid {
				wl.ForeverDelete = value.Bool
			}
		case weblink.FieldUserUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_uid", values[i])
			} else if value.Valid {
				wl.UserUID = value.String
			}
		case weblink.FieldWorkspaceUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workspace_uid", values[i])
			} else if value.Valid {
				wl.WorkspaceUID = value.String
			}
		case weblink.FieldFolderUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field folder_uid", values[i])
			} else if value.Valid {
				wl.FolderUID = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this WebLink.
// Note that you need to call WebLink.Unwrap() before calling this method if this WebLink
// was returned from a transaction, and the transaction was committed or rolled back.
func (wl *WebLink) Update() *WebLinkUpdateOne {
	return (&WebLinkClient{config: wl.config}).UpdateOne(wl)
}

// Unwrap unwraps the WebLink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wl *WebLink) Unwrap() *WebLink {
	tx, ok := wl.config.driver.(*txDriver)
	if !ok {
		panic("entschema: WebLink is not a transactional entity")
	}
	wl.config.driver = tx.drv
	return wl
}

// String implements the fmt.Stringer.
func (wl *WebLink) String() string {
	var builder strings.Builder
	builder.WriteString("WebLink(")
	builder.WriteString(fmt.Sprintf("id=%v", wl.ID))
	builder.WriteString(", uid=")
	builder.WriteString(wl.UID)
	builder.WriteString(", created_at=")
	builder.WriteString(wl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(wl.UpdatedAt.Format(time.ANSIC))
	if v := wl.DeactivatedAt; v != nil {
		builder.WriteString(", deactivated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", title=")
	builder.WriteString(wl.Title)
	builder.WriteString(", image=")
	builder.WriteString(wl.Image)
	builder.WriteString(", link=")
	builder.WriteString(wl.Link)
	builder.WriteString(", description=")
	builder.WriteString(wl.Description)
	builder.WriteString(", file_type=")
	builder.WriteString(wl.FileType)
	builder.WriteString(", sequence=")
	builder.WriteString(fmt.Sprintf("%v", wl.Sequence))
	builder.WriteString(", forever_delete=")
	builder.WriteString(fmt.Sprintf("%v", wl.ForeverDelete))
	builder.WriteString(", user_uid=")
	builder.WriteString(wl.UserUID)
	builder.WriteString(", workspace_uid=")
	builder.WriteString(wl.WorkspaceUID)
	builder.WriteString(", folder_uid=")
	builder.WriteString(wl.FolderUID)
	builder.WriteByte(')')
	return builder.String()
}

// WebLinks is a parsable slice of WebLink.
type WebLinks []*WebLink

func (wl WebLinks) config(cfg config) {
	for _i := range wl {
		wl[_i].config = cfg
	}
}
