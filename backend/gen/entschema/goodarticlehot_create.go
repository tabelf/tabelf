// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/goodarticlehot"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GoodArticleHotCreate is the builder for creating a GoodArticleHot entity.
type GoodArticleHotCreate struct {
	config
	mutation *GoodArticleHotMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (gahc *GoodArticleHotCreate) SetUID(s string) *GoodArticleHotCreate {
	gahc.mutation.SetUID(s)
	return gahc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (gahc *GoodArticleHotCreate) SetNillableUID(s *string) *GoodArticleHotCreate {
	if s != nil {
		gahc.SetUID(*s)
	}
	return gahc
}

// SetCreatedAt sets the "created_at" field.
func (gahc *GoodArticleHotCreate) SetCreatedAt(t time.Time) *GoodArticleHotCreate {
	gahc.mutation.SetCreatedAt(t)
	return gahc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gahc *GoodArticleHotCreate) SetNillableCreatedAt(t *time.Time) *GoodArticleHotCreate {
	if t != nil {
		gahc.SetCreatedAt(*t)
	}
	return gahc
}

// SetUpdatedAt sets the "updated_at" field.
func (gahc *GoodArticleHotCreate) SetUpdatedAt(t time.Time) *GoodArticleHotCreate {
	gahc.mutation.SetUpdatedAt(t)
	return gahc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gahc *GoodArticleHotCreate) SetNillableUpdatedAt(t *time.Time) *GoodArticleHotCreate {
	if t != nil {
		gahc.SetUpdatedAt(*t)
	}
	return gahc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (gahc *GoodArticleHotCreate) SetDeactivatedAt(t time.Time) *GoodArticleHotCreate {
	gahc.mutation.SetDeactivatedAt(t)
	return gahc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (gahc *GoodArticleHotCreate) SetNillableDeactivatedAt(t *time.Time) *GoodArticleHotCreate {
	if t != nil {
		gahc.SetDeactivatedAt(*t)
	}
	return gahc
}

// SetArticleUID sets the "article_uid" field.
func (gahc *GoodArticleHotCreate) SetArticleUID(s string) *GoodArticleHotCreate {
	gahc.mutation.SetArticleUID(s)
	return gahc
}

// SetHasExpired sets the "has_expired" field.
func (gahc *GoodArticleHotCreate) SetHasExpired(b bool) *GoodArticleHotCreate {
	gahc.mutation.SetHasExpired(b)
	return gahc
}

// SetNillableHasExpired sets the "has_expired" field if the given value is not nil.
func (gahc *GoodArticleHotCreate) SetNillableHasExpired(b *bool) *GoodArticleHotCreate {
	if b != nil {
		gahc.SetHasExpired(*b)
	}
	return gahc
}

// SetID sets the "id" field.
func (gahc *GoodArticleHotCreate) SetID(u uint64) *GoodArticleHotCreate {
	gahc.mutation.SetID(u)
	return gahc
}

// Mutation returns the GoodArticleHotMutation object of the builder.
func (gahc *GoodArticleHotCreate) Mutation() *GoodArticleHotMutation {
	return gahc.mutation
}

// Save creates the GoodArticleHot in the database.
func (gahc *GoodArticleHotCreate) Save(ctx context.Context) (*GoodArticleHot, error) {
	var (
		err  error
		node *GoodArticleHot
	)
	gahc.defaults()
	if len(gahc.hooks) == 0 {
		if err = gahc.check(); err != nil {
			return nil, err
		}
		node, err = gahc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodArticleHotMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gahc.check(); err != nil {
				return nil, err
			}
			gahc.mutation = mutation
			if node, err = gahc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gahc.hooks) - 1; i >= 0; i-- {
			if gahc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = gahc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gahc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gahc *GoodArticleHotCreate) SaveX(ctx context.Context) *GoodArticleHot {
	v, err := gahc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gahc *GoodArticleHotCreate) Exec(ctx context.Context) error {
	_, err := gahc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gahc *GoodArticleHotCreate) ExecX(ctx context.Context) {
	if err := gahc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gahc *GoodArticleHotCreate) defaults() {
	if _, ok := gahc.mutation.UID(); !ok {
		v := goodarticlehot.DefaultUID()
		gahc.mutation.SetUID(v)
	}
	if _, ok := gahc.mutation.CreatedAt(); !ok {
		v := goodarticlehot.DefaultCreatedAt()
		gahc.mutation.SetCreatedAt(v)
	}
	if _, ok := gahc.mutation.UpdatedAt(); !ok {
		v := goodarticlehot.DefaultUpdatedAt()
		gahc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gahc.mutation.HasExpired(); !ok {
		v := goodarticlehot.DefaultHasExpired
		gahc.mutation.SetHasExpired(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gahc *GoodArticleHotCreate) check() error {
	if _, ok := gahc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "GoodArticleHot.uid"`)}
	}
	if v, ok := gahc.mutation.UID(); ok {
		if err := goodarticlehot.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "GoodArticleHot.uid": %w`, err)}
		}
	}
	if _, ok := gahc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "GoodArticleHot.created_at"`)}
	}
	if _, ok := gahc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "GoodArticleHot.updated_at"`)}
	}
	if _, ok := gahc.mutation.ArticleUID(); !ok {
		return &ValidationError{Name: "article_uid", err: errors.New(`entschema: missing required field "GoodArticleHot.article_uid"`)}
	}
	if _, ok := gahc.mutation.HasExpired(); !ok {
		return &ValidationError{Name: "has_expired", err: errors.New(`entschema: missing required field "GoodArticleHot.has_expired"`)}
	}
	return nil
}

func (gahc *GoodArticleHotCreate) sqlSave(ctx context.Context) (*GoodArticleHot, error) {
	_node, _spec := gahc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gahc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (gahc *GoodArticleHotCreate) createSpec() (*GoodArticleHot, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodArticleHot{config: gahc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodarticlehot.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: goodarticlehot.FieldID,
			},
		}
	)
	_spec.OnConflict = gahc.conflict
	if id, ok := gahc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gahc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticlehot.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := gahc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlehot.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gahc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlehot.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gahc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlehot.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := gahc.mutation.ArticleUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticlehot.FieldArticleUID,
		})
		_node.ArticleUID = value
	}
	if value, ok := gahc.mutation.HasExpired(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodarticlehot.FieldHasExpired,
		})
		_node.HasExpired = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodArticleHot.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodArticleHotUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (gahc *GoodArticleHotCreate) OnConflict(opts ...sql.ConflictOption) *GoodArticleHotUpsertOne {
	gahc.conflict = opts
	return &GoodArticleHotUpsertOne{
		create: gahc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodArticleHot.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gahc *GoodArticleHotCreate) OnConflictColumns(columns ...string) *GoodArticleHotUpsertOne {
	gahc.conflict = append(gahc.conflict, sql.ConflictColumns(columns...))
	return &GoodArticleHotUpsertOne{
		create: gahc,
	}
}

type (
	// GoodArticleHotUpsertOne is the builder for "upsert"-ing
	//  one GoodArticleHot node.
	GoodArticleHotUpsertOne struct {
		create *GoodArticleHotCreate
	}

	// GoodArticleHotUpsert is the "OnConflict" setter.
	GoodArticleHotUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *GoodArticleHotUpsert) SetUID(v string) *GoodArticleHotUpsert {
	u.Set(goodarticlehot.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *GoodArticleHotUpsert) UpdateUID() *GoodArticleHotUpsert {
	u.SetExcluded(goodarticlehot.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodArticleHotUpsert) SetCreatedAt(v time.Time) *GoodArticleHotUpsert {
	u.Set(goodarticlehot.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodArticleHotUpsert) UpdateCreatedAt() *GoodArticleHotUpsert {
	u.SetExcluded(goodarticlehot.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodArticleHotUpsert) SetUpdatedAt(v time.Time) *GoodArticleHotUpsert {
	u.Set(goodarticlehot.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodArticleHotUpsert) UpdateUpdatedAt() *GoodArticleHotUpsert {
	u.SetExcluded(goodarticlehot.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *GoodArticleHotUpsert) SetDeactivatedAt(v time.Time) *GoodArticleHotUpsert {
	u.Set(goodarticlehot.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *GoodArticleHotUpsert) UpdateDeactivatedAt() *GoodArticleHotUpsert {
	u.SetExcluded(goodarticlehot.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *GoodArticleHotUpsert) ClearDeactivatedAt() *GoodArticleHotUpsert {
	u.SetNull(goodarticlehot.FieldDeactivatedAt)
	return u
}

// SetArticleUID sets the "article_uid" field.
func (u *GoodArticleHotUpsert) SetArticleUID(v string) *GoodArticleHotUpsert {
	u.Set(goodarticlehot.FieldArticleUID, v)
	return u
}

// UpdateArticleUID sets the "article_uid" field to the value that was provided on create.
func (u *GoodArticleHotUpsert) UpdateArticleUID() *GoodArticleHotUpsert {
	u.SetExcluded(goodarticlehot.FieldArticleUID)
	return u
}

// SetHasExpired sets the "has_expired" field.
func (u *GoodArticleHotUpsert) SetHasExpired(v bool) *GoodArticleHotUpsert {
	u.Set(goodarticlehot.FieldHasExpired, v)
	return u
}

// UpdateHasExpired sets the "has_expired" field to the value that was provided on create.
func (u *GoodArticleHotUpsert) UpdateHasExpired() *GoodArticleHotUpsert {
	u.SetExcluded(goodarticlehot.FieldHasExpired)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodArticleHot.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodarticlehot.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodArticleHotUpsertOne) UpdateNewValues() *GoodArticleHotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodarticlehot.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(goodarticlehot.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(goodarticlehot.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GoodArticleHot.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GoodArticleHotUpsertOne) Ignore() *GoodArticleHotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodArticleHotUpsertOne) DoNothing() *GoodArticleHotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodArticleHotCreate.OnConflict
// documentation for more info.
func (u *GoodArticleHotUpsertOne) Update(set func(*GoodArticleHotUpsert)) *GoodArticleHotUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodArticleHotUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *GoodArticleHotUpsertOne) SetUID(v string) *GoodArticleHotUpsertOne {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *GoodArticleHotUpsertOne) UpdateUID() *GoodArticleHotUpsertOne {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodArticleHotUpsertOne) SetCreatedAt(v time.Time) *GoodArticleHotUpsertOne {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodArticleHotUpsertOne) UpdateCreatedAt() *GoodArticleHotUpsertOne {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodArticleHotUpsertOne) SetUpdatedAt(v time.Time) *GoodArticleHotUpsertOne {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodArticleHotUpsertOne) UpdateUpdatedAt() *GoodArticleHotUpsertOne {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *GoodArticleHotUpsertOne) SetDeactivatedAt(v time.Time) *GoodArticleHotUpsertOne {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *GoodArticleHotUpsertOne) UpdateDeactivatedAt() *GoodArticleHotUpsertOne {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *GoodArticleHotUpsertOne) ClearDeactivatedAt() *GoodArticleHotUpsertOne {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetArticleUID sets the "article_uid" field.
func (u *GoodArticleHotUpsertOne) SetArticleUID(v string) *GoodArticleHotUpsertOne {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.SetArticleUID(v)
	})
}

// UpdateArticleUID sets the "article_uid" field to the value that was provided on create.
func (u *GoodArticleHotUpsertOne) UpdateArticleUID() *GoodArticleHotUpsertOne {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.UpdateArticleUID()
	})
}

// SetHasExpired sets the "has_expired" field.
func (u *GoodArticleHotUpsertOne) SetHasExpired(v bool) *GoodArticleHotUpsertOne {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.SetHasExpired(v)
	})
}

// UpdateHasExpired sets the "has_expired" field to the value that was provided on create.
func (u *GoodArticleHotUpsertOne) UpdateHasExpired() *GoodArticleHotUpsertOne {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.UpdateHasExpired()
	})
}

// Exec executes the query.
func (u *GoodArticleHotUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for GoodArticleHotCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodArticleHotUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodArticleHotUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodArticleHotUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodArticleHotCreateBulk is the builder for creating many GoodArticleHot entities in bulk.
type GoodArticleHotCreateBulk struct {
	config
	builders []*GoodArticleHotCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodArticleHot entities in the database.
func (gahcb *GoodArticleHotCreateBulk) Save(ctx context.Context) ([]*GoodArticleHot, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gahcb.builders))
	nodes := make([]*GoodArticleHot, len(gahcb.builders))
	mutators := make([]Mutator, len(gahcb.builders))
	for i := range gahcb.builders {
		func(i int, root context.Context) {
			builder := gahcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodArticleHotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gahcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gahcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gahcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gahcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gahcb *GoodArticleHotCreateBulk) SaveX(ctx context.Context) []*GoodArticleHot {
	v, err := gahcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gahcb *GoodArticleHotCreateBulk) Exec(ctx context.Context) error {
	_, err := gahcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gahcb *GoodArticleHotCreateBulk) ExecX(ctx context.Context) {
	if err := gahcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodArticleHot.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodArticleHotUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (gahcb *GoodArticleHotCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodArticleHotUpsertBulk {
	gahcb.conflict = opts
	return &GoodArticleHotUpsertBulk{
		create: gahcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodArticleHot.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gahcb *GoodArticleHotCreateBulk) OnConflictColumns(columns ...string) *GoodArticleHotUpsertBulk {
	gahcb.conflict = append(gahcb.conflict, sql.ConflictColumns(columns...))
	return &GoodArticleHotUpsertBulk{
		create: gahcb,
	}
}

// GoodArticleHotUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodArticleHot nodes.
type GoodArticleHotUpsertBulk struct {
	create *GoodArticleHotCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodArticleHot.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodarticlehot.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodArticleHotUpsertBulk) UpdateNewValues() *GoodArticleHotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodarticlehot.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(goodarticlehot.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(goodarticlehot.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodArticleHot.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GoodArticleHotUpsertBulk) Ignore() *GoodArticleHotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodArticleHotUpsertBulk) DoNothing() *GoodArticleHotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodArticleHotCreateBulk.OnConflict
// documentation for more info.
func (u *GoodArticleHotUpsertBulk) Update(set func(*GoodArticleHotUpsert)) *GoodArticleHotUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodArticleHotUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *GoodArticleHotUpsertBulk) SetUID(v string) *GoodArticleHotUpsertBulk {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *GoodArticleHotUpsertBulk) UpdateUID() *GoodArticleHotUpsertBulk {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodArticleHotUpsertBulk) SetCreatedAt(v time.Time) *GoodArticleHotUpsertBulk {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodArticleHotUpsertBulk) UpdateCreatedAt() *GoodArticleHotUpsertBulk {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodArticleHotUpsertBulk) SetUpdatedAt(v time.Time) *GoodArticleHotUpsertBulk {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodArticleHotUpsertBulk) UpdateUpdatedAt() *GoodArticleHotUpsertBulk {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *GoodArticleHotUpsertBulk) SetDeactivatedAt(v time.Time) *GoodArticleHotUpsertBulk {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *GoodArticleHotUpsertBulk) UpdateDeactivatedAt() *GoodArticleHotUpsertBulk {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *GoodArticleHotUpsertBulk) ClearDeactivatedAt() *GoodArticleHotUpsertBulk {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetArticleUID sets the "article_uid" field.
func (u *GoodArticleHotUpsertBulk) SetArticleUID(v string) *GoodArticleHotUpsertBulk {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.SetArticleUID(v)
	})
}

// UpdateArticleUID sets the "article_uid" field to the value that was provided on create.
func (u *GoodArticleHotUpsertBulk) UpdateArticleUID() *GoodArticleHotUpsertBulk {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.UpdateArticleUID()
	})
}

// SetHasExpired sets the "has_expired" field.
func (u *GoodArticleHotUpsertBulk) SetHasExpired(v bool) *GoodArticleHotUpsertBulk {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.SetHasExpired(v)
	})
}

// UpdateHasExpired sets the "has_expired" field to the value that was provided on create.
func (u *GoodArticleHotUpsertBulk) UpdateHasExpired() *GoodArticleHotUpsertBulk {
	return u.Update(func(s *GoodArticleHotUpsert) {
		s.UpdateHasExpired()
	})
}

// Exec executes the query.
func (u *GoodArticleHotUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the GoodArticleHotCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for GoodArticleHotCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodArticleHotUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
