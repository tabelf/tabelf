// Code generated by entc, DO NOT EDIT.

package payorder

import (
	"tabelf/backend/gen/entschema/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeactivatedAt applies equality check predicate on the "deactivated_at" field. It's identical to DeactivatedAtEQ.
func DeactivatedAt(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeactivatedAt), v))
	})
}

// OrderNumber applies equality check predicate on the "order_number" field. It's identical to OrderNumberEQ.
func OrderNumber(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNumber), v))
	})
}

// OrderType applies equality check predicate on the "order_type" field. It's identical to OrderTypeEQ.
func OrderType(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderType), v))
	})
}

// UserUID applies equality check predicate on the "user_uid" field. It's identical to UserUIDEQ.
func UserUID(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserUID), v))
	})
}

// PayMethod applies equality check predicate on the "pay_method" field. It's identical to PayMethodEQ.
func PayMethod(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayMethod), v))
	})
}

// PaymentAmount applies equality check predicate on the "payment_amount" field. It's identical to PaymentAmountEQ.
func PaymentAmount(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentAmount), v))
	})
}

// TotalPrice applies equality check predicate on the "total_price" field. It's identical to TotalPriceEQ.
func TotalPrice(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalPrice), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// TransactionNumber applies equality check predicate on the "transaction_number" field. It's identical to TransactionNumberEQ.
func TransactionNumber(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionNumber), v))
	})
}

// ThirdpartyNumber applies equality check predicate on the "thirdparty_number" field. It's identical to ThirdpartyNumberEQ.
func ThirdpartyNumber(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdpartyNumber), v))
	})
}

// MchID applies equality check predicate on the "mch_id" field. It's identical to MchIDEQ.
func MchID(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMchID), v))
	})
}

// OpenID applies equality check predicate on the "open_id" field. It's identical to OpenIDEQ.
func OpenID(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpenID), v))
	})
}

// MemberExpired applies equality check predicate on the "member_expired" field. It's identical to MemberExpiredEQ.
func MemberExpired(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemberExpired), v))
	})
}

// CancelEvent applies equality check predicate on the "cancel_event" field. It's identical to CancelEventEQ.
func CancelEvent(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelEvent), v))
	})
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUID), v))
	})
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUID), v...))
	})
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUID), v...))
	})
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUID), v))
	})
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUID), v))
	})
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUID), v))
	})
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUID), v))
	})
}

// UIDContains applies the Contains predicate on the "uid" field.
func UIDContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUID), v))
	})
}

// UIDHasPrefix applies the HasPrefix predicate on the "uid" field.
func UIDHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUID), v))
	})
}

// UIDHasSuffix applies the HasSuffix predicate on the "uid" field.
func UIDHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUID), v))
	})
}

// UIDEqualFold applies the EqualFold predicate on the "uid" field.
func UIDEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUID), v))
	})
}

// UIDContainsFold applies the ContainsFold predicate on the "uid" field.
func UIDContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeactivatedAtEQ applies the EQ predicate on the "deactivated_at" field.
func DeactivatedAtEQ(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtNEQ applies the NEQ predicate on the "deactivated_at" field.
func DeactivatedAtNEQ(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtIn applies the In predicate on the "deactivated_at" field.
func DeactivatedAtIn(vs ...time.Time) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeactivatedAt), v...))
	})
}

// DeactivatedAtNotIn applies the NotIn predicate on the "deactivated_at" field.
func DeactivatedAtNotIn(vs ...time.Time) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeactivatedAt), v...))
	})
}

// DeactivatedAtGT applies the GT predicate on the "deactivated_at" field.
func DeactivatedAtGT(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtGTE applies the GTE predicate on the "deactivated_at" field.
func DeactivatedAtGTE(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtLT applies the LT predicate on the "deactivated_at" field.
func DeactivatedAtLT(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtLTE applies the LTE predicate on the "deactivated_at" field.
func DeactivatedAtLTE(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtIsNil applies the IsNil predicate on the "deactivated_at" field.
func DeactivatedAtIsNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeactivatedAt)))
	})
}

// DeactivatedAtNotNil applies the NotNil predicate on the "deactivated_at" field.
func DeactivatedAtNotNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeactivatedAt)))
	})
}

// OrderNumberEQ applies the EQ predicate on the "order_number" field.
func OrderNumberEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberNEQ applies the NEQ predicate on the "order_number" field.
func OrderNumberNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberIn applies the In predicate on the "order_number" field.
func OrderNumberIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderNumber), v...))
	})
}

// OrderNumberNotIn applies the NotIn predicate on the "order_number" field.
func OrderNumberNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderNumber), v...))
	})
}

// OrderNumberGT applies the GT predicate on the "order_number" field.
func OrderNumberGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberGTE applies the GTE predicate on the "order_number" field.
func OrderNumberGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberLT applies the LT predicate on the "order_number" field.
func OrderNumberLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberLTE applies the LTE predicate on the "order_number" field.
func OrderNumberLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberContains applies the Contains predicate on the "order_number" field.
func OrderNumberContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberHasPrefix applies the HasPrefix predicate on the "order_number" field.
func OrderNumberHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberHasSuffix applies the HasSuffix predicate on the "order_number" field.
func OrderNumberHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberEqualFold applies the EqualFold predicate on the "order_number" field.
func OrderNumberEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrderNumber), v))
	})
}

// OrderNumberContainsFold applies the ContainsFold predicate on the "order_number" field.
func OrderNumberContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrderNumber), v))
	})
}

// OrderTypeEQ applies the EQ predicate on the "order_type" field.
func OrderTypeEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderType), v))
	})
}

// OrderTypeNEQ applies the NEQ predicate on the "order_type" field.
func OrderTypeNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderType), v))
	})
}

// OrderTypeIn applies the In predicate on the "order_type" field.
func OrderTypeIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderType), v...))
	})
}

// OrderTypeNotIn applies the NotIn predicate on the "order_type" field.
func OrderTypeNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderType), v...))
	})
}

// OrderTypeGT applies the GT predicate on the "order_type" field.
func OrderTypeGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderType), v))
	})
}

// OrderTypeGTE applies the GTE predicate on the "order_type" field.
func OrderTypeGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderType), v))
	})
}

// OrderTypeLT applies the LT predicate on the "order_type" field.
func OrderTypeLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderType), v))
	})
}

// OrderTypeLTE applies the LTE predicate on the "order_type" field.
func OrderTypeLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderType), v))
	})
}

// OrderTypeContains applies the Contains predicate on the "order_type" field.
func OrderTypeContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrderType), v))
	})
}

// OrderTypeHasPrefix applies the HasPrefix predicate on the "order_type" field.
func OrderTypeHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrderType), v))
	})
}

// OrderTypeHasSuffix applies the HasSuffix predicate on the "order_type" field.
func OrderTypeHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrderType), v))
	})
}

// OrderTypeEqualFold applies the EqualFold predicate on the "order_type" field.
func OrderTypeEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrderType), v))
	})
}

// OrderTypeContainsFold applies the ContainsFold predicate on the "order_type" field.
func OrderTypeContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrderType), v))
	})
}

// UserUIDEQ applies the EQ predicate on the "user_uid" field.
func UserUIDEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserUID), v))
	})
}

// UserUIDNEQ applies the NEQ predicate on the "user_uid" field.
func UserUIDNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserUID), v))
	})
}

// UserUIDIn applies the In predicate on the "user_uid" field.
func UserUIDIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserUID), v...))
	})
}

// UserUIDNotIn applies the NotIn predicate on the "user_uid" field.
func UserUIDNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserUID), v...))
	})
}

// UserUIDGT applies the GT predicate on the "user_uid" field.
func UserUIDGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserUID), v))
	})
}

// UserUIDGTE applies the GTE predicate on the "user_uid" field.
func UserUIDGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserUID), v))
	})
}

// UserUIDLT applies the LT predicate on the "user_uid" field.
func UserUIDLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserUID), v))
	})
}

// UserUIDLTE applies the LTE predicate on the "user_uid" field.
func UserUIDLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserUID), v))
	})
}

// UserUIDContains applies the Contains predicate on the "user_uid" field.
func UserUIDContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserUID), v))
	})
}

// UserUIDHasPrefix applies the HasPrefix predicate on the "user_uid" field.
func UserUIDHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserUID), v))
	})
}

// UserUIDHasSuffix applies the HasSuffix predicate on the "user_uid" field.
func UserUIDHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserUID), v))
	})
}

// UserUIDEqualFold applies the EqualFold predicate on the "user_uid" field.
func UserUIDEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserUID), v))
	})
}

// UserUIDContainsFold applies the ContainsFold predicate on the "user_uid" field.
func UserUIDContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserUID), v))
	})
}

// PayMethodEQ applies the EQ predicate on the "pay_method" field.
func PayMethodEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayMethod), v))
	})
}

// PayMethodNEQ applies the NEQ predicate on the "pay_method" field.
func PayMethodNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayMethod), v))
	})
}

// PayMethodIn applies the In predicate on the "pay_method" field.
func PayMethodIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayMethod), v...))
	})
}

// PayMethodNotIn applies the NotIn predicate on the "pay_method" field.
func PayMethodNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayMethod), v...))
	})
}

// PayMethodGT applies the GT predicate on the "pay_method" field.
func PayMethodGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayMethod), v))
	})
}

// PayMethodGTE applies the GTE predicate on the "pay_method" field.
func PayMethodGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayMethod), v))
	})
}

// PayMethodLT applies the LT predicate on the "pay_method" field.
func PayMethodLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayMethod), v))
	})
}

// PayMethodLTE applies the LTE predicate on the "pay_method" field.
func PayMethodLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayMethod), v))
	})
}

// PayMethodContains applies the Contains predicate on the "pay_method" field.
func PayMethodContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPayMethod), v))
	})
}

// PayMethodHasPrefix applies the HasPrefix predicate on the "pay_method" field.
func PayMethodHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPayMethod), v))
	})
}

// PayMethodHasSuffix applies the HasSuffix predicate on the "pay_method" field.
func PayMethodHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPayMethod), v))
	})
}

// PayMethodEqualFold applies the EqualFold predicate on the "pay_method" field.
func PayMethodEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPayMethod), v))
	})
}

// PayMethodContainsFold applies the ContainsFold predicate on the "pay_method" field.
func PayMethodContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPayMethod), v))
	})
}

// PaymentAmountEQ applies the EQ predicate on the "payment_amount" field.
func PaymentAmountEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountNEQ applies the NEQ predicate on the "payment_amount" field.
func PaymentAmountNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountIn applies the In predicate on the "payment_amount" field.
func PaymentAmountIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentAmount), v...))
	})
}

// PaymentAmountNotIn applies the NotIn predicate on the "payment_amount" field.
func PaymentAmountNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentAmount), v...))
	})
}

// PaymentAmountGT applies the GT predicate on the "payment_amount" field.
func PaymentAmountGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountGTE applies the GTE predicate on the "payment_amount" field.
func PaymentAmountGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountLT applies the LT predicate on the "payment_amount" field.
func PaymentAmountLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountLTE applies the LTE predicate on the "payment_amount" field.
func PaymentAmountLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountContains applies the Contains predicate on the "payment_amount" field.
func PaymentAmountContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountHasPrefix applies the HasPrefix predicate on the "payment_amount" field.
func PaymentAmountHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountHasSuffix applies the HasSuffix predicate on the "payment_amount" field.
func PaymentAmountHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountEqualFold applies the EqualFold predicate on the "payment_amount" field.
func PaymentAmountEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPaymentAmount), v))
	})
}

// PaymentAmountContainsFold applies the ContainsFold predicate on the "payment_amount" field.
func PaymentAmountContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPaymentAmount), v))
	})
}

// TotalPriceEQ applies the EQ predicate on the "total_price" field.
func TotalPriceEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceNEQ applies the NEQ predicate on the "total_price" field.
func TotalPriceNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceIn applies the In predicate on the "total_price" field.
func TotalPriceIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotalPrice), v...))
	})
}

// TotalPriceNotIn applies the NotIn predicate on the "total_price" field.
func TotalPriceNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotalPrice), v...))
	})
}

// TotalPriceGT applies the GT predicate on the "total_price" field.
func TotalPriceGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceGTE applies the GTE predicate on the "total_price" field.
func TotalPriceGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceLT applies the LT predicate on the "total_price" field.
func TotalPriceLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceLTE applies the LTE predicate on the "total_price" field.
func TotalPriceLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceContains applies the Contains predicate on the "total_price" field.
func TotalPriceContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceHasPrefix applies the HasPrefix predicate on the "total_price" field.
func TotalPriceHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceHasSuffix applies the HasSuffix predicate on the "total_price" field.
func TotalPriceHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceEqualFold applies the EqualFold predicate on the "total_price" field.
func TotalPriceEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceContainsFold applies the ContainsFold predicate on the "total_price" field.
func TotalPriceContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTotalPrice), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// TransactionNumberEQ applies the EQ predicate on the "transaction_number" field.
func TransactionNumberEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberNEQ applies the NEQ predicate on the "transaction_number" field.
func TransactionNumberNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberIn applies the In predicate on the "transaction_number" field.
func TransactionNumberIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTransactionNumber), v...))
	})
}

// TransactionNumberNotIn applies the NotIn predicate on the "transaction_number" field.
func TransactionNumberNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTransactionNumber), v...))
	})
}

// TransactionNumberGT applies the GT predicate on the "transaction_number" field.
func TransactionNumberGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberGTE applies the GTE predicate on the "transaction_number" field.
func TransactionNumberGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberLT applies the LT predicate on the "transaction_number" field.
func TransactionNumberLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberLTE applies the LTE predicate on the "transaction_number" field.
func TransactionNumberLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberContains applies the Contains predicate on the "transaction_number" field.
func TransactionNumberContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberHasPrefix applies the HasPrefix predicate on the "transaction_number" field.
func TransactionNumberHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberHasSuffix applies the HasSuffix predicate on the "transaction_number" field.
func TransactionNumberHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberIsNil applies the IsNil predicate on the "transaction_number" field.
func TransactionNumberIsNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTransactionNumber)))
	})
}

// TransactionNumberNotNil applies the NotNil predicate on the "transaction_number" field.
func TransactionNumberNotNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTransactionNumber)))
	})
}

// TransactionNumberEqualFold applies the EqualFold predicate on the "transaction_number" field.
func TransactionNumberEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTransactionNumber), v))
	})
}

// TransactionNumberContainsFold applies the ContainsFold predicate on the "transaction_number" field.
func TransactionNumberContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTransactionNumber), v))
	})
}

// ThirdpartyNumberEQ applies the EQ predicate on the "thirdparty_number" field.
func ThirdpartyNumberEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThirdpartyNumber), v))
	})
}

// ThirdpartyNumberNEQ applies the NEQ predicate on the "thirdparty_number" field.
func ThirdpartyNumberNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThirdpartyNumber), v))
	})
}

// ThirdpartyNumberIn applies the In predicate on the "thirdparty_number" field.
func ThirdpartyNumberIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThirdpartyNumber), v...))
	})
}

// ThirdpartyNumberNotIn applies the NotIn predicate on the "thirdparty_number" field.
func ThirdpartyNumberNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThirdpartyNumber), v...))
	})
}

// ThirdpartyNumberGT applies the GT predicate on the "thirdparty_number" field.
func ThirdpartyNumberGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThirdpartyNumber), v))
	})
}

// ThirdpartyNumberGTE applies the GTE predicate on the "thirdparty_number" field.
func ThirdpartyNumberGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThirdpartyNumber), v))
	})
}

// ThirdpartyNumberLT applies the LT predicate on the "thirdparty_number" field.
func ThirdpartyNumberLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThirdpartyNumber), v))
	})
}

// ThirdpartyNumberLTE applies the LTE predicate on the "thirdparty_number" field.
func ThirdpartyNumberLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThirdpartyNumber), v))
	})
}

// ThirdpartyNumberContains applies the Contains predicate on the "thirdparty_number" field.
func ThirdpartyNumberContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThirdpartyNumber), v))
	})
}

// ThirdpartyNumberHasPrefix applies the HasPrefix predicate on the "thirdparty_number" field.
func ThirdpartyNumberHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThirdpartyNumber), v))
	})
}

// ThirdpartyNumberHasSuffix applies the HasSuffix predicate on the "thirdparty_number" field.
func ThirdpartyNumberHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThirdpartyNumber), v))
	})
}

// ThirdpartyNumberIsNil applies the IsNil predicate on the "thirdparty_number" field.
func ThirdpartyNumberIsNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThirdpartyNumber)))
	})
}

// ThirdpartyNumberNotNil applies the NotNil predicate on the "thirdparty_number" field.
func ThirdpartyNumberNotNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThirdpartyNumber)))
	})
}

// ThirdpartyNumberEqualFold applies the EqualFold predicate on the "thirdparty_number" field.
func ThirdpartyNumberEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThirdpartyNumber), v))
	})
}

// ThirdpartyNumberContainsFold applies the ContainsFold predicate on the "thirdparty_number" field.
func ThirdpartyNumberContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThirdpartyNumber), v))
	})
}

// MchIDEQ applies the EQ predicate on the "mch_id" field.
func MchIDEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMchID), v))
	})
}

// MchIDNEQ applies the NEQ predicate on the "mch_id" field.
func MchIDNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMchID), v))
	})
}

// MchIDIn applies the In predicate on the "mch_id" field.
func MchIDIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMchID), v...))
	})
}

// MchIDNotIn applies the NotIn predicate on the "mch_id" field.
func MchIDNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMchID), v...))
	})
}

// MchIDGT applies the GT predicate on the "mch_id" field.
func MchIDGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMchID), v))
	})
}

// MchIDGTE applies the GTE predicate on the "mch_id" field.
func MchIDGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMchID), v))
	})
}

// MchIDLT applies the LT predicate on the "mch_id" field.
func MchIDLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMchID), v))
	})
}

// MchIDLTE applies the LTE predicate on the "mch_id" field.
func MchIDLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMchID), v))
	})
}

// MchIDContains applies the Contains predicate on the "mch_id" field.
func MchIDContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMchID), v))
	})
}

// MchIDHasPrefix applies the HasPrefix predicate on the "mch_id" field.
func MchIDHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMchID), v))
	})
}

// MchIDHasSuffix applies the HasSuffix predicate on the "mch_id" field.
func MchIDHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMchID), v))
	})
}

// MchIDIsNil applies the IsNil predicate on the "mch_id" field.
func MchIDIsNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMchID)))
	})
}

// MchIDNotNil applies the NotNil predicate on the "mch_id" field.
func MchIDNotNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMchID)))
	})
}

// MchIDEqualFold applies the EqualFold predicate on the "mch_id" field.
func MchIDEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMchID), v))
	})
}

// MchIDContainsFold applies the ContainsFold predicate on the "mch_id" field.
func MchIDContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMchID), v))
	})
}

// OpenIDEQ applies the EQ predicate on the "open_id" field.
func OpenIDEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpenID), v))
	})
}

// OpenIDNEQ applies the NEQ predicate on the "open_id" field.
func OpenIDNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpenID), v))
	})
}

// OpenIDIn applies the In predicate on the "open_id" field.
func OpenIDIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpenID), v...))
	})
}

// OpenIDNotIn applies the NotIn predicate on the "open_id" field.
func OpenIDNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpenID), v...))
	})
}

// OpenIDGT applies the GT predicate on the "open_id" field.
func OpenIDGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpenID), v))
	})
}

// OpenIDGTE applies the GTE predicate on the "open_id" field.
func OpenIDGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpenID), v))
	})
}

// OpenIDLT applies the LT predicate on the "open_id" field.
func OpenIDLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpenID), v))
	})
}

// OpenIDLTE applies the LTE predicate on the "open_id" field.
func OpenIDLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpenID), v))
	})
}

// OpenIDContains applies the Contains predicate on the "open_id" field.
func OpenIDContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOpenID), v))
	})
}

// OpenIDHasPrefix applies the HasPrefix predicate on the "open_id" field.
func OpenIDHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOpenID), v))
	})
}

// OpenIDHasSuffix applies the HasSuffix predicate on the "open_id" field.
func OpenIDHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOpenID), v))
	})
}

// OpenIDIsNil applies the IsNil predicate on the "open_id" field.
func OpenIDIsNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOpenID)))
	})
}

// OpenIDNotNil applies the NotNil predicate on the "open_id" field.
func OpenIDNotNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOpenID)))
	})
}

// OpenIDEqualFold applies the EqualFold predicate on the "open_id" field.
func OpenIDEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOpenID), v))
	})
}

// OpenIDContainsFold applies the ContainsFold predicate on the "open_id" field.
func OpenIDContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOpenID), v))
	})
}

// MemberExpiredEQ applies the EQ predicate on the "member_expired" field.
func MemberExpiredEQ(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemberExpired), v))
	})
}

// MemberExpiredNEQ applies the NEQ predicate on the "member_expired" field.
func MemberExpiredNEQ(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMemberExpired), v))
	})
}

// MemberExpiredIn applies the In predicate on the "member_expired" field.
func MemberExpiredIn(vs ...time.Time) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMemberExpired), v...))
	})
}

// MemberExpiredNotIn applies the NotIn predicate on the "member_expired" field.
func MemberExpiredNotIn(vs ...time.Time) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMemberExpired), v...))
	})
}

// MemberExpiredGT applies the GT predicate on the "member_expired" field.
func MemberExpiredGT(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMemberExpired), v))
	})
}

// MemberExpiredGTE applies the GTE predicate on the "member_expired" field.
func MemberExpiredGTE(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMemberExpired), v))
	})
}

// MemberExpiredLT applies the LT predicate on the "member_expired" field.
func MemberExpiredLT(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMemberExpired), v))
	})
}

// MemberExpiredLTE applies the LTE predicate on the "member_expired" field.
func MemberExpiredLTE(v time.Time) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMemberExpired), v))
	})
}

// MemberExpiredIsNil applies the IsNil predicate on the "member_expired" field.
func MemberExpiredIsNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMemberExpired)))
	})
}

// MemberExpiredNotNil applies the NotNil predicate on the "member_expired" field.
func MemberExpiredNotNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMemberExpired)))
	})
}

// CancelEventEQ applies the EQ predicate on the "cancel_event" field.
func CancelEventEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelEvent), v))
	})
}

// CancelEventNEQ applies the NEQ predicate on the "cancel_event" field.
func CancelEventNEQ(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCancelEvent), v))
	})
}

// CancelEventIn applies the In predicate on the "cancel_event" field.
func CancelEventIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCancelEvent), v...))
	})
}

// CancelEventNotIn applies the NotIn predicate on the "cancel_event" field.
func CancelEventNotIn(vs ...string) predicate.PayOrder {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PayOrder(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCancelEvent), v...))
	})
}

// CancelEventGT applies the GT predicate on the "cancel_event" field.
func CancelEventGT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCancelEvent), v))
	})
}

// CancelEventGTE applies the GTE predicate on the "cancel_event" field.
func CancelEventGTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCancelEvent), v))
	})
}

// CancelEventLT applies the LT predicate on the "cancel_event" field.
func CancelEventLT(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCancelEvent), v))
	})
}

// CancelEventLTE applies the LTE predicate on the "cancel_event" field.
func CancelEventLTE(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCancelEvent), v))
	})
}

// CancelEventContains applies the Contains predicate on the "cancel_event" field.
func CancelEventContains(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCancelEvent), v))
	})
}

// CancelEventHasPrefix applies the HasPrefix predicate on the "cancel_event" field.
func CancelEventHasPrefix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCancelEvent), v))
	})
}

// CancelEventHasSuffix applies the HasSuffix predicate on the "cancel_event" field.
func CancelEventHasSuffix(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCancelEvent), v))
	})
}

// CancelEventIsNil applies the IsNil predicate on the "cancel_event" field.
func CancelEventIsNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCancelEvent)))
	})
}

// CancelEventNotNil applies the NotNil predicate on the "cancel_event" field.
func CancelEventNotNil() predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCancelEvent)))
	})
}

// CancelEventEqualFold applies the EqualFold predicate on the "cancel_event" field.
func CancelEventEqualFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCancelEvent), v))
	})
}

// CancelEventContainsFold applies the ContainsFold predicate on the "cancel_event" field.
func CancelEventContainsFold(v string) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCancelEvent), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PayOrder) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PayOrder) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PayOrder) predicate.PayOrder {
	return predicate.PayOrder(func(s *sql.Selector) {
		p(s.Not())
	})
}
