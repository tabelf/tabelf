// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/predicate"
	"tabelf/backend/gen/entschema/stationcategory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StationCategoryUpdate is the builder for updating StationCategory entities.
type StationCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *StationCategoryMutation
}

// Where appends a list predicates to the StationCategoryUpdate builder.
func (scu *StationCategoryUpdate) Where(ps ...predicate.StationCategory) *StationCategoryUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *StationCategoryUpdate) SetUpdatedAt(t time.Time) *StationCategoryUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (scu *StationCategoryUpdate) SetDeactivatedAt(t time.Time) *StationCategoryUpdate {
	scu.mutation.SetDeactivatedAt(t)
	return scu
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (scu *StationCategoryUpdate) SetNillableDeactivatedAt(t *time.Time) *StationCategoryUpdate {
	if t != nil {
		scu.SetDeactivatedAt(*t)
	}
	return scu
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (scu *StationCategoryUpdate) ClearDeactivatedAt() *StationCategoryUpdate {
	scu.mutation.ClearDeactivatedAt()
	return scu
}

// SetName sets the "name" field.
func (scu *StationCategoryUpdate) SetName(s string) *StationCategoryUpdate {
	scu.mutation.SetName(s)
	return scu
}

// SetStatus sets the "status" field.
func (scu *StationCategoryUpdate) SetStatus(b bool) *StationCategoryUpdate {
	scu.mutation.SetStatus(b)
	return scu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (scu *StationCategoryUpdate) SetNillableStatus(b *bool) *StationCategoryUpdate {
	if b != nil {
		scu.SetStatus(*b)
	}
	return scu
}

// SetSequence sets the "sequence" field.
func (scu *StationCategoryUpdate) SetSequence(i int) *StationCategoryUpdate {
	scu.mutation.ResetSequence()
	scu.mutation.SetSequence(i)
	return scu
}

// AddSequence adds i to the "sequence" field.
func (scu *StationCategoryUpdate) AddSequence(i int) *StationCategoryUpdate {
	scu.mutation.AddSequence(i)
	return scu
}

// Mutation returns the StationCategoryMutation object of the builder.
func (scu *StationCategoryUpdate) Mutation() *StationCategoryMutation {
	return scu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *StationCategoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	scu.defaults()
	if len(scu.hooks) == 0 {
		affected, err = scu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StationCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			scu.mutation = mutation
			affected, err = scu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(scu.hooks) - 1; i >= 0; i-- {
			if scu.hooks[i] == nil {
				return 0, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = scu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (scu *StationCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *StationCategoryUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *StationCategoryUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *StationCategoryUpdate) defaults() {
	if _, ok := scu.mutation.UpdatedAt(); !ok {
		v := stationcategory.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
}

func (scu *StationCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stationcategory.Table,
			Columns: stationcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: stationcategory.FieldID,
			},
		},
	}
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stationcategory.FieldUpdatedAt,
		})
	}
	if value, ok := scu.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stationcategory.FieldDeactivatedAt,
		})
	}
	if scu.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: stationcategory.FieldDeactivatedAt,
		})
	}
	if value, ok := scu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stationcategory.FieldName,
		})
	}
	if value, ok := scu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: stationcategory.FieldStatus,
		})
	}
	if value, ok := scu.mutation.Sequence(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stationcategory.FieldSequence,
		})
	}
	if value, ok := scu.mutation.AddedSequence(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stationcategory.FieldSequence,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stationcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StationCategoryUpdateOne is the builder for updating a single StationCategory entity.
type StationCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StationCategoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *StationCategoryUpdateOne) SetUpdatedAt(t time.Time) *StationCategoryUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (scuo *StationCategoryUpdateOne) SetDeactivatedAt(t time.Time) *StationCategoryUpdateOne {
	scuo.mutation.SetDeactivatedAt(t)
	return scuo
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (scuo *StationCategoryUpdateOne) SetNillableDeactivatedAt(t *time.Time) *StationCategoryUpdateOne {
	if t != nil {
		scuo.SetDeactivatedAt(*t)
	}
	return scuo
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (scuo *StationCategoryUpdateOne) ClearDeactivatedAt() *StationCategoryUpdateOne {
	scuo.mutation.ClearDeactivatedAt()
	return scuo
}

// SetName sets the "name" field.
func (scuo *StationCategoryUpdateOne) SetName(s string) *StationCategoryUpdateOne {
	scuo.mutation.SetName(s)
	return scuo
}

// SetStatus sets the "status" field.
func (scuo *StationCategoryUpdateOne) SetStatus(b bool) *StationCategoryUpdateOne {
	scuo.mutation.SetStatus(b)
	return scuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (scuo *StationCategoryUpdateOne) SetNillableStatus(b *bool) *StationCategoryUpdateOne {
	if b != nil {
		scuo.SetStatus(*b)
	}
	return scuo
}

// SetSequence sets the "sequence" field.
func (scuo *StationCategoryUpdateOne) SetSequence(i int) *StationCategoryUpdateOne {
	scuo.mutation.ResetSequence()
	scuo.mutation.SetSequence(i)
	return scuo
}

// AddSequence adds i to the "sequence" field.
func (scuo *StationCategoryUpdateOne) AddSequence(i int) *StationCategoryUpdateOne {
	scuo.mutation.AddSequence(i)
	return scuo
}

// Mutation returns the StationCategoryMutation object of the builder.
func (scuo *StationCategoryUpdateOne) Mutation() *StationCategoryMutation {
	return scuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *StationCategoryUpdateOne) Select(field string, fields ...string) *StationCategoryUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated StationCategory entity.
func (scuo *StationCategoryUpdateOne) Save(ctx context.Context) (*StationCategory, error) {
	var (
		err  error
		node *StationCategory
	)
	scuo.defaults()
	if len(scuo.hooks) == 0 {
		node, err = scuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StationCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			scuo.mutation = mutation
			node, err = scuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(scuo.hooks) - 1; i >= 0; i-- {
			if scuo.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = scuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *StationCategoryUpdateOne) SaveX(ctx context.Context) *StationCategory {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *StationCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *StationCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *StationCategoryUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdatedAt(); !ok {
		v := stationcategory.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
}

func (scuo *StationCategoryUpdateOne) sqlSave(ctx context.Context) (_node *StationCategory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stationcategory.Table,
			Columns: stationcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: stationcategory.FieldID,
			},
		},
	}
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entschema: missing "StationCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stationcategory.FieldID)
		for _, f := range fields {
			if !stationcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entschema: invalid field %q for query", f)}
			}
			if f != stationcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stationcategory.FieldUpdatedAt,
		})
	}
	if value, ok := scuo.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stationcategory.FieldDeactivatedAt,
		})
	}
	if scuo.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: stationcategory.FieldDeactivatedAt,
		})
	}
	if value, ok := scuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stationcategory.FieldName,
		})
	}
	if value, ok := scuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: stationcategory.FieldStatus,
		})
	}
	if value, ok := scuo.mutation.Sequence(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stationcategory.FieldSequence,
		})
	}
	if value, ok := scuo.mutation.AddedSequence(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stationcategory.FieldSequence,
		})
	}
	_node = &StationCategory{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stationcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
