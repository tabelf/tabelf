// Code generated by entc, DO NOT EDIT.

package recharge

import (
	"tabelf/backend/gen/entschema/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeactivatedAt applies equality check predicate on the "deactivated_at" field. It's identical to DeactivatedAtEQ.
func DeactivatedAt(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeactivatedAt), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// OriginAmount applies equality check predicate on the "origin_amount" field. It's identical to OriginAmountEQ.
func OriginAmount(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginAmount), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// ThemeColor applies equality check predicate on the "theme_color" field. It's identical to ThemeColorEQ.
func ThemeColor(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeColor), v))
	})
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v int) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYear), v))
	})
}

// Month applies equality check predicate on the "month" field. It's identical to MonthEQ.
func Month(v int) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonth), v))
	})
}

// Default applies equality check predicate on the "default" field. It's identical to DefaultEQ.
func Default(v bool) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefault), v))
	})
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUID), v))
	})
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...string) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUID), v...))
	})
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...string) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUID), v...))
	})
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUID), v))
	})
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUID), v))
	})
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUID), v))
	})
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUID), v))
	})
}

// UIDContains applies the Contains predicate on the "uid" field.
func UIDContains(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUID), v))
	})
}

// UIDHasPrefix applies the HasPrefix predicate on the "uid" field.
func UIDHasPrefix(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUID), v))
	})
}

// UIDHasSuffix applies the HasSuffix predicate on the "uid" field.
func UIDHasSuffix(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUID), v))
	})
}

// UIDEqualFold applies the EqualFold predicate on the "uid" field.
func UIDEqualFold(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUID), v))
	})
}

// UIDContainsFold applies the ContainsFold predicate on the "uid" field.
func UIDContainsFold(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeactivatedAtEQ applies the EQ predicate on the "deactivated_at" field.
func DeactivatedAtEQ(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtNEQ applies the NEQ predicate on the "deactivated_at" field.
func DeactivatedAtNEQ(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtIn applies the In predicate on the "deactivated_at" field.
func DeactivatedAtIn(vs ...time.Time) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeactivatedAt), v...))
	})
}

// DeactivatedAtNotIn applies the NotIn predicate on the "deactivated_at" field.
func DeactivatedAtNotIn(vs ...time.Time) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeactivatedAt), v...))
	})
}

// DeactivatedAtGT applies the GT predicate on the "deactivated_at" field.
func DeactivatedAtGT(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtGTE applies the GTE predicate on the "deactivated_at" field.
func DeactivatedAtGTE(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtLT applies the LT predicate on the "deactivated_at" field.
func DeactivatedAtLT(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtLTE applies the LTE predicate on the "deactivated_at" field.
func DeactivatedAtLTE(v time.Time) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeactivatedAt), v))
	})
}

// DeactivatedAtIsNil applies the IsNil predicate on the "deactivated_at" field.
func DeactivatedAtIsNil() predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeactivatedAt)))
	})
}

// DeactivatedAtNotNil applies the NotNil predicate on the "deactivated_at" field.
func DeactivatedAtNotNil() predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeactivatedAt)))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// OriginAmountEQ applies the EQ predicate on the "origin_amount" field.
func OriginAmountEQ(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOriginAmount), v))
	})
}

// OriginAmountNEQ applies the NEQ predicate on the "origin_amount" field.
func OriginAmountNEQ(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOriginAmount), v))
	})
}

// OriginAmountIn applies the In predicate on the "origin_amount" field.
func OriginAmountIn(vs ...string) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOriginAmount), v...))
	})
}

// OriginAmountNotIn applies the NotIn predicate on the "origin_amount" field.
func OriginAmountNotIn(vs ...string) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOriginAmount), v...))
	})
}

// OriginAmountGT applies the GT predicate on the "origin_amount" field.
func OriginAmountGT(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOriginAmount), v))
	})
}

// OriginAmountGTE applies the GTE predicate on the "origin_amount" field.
func OriginAmountGTE(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOriginAmount), v))
	})
}

// OriginAmountLT applies the LT predicate on the "origin_amount" field.
func OriginAmountLT(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOriginAmount), v))
	})
}

// OriginAmountLTE applies the LTE predicate on the "origin_amount" field.
func OriginAmountLTE(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOriginAmount), v))
	})
}

// OriginAmountContains applies the Contains predicate on the "origin_amount" field.
func OriginAmountContains(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOriginAmount), v))
	})
}

// OriginAmountHasPrefix applies the HasPrefix predicate on the "origin_amount" field.
func OriginAmountHasPrefix(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOriginAmount), v))
	})
}

// OriginAmountHasSuffix applies the HasSuffix predicate on the "origin_amount" field.
func OriginAmountHasSuffix(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOriginAmount), v))
	})
}

// OriginAmountEqualFold applies the EqualFold predicate on the "origin_amount" field.
func OriginAmountEqualFold(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOriginAmount), v))
	})
}

// OriginAmountContainsFold applies the ContainsFold predicate on the "origin_amount" field.
func OriginAmountContainsFold(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOriginAmount), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...string) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...string) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AmountContains applies the Contains predicate on the "amount" field.
func AmountContains(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAmount), v))
	})
}

// AmountHasPrefix applies the HasPrefix predicate on the "amount" field.
func AmountHasPrefix(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAmount), v))
	})
}

// AmountHasSuffix applies the HasSuffix predicate on the "amount" field.
func AmountHasSuffix(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAmount), v))
	})
}

// AmountEqualFold applies the EqualFold predicate on the "amount" field.
func AmountEqualFold(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAmount), v))
	})
}

// AmountContainsFold applies the ContainsFold predicate on the "amount" field.
func AmountContainsFold(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAmount), v))
	})
}

// ThemeColorEQ applies the EQ predicate on the "theme_color" field.
func ThemeColorEQ(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThemeColor), v))
	})
}

// ThemeColorNEQ applies the NEQ predicate on the "theme_color" field.
func ThemeColorNEQ(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThemeColor), v))
	})
}

// ThemeColorIn applies the In predicate on the "theme_color" field.
func ThemeColorIn(vs ...string) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldThemeColor), v...))
	})
}

// ThemeColorNotIn applies the NotIn predicate on the "theme_color" field.
func ThemeColorNotIn(vs ...string) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldThemeColor), v...))
	})
}

// ThemeColorGT applies the GT predicate on the "theme_color" field.
func ThemeColorGT(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThemeColor), v))
	})
}

// ThemeColorGTE applies the GTE predicate on the "theme_color" field.
func ThemeColorGTE(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThemeColor), v))
	})
}

// ThemeColorLT applies the LT predicate on the "theme_color" field.
func ThemeColorLT(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThemeColor), v))
	})
}

// ThemeColorLTE applies the LTE predicate on the "theme_color" field.
func ThemeColorLTE(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThemeColor), v))
	})
}

// ThemeColorContains applies the Contains predicate on the "theme_color" field.
func ThemeColorContains(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThemeColor), v))
	})
}

// ThemeColorHasPrefix applies the HasPrefix predicate on the "theme_color" field.
func ThemeColorHasPrefix(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThemeColor), v))
	})
}

// ThemeColorHasSuffix applies the HasSuffix predicate on the "theme_color" field.
func ThemeColorHasSuffix(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThemeColor), v))
	})
}

// ThemeColorIsNil applies the IsNil predicate on the "theme_color" field.
func ThemeColorIsNil() predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThemeColor)))
	})
}

// ThemeColorNotNil applies the NotNil predicate on the "theme_color" field.
func ThemeColorNotNil() predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThemeColor)))
	})
}

// ThemeColorEqualFold applies the EqualFold predicate on the "theme_color" field.
func ThemeColorEqualFold(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThemeColor), v))
	})
}

// ThemeColorContainsFold applies the ContainsFold predicate on the "theme_color" field.
func ThemeColorContainsFold(v string) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThemeColor), v))
	})
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v int) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYear), v))
	})
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v int) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYear), v))
	})
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...int) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldYear), v...))
	})
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...int) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldYear), v...))
	})
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v int) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYear), v))
	})
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v int) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYear), v))
	})
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v int) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYear), v))
	})
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v int) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYear), v))
	})
}

// MonthEQ applies the EQ predicate on the "month" field.
func MonthEQ(v int) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonth), v))
	})
}

// MonthNEQ applies the NEQ predicate on the "month" field.
func MonthNEQ(v int) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMonth), v))
	})
}

// MonthIn applies the In predicate on the "month" field.
func MonthIn(vs ...int) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMonth), v...))
	})
}

// MonthNotIn applies the NotIn predicate on the "month" field.
func MonthNotIn(vs ...int) predicate.Recharge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recharge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMonth), v...))
	})
}

// MonthGT applies the GT predicate on the "month" field.
func MonthGT(v int) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMonth), v))
	})
}

// MonthGTE applies the GTE predicate on the "month" field.
func MonthGTE(v int) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMonth), v))
	})
}

// MonthLT applies the LT predicate on the "month" field.
func MonthLT(v int) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMonth), v))
	})
}

// MonthLTE applies the LTE predicate on the "month" field.
func MonthLTE(v int) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMonth), v))
	})
}

// DefaultEQ applies the EQ predicate on the "default" field.
func DefaultEQ(v bool) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefault), v))
	})
}

// DefaultNEQ applies the NEQ predicate on the "default" field.
func DefaultNEQ(v bool) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefault), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Recharge) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Recharge) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Recharge) predicate.Recharge {
	return predicate.Recharge(func(s *sql.Selector) {
		p(s.Not())
	})
}
