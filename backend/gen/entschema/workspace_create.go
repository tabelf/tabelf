// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/workspace"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkspaceCreate is the builder for creating a Workspace entity.
type WorkspaceCreate struct {
	config
	mutation *WorkspaceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (wc *WorkspaceCreate) SetUID(s string) *WorkspaceCreate {
	wc.mutation.SetUID(s)
	return wc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (wc *WorkspaceCreate) SetNillableUID(s *string) *WorkspaceCreate {
	if s != nil {
		wc.SetUID(*s)
	}
	return wc
}

// SetCreatedAt sets the "created_at" field.
func (wc *WorkspaceCreate) SetCreatedAt(t time.Time) *WorkspaceCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wc *WorkspaceCreate) SetNillableCreatedAt(t *time.Time) *WorkspaceCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetUpdatedAt sets the "updated_at" field.
func (wc *WorkspaceCreate) SetUpdatedAt(t time.Time) *WorkspaceCreate {
	wc.mutation.SetUpdatedAt(t)
	return wc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wc *WorkspaceCreate) SetNillableUpdatedAt(t *time.Time) *WorkspaceCreate {
	if t != nil {
		wc.SetUpdatedAt(*t)
	}
	return wc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (wc *WorkspaceCreate) SetDeactivatedAt(t time.Time) *WorkspaceCreate {
	wc.mutation.SetDeactivatedAt(t)
	return wc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (wc *WorkspaceCreate) SetNillableDeactivatedAt(t *time.Time) *WorkspaceCreate {
	if t != nil {
		wc.SetDeactivatedAt(*t)
	}
	return wc
}

// SetName sets the "name" field.
func (wc *WorkspaceCreate) SetName(s string) *WorkspaceCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetType sets the "type" field.
func (wc *WorkspaceCreate) SetType(i int) *WorkspaceCreate {
	wc.mutation.SetType(i)
	return wc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (wc *WorkspaceCreate) SetNillableType(i *int) *WorkspaceCreate {
	if i != nil {
		wc.SetType(*i)
	}
	return wc
}

// SetUserUID sets the "user_uid" field.
func (wc *WorkspaceCreate) SetUserUID(s string) *WorkspaceCreate {
	wc.mutation.SetUserUID(s)
	return wc
}

// SetPersonalFolderUID sets the "personal_folder_uid" field.
func (wc *WorkspaceCreate) SetPersonalFolderUID(s string) *WorkspaceCreate {
	wc.mutation.SetPersonalFolderUID(s)
	return wc
}

// SetNillablePersonalFolderUID sets the "personal_folder_uid" field if the given value is not nil.
func (wc *WorkspaceCreate) SetNillablePersonalFolderUID(s *string) *WorkspaceCreate {
	if s != nil {
		wc.SetPersonalFolderUID(*s)
	}
	return wc
}

// SetTeamFolderUID sets the "team_folder_uid" field.
func (wc *WorkspaceCreate) SetTeamFolderUID(s string) *WorkspaceCreate {
	wc.mutation.SetTeamFolderUID(s)
	return wc
}

// SetNillableTeamFolderUID sets the "team_folder_uid" field if the given value is not nil.
func (wc *WorkspaceCreate) SetNillableTeamFolderUID(s *string) *WorkspaceCreate {
	if s != nil {
		wc.SetTeamFolderUID(*s)
	}
	return wc
}

// SetIsOpen sets the "is_open" field.
func (wc *WorkspaceCreate) SetIsOpen(b bool) *WorkspaceCreate {
	wc.mutation.SetIsOpen(b)
	return wc
}

// SetNillableIsOpen sets the "is_open" field if the given value is not nil.
func (wc *WorkspaceCreate) SetNillableIsOpen(b *bool) *WorkspaceCreate {
	if b != nil {
		wc.SetIsOpen(*b)
	}
	return wc
}

// SetID sets the "id" field.
func (wc *WorkspaceCreate) SetID(u uint64) *WorkspaceCreate {
	wc.mutation.SetID(u)
	return wc
}

// Mutation returns the WorkspaceMutation object of the builder.
func (wc *WorkspaceCreate) Mutation() *WorkspaceMutation {
	return wc.mutation
}

// Save creates the Workspace in the database.
func (wc *WorkspaceCreate) Save(ctx context.Context) (*Workspace, error) {
	var (
		err  error
		node *Workspace
	)
	wc.defaults()
	if len(wc.hooks) == 0 {
		if err = wc.check(); err != nil {
			return nil, err
		}
		node, err = wc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkspaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wc.check(); err != nil {
				return nil, err
			}
			wc.mutation = mutation
			if node, err = wc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wc.hooks) - 1; i >= 0; i-- {
			if wc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = wc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WorkspaceCreate) SaveX(ctx context.Context) *Workspace {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WorkspaceCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WorkspaceCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WorkspaceCreate) defaults() {
	if _, ok := wc.mutation.UID(); !ok {
		v := workspace.DefaultUID()
		wc.mutation.SetUID(v)
	}
	if _, ok := wc.mutation.CreatedAt(); !ok {
		v := workspace.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		v := workspace.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wc.mutation.GetType(); !ok {
		v := workspace.DefaultType
		wc.mutation.SetType(v)
	}
	if _, ok := wc.mutation.IsOpen(); !ok {
		v := workspace.DefaultIsOpen
		wc.mutation.SetIsOpen(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WorkspaceCreate) check() error {
	if _, ok := wc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "Workspace.uid"`)}
	}
	if v, ok := wc.mutation.UID(); ok {
		if err := workspace.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "Workspace.uid": %w`, err)}
		}
	}
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "Workspace.created_at"`)}
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "Workspace.updated_at"`)}
	}
	if _, ok := wc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`entschema: missing required field "Workspace.name"`)}
	}
	if _, ok := wc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`entschema: missing required field "Workspace.type"`)}
	}
	if _, ok := wc.mutation.UserUID(); !ok {
		return &ValidationError{Name: "user_uid", err: errors.New(`entschema: missing required field "Workspace.user_uid"`)}
	}
	if _, ok := wc.mutation.IsOpen(); !ok {
		return &ValidationError{Name: "is_open", err: errors.New(`entschema: missing required field "Workspace.is_open"`)}
	}
	return nil
}

func (wc *WorkspaceCreate) sqlSave(ctx context.Context) (*Workspace, error) {
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (wc *WorkspaceCreate) createSpec() (*Workspace, *sqlgraph.CreateSpec) {
	var (
		_node = &Workspace{config: wc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: workspace.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: workspace.FieldID,
			},
		}
	)
	_spec.OnConflict = wc.conflict
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workspace.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workspace.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workspace.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := wc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: workspace.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := wc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workspace.FieldName,
		})
		_node.Name = value
	}
	if value, ok := wc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: workspace.FieldType,
		})
		_node.Type = value
	}
	if value, ok := wc.mutation.UserUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workspace.FieldUserUID,
		})
		_node.UserUID = value
	}
	if value, ok := wc.mutation.PersonalFolderUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workspace.FieldPersonalFolderUID,
		})
		_node.PersonalFolderUID = value
	}
	if value, ok := wc.mutation.TeamFolderUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: workspace.FieldTeamFolderUID,
		})
		_node.TeamFolderUID = value
	}
	if value, ok := wc.mutation.IsOpen(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: workspace.FieldIsOpen,
		})
		_node.IsOpen = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Workspace.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkspaceUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (wc *WorkspaceCreate) OnConflict(opts ...sql.ConflictOption) *WorkspaceUpsertOne {
	wc.conflict = opts
	return &WorkspaceUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Workspace.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (wc *WorkspaceCreate) OnConflictColumns(columns ...string) *WorkspaceUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &WorkspaceUpsertOne{
		create: wc,
	}
}

type (
	// WorkspaceUpsertOne is the builder for "upsert"-ing
	//  one Workspace node.
	WorkspaceUpsertOne struct {
		create *WorkspaceCreate
	}

	// WorkspaceUpsert is the "OnConflict" setter.
	WorkspaceUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *WorkspaceUpsert) SetUID(v string) *WorkspaceUpsert {
	u.Set(workspace.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *WorkspaceUpsert) UpdateUID() *WorkspaceUpsert {
	u.SetExcluded(workspace.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *WorkspaceUpsert) SetCreatedAt(v time.Time) *WorkspaceUpsert {
	u.Set(workspace.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WorkspaceUpsert) UpdateCreatedAt() *WorkspaceUpsert {
	u.SetExcluded(workspace.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceUpsert) SetUpdatedAt(v time.Time) *WorkspaceUpsert {
	u.Set(workspace.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceUpsert) UpdateUpdatedAt() *WorkspaceUpsert {
	u.SetExcluded(workspace.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *WorkspaceUpsert) SetDeactivatedAt(v time.Time) *WorkspaceUpsert {
	u.Set(workspace.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *WorkspaceUpsert) UpdateDeactivatedAt() *WorkspaceUpsert {
	u.SetExcluded(workspace.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *WorkspaceUpsert) ClearDeactivatedAt() *WorkspaceUpsert {
	u.SetNull(workspace.FieldDeactivatedAt)
	return u
}

// SetName sets the "name" field.
func (u *WorkspaceUpsert) SetName(v string) *WorkspaceUpsert {
	u.Set(workspace.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WorkspaceUpsert) UpdateName() *WorkspaceUpsert {
	u.SetExcluded(workspace.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *WorkspaceUpsert) SetType(v int) *WorkspaceUpsert {
	u.Set(workspace.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WorkspaceUpsert) UpdateType() *WorkspaceUpsert {
	u.SetExcluded(workspace.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *WorkspaceUpsert) AddType(v int) *WorkspaceUpsert {
	u.Add(workspace.FieldType, v)
	return u
}

// SetUserUID sets the "user_uid" field.
func (u *WorkspaceUpsert) SetUserUID(v string) *WorkspaceUpsert {
	u.Set(workspace.FieldUserUID, v)
	return u
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *WorkspaceUpsert) UpdateUserUID() *WorkspaceUpsert {
	u.SetExcluded(workspace.FieldUserUID)
	return u
}

// SetPersonalFolderUID sets the "personal_folder_uid" field.
func (u *WorkspaceUpsert) SetPersonalFolderUID(v string) *WorkspaceUpsert {
	u.Set(workspace.FieldPersonalFolderUID, v)
	return u
}

// UpdatePersonalFolderUID sets the "personal_folder_uid" field to the value that was provided on create.
func (u *WorkspaceUpsert) UpdatePersonalFolderUID() *WorkspaceUpsert {
	u.SetExcluded(workspace.FieldPersonalFolderUID)
	return u
}

// ClearPersonalFolderUID clears the value of the "personal_folder_uid" field.
func (u *WorkspaceUpsert) ClearPersonalFolderUID() *WorkspaceUpsert {
	u.SetNull(workspace.FieldPersonalFolderUID)
	return u
}

// SetTeamFolderUID sets the "team_folder_uid" field.
func (u *WorkspaceUpsert) SetTeamFolderUID(v string) *WorkspaceUpsert {
	u.Set(workspace.FieldTeamFolderUID, v)
	return u
}

// UpdateTeamFolderUID sets the "team_folder_uid" field to the value that was provided on create.
func (u *WorkspaceUpsert) UpdateTeamFolderUID() *WorkspaceUpsert {
	u.SetExcluded(workspace.FieldTeamFolderUID)
	return u
}

// ClearTeamFolderUID clears the value of the "team_folder_uid" field.
func (u *WorkspaceUpsert) ClearTeamFolderUID() *WorkspaceUpsert {
	u.SetNull(workspace.FieldTeamFolderUID)
	return u
}

// SetIsOpen sets the "is_open" field.
func (u *WorkspaceUpsert) SetIsOpen(v bool) *WorkspaceUpsert {
	u.Set(workspace.FieldIsOpen, v)
	return u
}

// UpdateIsOpen sets the "is_open" field to the value that was provided on create.
func (u *WorkspaceUpsert) UpdateIsOpen() *WorkspaceUpsert {
	u.SetExcluded(workspace.FieldIsOpen)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Workspace.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workspace.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *WorkspaceUpsertOne) UpdateNewValues() *WorkspaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(workspace.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(workspace.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(workspace.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Workspace.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *WorkspaceUpsertOne) Ignore() *WorkspaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkspaceUpsertOne) DoNothing() *WorkspaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkspaceCreate.OnConflict
// documentation for more info.
func (u *WorkspaceUpsertOne) Update(set func(*WorkspaceUpsert)) *WorkspaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkspaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *WorkspaceUpsertOne) SetUID(v string) *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *WorkspaceUpsertOne) UpdateUID() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *WorkspaceUpsertOne) SetCreatedAt(v time.Time) *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WorkspaceUpsertOne) UpdateCreatedAt() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceUpsertOne) SetUpdatedAt(v time.Time) *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceUpsertOne) UpdateUpdatedAt() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *WorkspaceUpsertOne) SetDeactivatedAt(v time.Time) *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *WorkspaceUpsertOne) UpdateDeactivatedAt() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *WorkspaceUpsertOne) ClearDeactivatedAt() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetName sets the "name" field.
func (u *WorkspaceUpsertOne) SetName(v string) *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WorkspaceUpsertOne) UpdateName() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *WorkspaceUpsertOne) SetType(v int) *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *WorkspaceUpsertOne) AddType(v int) *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WorkspaceUpsertOne) UpdateType() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateType()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *WorkspaceUpsertOne) SetUserUID(v string) *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *WorkspaceUpsertOne) UpdateUserUID() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateUserUID()
	})
}

// SetPersonalFolderUID sets the "personal_folder_uid" field.
func (u *WorkspaceUpsertOne) SetPersonalFolderUID(v string) *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetPersonalFolderUID(v)
	})
}

// UpdatePersonalFolderUID sets the "personal_folder_uid" field to the value that was provided on create.
func (u *WorkspaceUpsertOne) UpdatePersonalFolderUID() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdatePersonalFolderUID()
	})
}

// ClearPersonalFolderUID clears the value of the "personal_folder_uid" field.
func (u *WorkspaceUpsertOne) ClearPersonalFolderUID() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.ClearPersonalFolderUID()
	})
}

// SetTeamFolderUID sets the "team_folder_uid" field.
func (u *WorkspaceUpsertOne) SetTeamFolderUID(v string) *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetTeamFolderUID(v)
	})
}

// UpdateTeamFolderUID sets the "team_folder_uid" field to the value that was provided on create.
func (u *WorkspaceUpsertOne) UpdateTeamFolderUID() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateTeamFolderUID()
	})
}

// ClearTeamFolderUID clears the value of the "team_folder_uid" field.
func (u *WorkspaceUpsertOne) ClearTeamFolderUID() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.ClearTeamFolderUID()
	})
}

// SetIsOpen sets the "is_open" field.
func (u *WorkspaceUpsertOne) SetIsOpen(v bool) *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetIsOpen(v)
	})
}

// UpdateIsOpen sets the "is_open" field to the value that was provided on create.
func (u *WorkspaceUpsertOne) UpdateIsOpen() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateIsOpen()
	})
}

// Exec executes the query.
func (u *WorkspaceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for WorkspaceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkspaceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkspaceUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkspaceUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkspaceCreateBulk is the builder for creating many Workspace entities in bulk.
type WorkspaceCreateBulk struct {
	config
	builders []*WorkspaceCreate
	conflict []sql.ConflictOption
}

// Save creates the Workspace entities in the database.
func (wcb *WorkspaceCreateBulk) Save(ctx context.Context) ([]*Workspace, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Workspace, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkspaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WorkspaceCreateBulk) SaveX(ctx context.Context) []*Workspace {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WorkspaceCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WorkspaceCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Workspace.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkspaceUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (wcb *WorkspaceCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkspaceUpsertBulk {
	wcb.conflict = opts
	return &WorkspaceUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Workspace.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (wcb *WorkspaceCreateBulk) OnConflictColumns(columns ...string) *WorkspaceUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &WorkspaceUpsertBulk{
		create: wcb,
	}
}

// WorkspaceUpsertBulk is the builder for "upsert"-ing
// a bulk of Workspace nodes.
type WorkspaceUpsertBulk struct {
	create *WorkspaceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Workspace.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workspace.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *WorkspaceUpsertBulk) UpdateNewValues() *WorkspaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(workspace.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(workspace.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(workspace.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Workspace.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *WorkspaceUpsertBulk) Ignore() *WorkspaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkspaceUpsertBulk) DoNothing() *WorkspaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkspaceCreateBulk.OnConflict
// documentation for more info.
func (u *WorkspaceUpsertBulk) Update(set func(*WorkspaceUpsert)) *WorkspaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkspaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *WorkspaceUpsertBulk) SetUID(v string) *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *WorkspaceUpsertBulk) UpdateUID() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *WorkspaceUpsertBulk) SetCreatedAt(v time.Time) *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WorkspaceUpsertBulk) UpdateCreatedAt() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceUpsertBulk) SetUpdatedAt(v time.Time) *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceUpsertBulk) UpdateUpdatedAt() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *WorkspaceUpsertBulk) SetDeactivatedAt(v time.Time) *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *WorkspaceUpsertBulk) UpdateDeactivatedAt() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *WorkspaceUpsertBulk) ClearDeactivatedAt() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetName sets the "name" field.
func (u *WorkspaceUpsertBulk) SetName(v string) *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WorkspaceUpsertBulk) UpdateName() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *WorkspaceUpsertBulk) SetType(v int) *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *WorkspaceUpsertBulk) AddType(v int) *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *WorkspaceUpsertBulk) UpdateType() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateType()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *WorkspaceUpsertBulk) SetUserUID(v string) *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *WorkspaceUpsertBulk) UpdateUserUID() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateUserUID()
	})
}

// SetPersonalFolderUID sets the "personal_folder_uid" field.
func (u *WorkspaceUpsertBulk) SetPersonalFolderUID(v string) *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetPersonalFolderUID(v)
	})
}

// UpdatePersonalFolderUID sets the "personal_folder_uid" field to the value that was provided on create.
func (u *WorkspaceUpsertBulk) UpdatePersonalFolderUID() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdatePersonalFolderUID()
	})
}

// ClearPersonalFolderUID clears the value of the "personal_folder_uid" field.
func (u *WorkspaceUpsertBulk) ClearPersonalFolderUID() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.ClearPersonalFolderUID()
	})
}

// SetTeamFolderUID sets the "team_folder_uid" field.
func (u *WorkspaceUpsertBulk) SetTeamFolderUID(v string) *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetTeamFolderUID(v)
	})
}

// UpdateTeamFolderUID sets the "team_folder_uid" field to the value that was provided on create.
func (u *WorkspaceUpsertBulk) UpdateTeamFolderUID() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateTeamFolderUID()
	})
}

// ClearTeamFolderUID clears the value of the "team_folder_uid" field.
func (u *WorkspaceUpsertBulk) ClearTeamFolderUID() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.ClearTeamFolderUID()
	})
}

// SetIsOpen sets the "is_open" field.
func (u *WorkspaceUpsertBulk) SetIsOpen(v bool) *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetIsOpen(v)
	})
}

// UpdateIsOpen sets the "is_open" field to the value that was provided on create.
func (u *WorkspaceUpsertBulk) UpdateIsOpen() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateIsOpen()
	})
}

// Exec executes the query.
func (u *WorkspaceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the WorkspaceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for WorkspaceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkspaceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
