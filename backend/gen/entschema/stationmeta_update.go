// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/predicate"
	"tabelf/backend/gen/entschema/stationmeta"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StationMetaUpdate is the builder for updating StationMeta entities.
type StationMetaUpdate struct {
	config
	hooks    []Hook
	mutation *StationMetaMutation
}

// Where appends a list predicates to the StationMetaUpdate builder.
func (smu *StationMetaUpdate) Where(ps ...predicate.StationMeta) *StationMetaUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetUpdatedAt sets the "updated_at" field.
func (smu *StationMetaUpdate) SetUpdatedAt(t time.Time) *StationMetaUpdate {
	smu.mutation.SetUpdatedAt(t)
	return smu
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (smu *StationMetaUpdate) SetDeactivatedAt(t time.Time) *StationMetaUpdate {
	smu.mutation.SetDeactivatedAt(t)
	return smu
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (smu *StationMetaUpdate) SetNillableDeactivatedAt(t *time.Time) *StationMetaUpdate {
	if t != nil {
		smu.SetDeactivatedAt(*t)
	}
	return smu
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (smu *StationMetaUpdate) ClearDeactivatedAt() *StationMetaUpdate {
	smu.mutation.ClearDeactivatedAt()
	return smu
}

// SetStationUID sets the "station_uid" field.
func (smu *StationMetaUpdate) SetStationUID(s string) *StationMetaUpdate {
	smu.mutation.SetStationUID(s)
	return smu
}

// SetUserUID sets the "user_uid" field.
func (smu *StationMetaUpdate) SetUserUID(s string) *StationMetaUpdate {
	smu.mutation.SetUserUID(s)
	return smu
}

// SetHasPraise sets the "has_praise" field.
func (smu *StationMetaUpdate) SetHasPraise(b bool) *StationMetaUpdate {
	smu.mutation.SetHasPraise(b)
	return smu
}

// SetNillableHasPraise sets the "has_praise" field if the given value is not nil.
func (smu *StationMetaUpdate) SetNillableHasPraise(b *bool) *StationMetaUpdate {
	if b != nil {
		smu.SetHasPraise(*b)
	}
	return smu
}

// SetHasStar sets the "has_star" field.
func (smu *StationMetaUpdate) SetHasStar(b bool) *StationMetaUpdate {
	smu.mutation.SetHasStar(b)
	return smu
}

// SetNillableHasStar sets the "has_star" field if the given value is not nil.
func (smu *StationMetaUpdate) SetNillableHasStar(b *bool) *StationMetaUpdate {
	if b != nil {
		smu.SetHasStar(*b)
	}
	return smu
}

// SetHasView sets the "has_view" field.
func (smu *StationMetaUpdate) SetHasView(b bool) *StationMetaUpdate {
	smu.mutation.SetHasView(b)
	return smu
}

// SetNillableHasView sets the "has_view" field if the given value is not nil.
func (smu *StationMetaUpdate) SetNillableHasView(b *bool) *StationMetaUpdate {
	if b != nil {
		smu.SetHasView(*b)
	}
	return smu
}

// Mutation returns the StationMetaMutation object of the builder.
func (smu *StationMetaUpdate) Mutation() *StationMetaMutation {
	return smu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *StationMetaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	smu.defaults()
	if len(smu.hooks) == 0 {
		affected, err = smu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StationMetaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			smu.mutation = mutation
			affected, err = smu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(smu.hooks) - 1; i >= 0; i-- {
			if smu.hooks[i] == nil {
				return 0, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = smu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (smu *StationMetaUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *StationMetaUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *StationMetaUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smu *StationMetaUpdate) defaults() {
	if _, ok := smu.mutation.UpdatedAt(); !ok {
		v := stationmeta.UpdateDefaultUpdatedAt()
		smu.mutation.SetUpdatedAt(v)
	}
}

func (smu *StationMetaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stationmeta.Table,
			Columns: stationmeta.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: stationmeta.FieldID,
			},
		},
	}
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stationmeta.FieldUpdatedAt,
		})
	}
	if value, ok := smu.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stationmeta.FieldDeactivatedAt,
		})
	}
	if smu.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: stationmeta.FieldDeactivatedAt,
		})
	}
	if value, ok := smu.mutation.StationUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stationmeta.FieldStationUID,
		})
	}
	if value, ok := smu.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stationmeta.FieldUserUID,
		})
	}
	if value, ok := smu.mutation.HasPraise(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: stationmeta.FieldHasPraise,
		})
	}
	if value, ok := smu.mutation.HasStar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: stationmeta.FieldHasStar,
		})
	}
	if value, ok := smu.mutation.HasView(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: stationmeta.FieldHasView,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stationmeta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StationMetaUpdateOne is the builder for updating a single StationMeta entity.
type StationMetaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StationMetaMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (smuo *StationMetaUpdateOne) SetUpdatedAt(t time.Time) *StationMetaUpdateOne {
	smuo.mutation.SetUpdatedAt(t)
	return smuo
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (smuo *StationMetaUpdateOne) SetDeactivatedAt(t time.Time) *StationMetaUpdateOne {
	smuo.mutation.SetDeactivatedAt(t)
	return smuo
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (smuo *StationMetaUpdateOne) SetNillableDeactivatedAt(t *time.Time) *StationMetaUpdateOne {
	if t != nil {
		smuo.SetDeactivatedAt(*t)
	}
	return smuo
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (smuo *StationMetaUpdateOne) ClearDeactivatedAt() *StationMetaUpdateOne {
	smuo.mutation.ClearDeactivatedAt()
	return smuo
}

// SetStationUID sets the "station_uid" field.
func (smuo *StationMetaUpdateOne) SetStationUID(s string) *StationMetaUpdateOne {
	smuo.mutation.SetStationUID(s)
	return smuo
}

// SetUserUID sets the "user_uid" field.
func (smuo *StationMetaUpdateOne) SetUserUID(s string) *StationMetaUpdateOne {
	smuo.mutation.SetUserUID(s)
	return smuo
}

// SetHasPraise sets the "has_praise" field.
func (smuo *StationMetaUpdateOne) SetHasPraise(b bool) *StationMetaUpdateOne {
	smuo.mutation.SetHasPraise(b)
	return smuo
}

// SetNillableHasPraise sets the "has_praise" field if the given value is not nil.
func (smuo *StationMetaUpdateOne) SetNillableHasPraise(b *bool) *StationMetaUpdateOne {
	if b != nil {
		smuo.SetHasPraise(*b)
	}
	return smuo
}

// SetHasStar sets the "has_star" field.
func (smuo *StationMetaUpdateOne) SetHasStar(b bool) *StationMetaUpdateOne {
	smuo.mutation.SetHasStar(b)
	return smuo
}

// SetNillableHasStar sets the "has_star" field if the given value is not nil.
func (smuo *StationMetaUpdateOne) SetNillableHasStar(b *bool) *StationMetaUpdateOne {
	if b != nil {
		smuo.SetHasStar(*b)
	}
	return smuo
}

// SetHasView sets the "has_view" field.
func (smuo *StationMetaUpdateOne) SetHasView(b bool) *StationMetaUpdateOne {
	smuo.mutation.SetHasView(b)
	return smuo
}

// SetNillableHasView sets the "has_view" field if the given value is not nil.
func (smuo *StationMetaUpdateOne) SetNillableHasView(b *bool) *StationMetaUpdateOne {
	if b != nil {
		smuo.SetHasView(*b)
	}
	return smuo
}

// Mutation returns the StationMetaMutation object of the builder.
func (smuo *StationMetaUpdateOne) Mutation() *StationMetaMutation {
	return smuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *StationMetaUpdateOne) Select(field string, fields ...string) *StationMetaUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated StationMeta entity.
func (smuo *StationMetaUpdateOne) Save(ctx context.Context) (*StationMeta, error) {
	var (
		err  error
		node *StationMeta
	)
	smuo.defaults()
	if len(smuo.hooks) == 0 {
		node, err = smuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StationMetaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			smuo.mutation = mutation
			node, err = smuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(smuo.hooks) - 1; i >= 0; i-- {
			if smuo.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = smuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *StationMetaUpdateOne) SaveX(ctx context.Context) *StationMeta {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *StationMetaUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *StationMetaUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smuo *StationMetaUpdateOne) defaults() {
	if _, ok := smuo.mutation.UpdatedAt(); !ok {
		v := stationmeta.UpdateDefaultUpdatedAt()
		smuo.mutation.SetUpdatedAt(v)
	}
}

func (smuo *StationMetaUpdateOne) sqlSave(ctx context.Context) (_node *StationMeta, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stationmeta.Table,
			Columns: stationmeta.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: stationmeta.FieldID,
			},
		},
	}
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entschema: missing "StationMeta.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stationmeta.FieldID)
		for _, f := range fields {
			if !stationmeta.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entschema: invalid field %q for query", f)}
			}
			if f != stationmeta.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stationmeta.FieldUpdatedAt,
		})
	}
	if value, ok := smuo.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stationmeta.FieldDeactivatedAt,
		})
	}
	if smuo.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: stationmeta.FieldDeactivatedAt,
		})
	}
	if value, ok := smuo.mutation.StationUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stationmeta.FieldStationUID,
		})
	}
	if value, ok := smuo.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stationmeta.FieldUserUID,
		})
	}
	if value, ok := smuo.mutation.HasPraise(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: stationmeta.FieldHasPraise,
		})
	}
	if value, ok := smuo.mutation.HasStar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: stationmeta.FieldHasStar,
		})
	}
	if value, ok := smuo.mutation.HasView(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: stationmeta.FieldHasView,
		})
	}
	_node = &StationMeta{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stationmeta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
