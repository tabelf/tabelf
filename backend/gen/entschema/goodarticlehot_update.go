// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/goodarticlehot"
	"tabelf/backend/gen/entschema/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GoodArticleHotUpdate is the builder for updating GoodArticleHot entities.
type GoodArticleHotUpdate struct {
	config
	hooks    []Hook
	mutation *GoodArticleHotMutation
}

// Where appends a list predicates to the GoodArticleHotUpdate builder.
func (gahu *GoodArticleHotUpdate) Where(ps ...predicate.GoodArticleHot) *GoodArticleHotUpdate {
	gahu.mutation.Where(ps...)
	return gahu
}

// SetUpdatedAt sets the "updated_at" field.
func (gahu *GoodArticleHotUpdate) SetUpdatedAt(t time.Time) *GoodArticleHotUpdate {
	gahu.mutation.SetUpdatedAt(t)
	return gahu
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (gahu *GoodArticleHotUpdate) SetDeactivatedAt(t time.Time) *GoodArticleHotUpdate {
	gahu.mutation.SetDeactivatedAt(t)
	return gahu
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (gahu *GoodArticleHotUpdate) SetNillableDeactivatedAt(t *time.Time) *GoodArticleHotUpdate {
	if t != nil {
		gahu.SetDeactivatedAt(*t)
	}
	return gahu
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (gahu *GoodArticleHotUpdate) ClearDeactivatedAt() *GoodArticleHotUpdate {
	gahu.mutation.ClearDeactivatedAt()
	return gahu
}

// SetArticleUID sets the "article_uid" field.
func (gahu *GoodArticleHotUpdate) SetArticleUID(s string) *GoodArticleHotUpdate {
	gahu.mutation.SetArticleUID(s)
	return gahu
}

// SetHasExpired sets the "has_expired" field.
func (gahu *GoodArticleHotUpdate) SetHasExpired(b bool) *GoodArticleHotUpdate {
	gahu.mutation.SetHasExpired(b)
	return gahu
}

// SetNillableHasExpired sets the "has_expired" field if the given value is not nil.
func (gahu *GoodArticleHotUpdate) SetNillableHasExpired(b *bool) *GoodArticleHotUpdate {
	if b != nil {
		gahu.SetHasExpired(*b)
	}
	return gahu
}

// Mutation returns the GoodArticleHotMutation object of the builder.
func (gahu *GoodArticleHotUpdate) Mutation() *GoodArticleHotMutation {
	return gahu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gahu *GoodArticleHotUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gahu.defaults()
	if len(gahu.hooks) == 0 {
		affected, err = gahu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodArticleHotMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gahu.mutation = mutation
			affected, err = gahu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gahu.hooks) - 1; i >= 0; i-- {
			if gahu.hooks[i] == nil {
				return 0, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = gahu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gahu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gahu *GoodArticleHotUpdate) SaveX(ctx context.Context) int {
	affected, err := gahu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gahu *GoodArticleHotUpdate) Exec(ctx context.Context) error {
	_, err := gahu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gahu *GoodArticleHotUpdate) ExecX(ctx context.Context) {
	if err := gahu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gahu *GoodArticleHotUpdate) defaults() {
	if _, ok := gahu.mutation.UpdatedAt(); !ok {
		v := goodarticlehot.UpdateDefaultUpdatedAt()
		gahu.mutation.SetUpdatedAt(v)
	}
}

func (gahu *GoodArticleHotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodarticlehot.Table,
			Columns: goodarticlehot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: goodarticlehot.FieldID,
			},
		},
	}
	if ps := gahu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gahu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlehot.FieldUpdatedAt,
		})
	}
	if value, ok := gahu.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlehot.FieldDeactivatedAt,
		})
	}
	if gahu.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodarticlehot.FieldDeactivatedAt,
		})
	}
	if value, ok := gahu.mutation.ArticleUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticlehot.FieldArticleUID,
		})
	}
	if value, ok := gahu.mutation.HasExpired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodarticlehot.FieldHasExpired,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gahu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodarticlehot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GoodArticleHotUpdateOne is the builder for updating a single GoodArticleHot entity.
type GoodArticleHotUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodArticleHotMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (gahuo *GoodArticleHotUpdateOne) SetUpdatedAt(t time.Time) *GoodArticleHotUpdateOne {
	gahuo.mutation.SetUpdatedAt(t)
	return gahuo
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (gahuo *GoodArticleHotUpdateOne) SetDeactivatedAt(t time.Time) *GoodArticleHotUpdateOne {
	gahuo.mutation.SetDeactivatedAt(t)
	return gahuo
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (gahuo *GoodArticleHotUpdateOne) SetNillableDeactivatedAt(t *time.Time) *GoodArticleHotUpdateOne {
	if t != nil {
		gahuo.SetDeactivatedAt(*t)
	}
	return gahuo
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (gahuo *GoodArticleHotUpdateOne) ClearDeactivatedAt() *GoodArticleHotUpdateOne {
	gahuo.mutation.ClearDeactivatedAt()
	return gahuo
}

// SetArticleUID sets the "article_uid" field.
func (gahuo *GoodArticleHotUpdateOne) SetArticleUID(s string) *GoodArticleHotUpdateOne {
	gahuo.mutation.SetArticleUID(s)
	return gahuo
}

// SetHasExpired sets the "has_expired" field.
func (gahuo *GoodArticleHotUpdateOne) SetHasExpired(b bool) *GoodArticleHotUpdateOne {
	gahuo.mutation.SetHasExpired(b)
	return gahuo
}

// SetNillableHasExpired sets the "has_expired" field if the given value is not nil.
func (gahuo *GoodArticleHotUpdateOne) SetNillableHasExpired(b *bool) *GoodArticleHotUpdateOne {
	if b != nil {
		gahuo.SetHasExpired(*b)
	}
	return gahuo
}

// Mutation returns the GoodArticleHotMutation object of the builder.
func (gahuo *GoodArticleHotUpdateOne) Mutation() *GoodArticleHotMutation {
	return gahuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gahuo *GoodArticleHotUpdateOne) Select(field string, fields ...string) *GoodArticleHotUpdateOne {
	gahuo.fields = append([]string{field}, fields...)
	return gahuo
}

// Save executes the query and returns the updated GoodArticleHot entity.
func (gahuo *GoodArticleHotUpdateOne) Save(ctx context.Context) (*GoodArticleHot, error) {
	var (
		err  error
		node *GoodArticleHot
	)
	gahuo.defaults()
	if len(gahuo.hooks) == 0 {
		node, err = gahuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodArticleHotMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gahuo.mutation = mutation
			node, err = gahuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gahuo.hooks) - 1; i >= 0; i-- {
			if gahuo.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = gahuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gahuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gahuo *GoodArticleHotUpdateOne) SaveX(ctx context.Context) *GoodArticleHot {
	node, err := gahuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gahuo *GoodArticleHotUpdateOne) Exec(ctx context.Context) error {
	_, err := gahuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gahuo *GoodArticleHotUpdateOne) ExecX(ctx context.Context) {
	if err := gahuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gahuo *GoodArticleHotUpdateOne) defaults() {
	if _, ok := gahuo.mutation.UpdatedAt(); !ok {
		v := goodarticlehot.UpdateDefaultUpdatedAt()
		gahuo.mutation.SetUpdatedAt(v)
	}
}

func (gahuo *GoodArticleHotUpdateOne) sqlSave(ctx context.Context) (_node *GoodArticleHot, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodarticlehot.Table,
			Columns: goodarticlehot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: goodarticlehot.FieldID,
			},
		},
	}
	id, ok := gahuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entschema: missing "GoodArticleHot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gahuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodarticlehot.FieldID)
		for _, f := range fields {
			if !goodarticlehot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entschema: invalid field %q for query", f)}
			}
			if f != goodarticlehot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gahuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gahuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlehot.FieldUpdatedAt,
		})
	}
	if value, ok := gahuo.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlehot.FieldDeactivatedAt,
		})
	}
	if gahuo.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodarticlehot.FieldDeactivatedAt,
		})
	}
	if value, ok := gahuo.mutation.ArticleUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticlehot.FieldArticleUID,
		})
	}
	if value, ok := gahuo.mutation.HasExpired(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodarticlehot.FieldHasExpired,
		})
	}
	_node = &GoodArticleHot{config: gahuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gahuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodarticlehot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
