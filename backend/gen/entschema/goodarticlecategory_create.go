// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/goodarticlecategory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GoodArticleCategoryCreate is the builder for creating a GoodArticleCategory entity.
type GoodArticleCategoryCreate struct {
	config
	mutation *GoodArticleCategoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (gacc *GoodArticleCategoryCreate) SetUID(s string) *GoodArticleCategoryCreate {
	gacc.mutation.SetUID(s)
	return gacc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (gacc *GoodArticleCategoryCreate) SetNillableUID(s *string) *GoodArticleCategoryCreate {
	if s != nil {
		gacc.SetUID(*s)
	}
	return gacc
}

// SetCreatedAt sets the "created_at" field.
func (gacc *GoodArticleCategoryCreate) SetCreatedAt(t time.Time) *GoodArticleCategoryCreate {
	gacc.mutation.SetCreatedAt(t)
	return gacc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gacc *GoodArticleCategoryCreate) SetNillableCreatedAt(t *time.Time) *GoodArticleCategoryCreate {
	if t != nil {
		gacc.SetCreatedAt(*t)
	}
	return gacc
}

// SetUpdatedAt sets the "updated_at" field.
func (gacc *GoodArticleCategoryCreate) SetUpdatedAt(t time.Time) *GoodArticleCategoryCreate {
	gacc.mutation.SetUpdatedAt(t)
	return gacc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gacc *GoodArticleCategoryCreate) SetNillableUpdatedAt(t *time.Time) *GoodArticleCategoryCreate {
	if t != nil {
		gacc.SetUpdatedAt(*t)
	}
	return gacc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (gacc *GoodArticleCategoryCreate) SetDeactivatedAt(t time.Time) *GoodArticleCategoryCreate {
	gacc.mutation.SetDeactivatedAt(t)
	return gacc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (gacc *GoodArticleCategoryCreate) SetNillableDeactivatedAt(t *time.Time) *GoodArticleCategoryCreate {
	if t != nil {
		gacc.SetDeactivatedAt(*t)
	}
	return gacc
}

// SetName sets the "name" field.
func (gacc *GoodArticleCategoryCreate) SetName(s string) *GoodArticleCategoryCreate {
	gacc.mutation.SetName(s)
	return gacc
}

// SetStatus sets the "status" field.
func (gacc *GoodArticleCategoryCreate) SetStatus(b bool) *GoodArticleCategoryCreate {
	gacc.mutation.SetStatus(b)
	return gacc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gacc *GoodArticleCategoryCreate) SetNillableStatus(b *bool) *GoodArticleCategoryCreate {
	if b != nil {
		gacc.SetStatus(*b)
	}
	return gacc
}

// SetSequence sets the "sequence" field.
func (gacc *GoodArticleCategoryCreate) SetSequence(i int) *GoodArticleCategoryCreate {
	gacc.mutation.SetSequence(i)
	return gacc
}

// SetID sets the "id" field.
func (gacc *GoodArticleCategoryCreate) SetID(u uint64) *GoodArticleCategoryCreate {
	gacc.mutation.SetID(u)
	return gacc
}

// Mutation returns the GoodArticleCategoryMutation object of the builder.
func (gacc *GoodArticleCategoryCreate) Mutation() *GoodArticleCategoryMutation {
	return gacc.mutation
}

// Save creates the GoodArticleCategory in the database.
func (gacc *GoodArticleCategoryCreate) Save(ctx context.Context) (*GoodArticleCategory, error) {
	var (
		err  error
		node *GoodArticleCategory
	)
	gacc.defaults()
	if len(gacc.hooks) == 0 {
		if err = gacc.check(); err != nil {
			return nil, err
		}
		node, err = gacc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodArticleCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gacc.check(); err != nil {
				return nil, err
			}
			gacc.mutation = mutation
			if node, err = gacc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gacc.hooks) - 1; i >= 0; i-- {
			if gacc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = gacc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gacc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gacc *GoodArticleCategoryCreate) SaveX(ctx context.Context) *GoodArticleCategory {
	v, err := gacc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gacc *GoodArticleCategoryCreate) Exec(ctx context.Context) error {
	_, err := gacc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gacc *GoodArticleCategoryCreate) ExecX(ctx context.Context) {
	if err := gacc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gacc *GoodArticleCategoryCreate) defaults() {
	if _, ok := gacc.mutation.UID(); !ok {
		v := goodarticlecategory.DefaultUID()
		gacc.mutation.SetUID(v)
	}
	if _, ok := gacc.mutation.CreatedAt(); !ok {
		v := goodarticlecategory.DefaultCreatedAt()
		gacc.mutation.SetCreatedAt(v)
	}
	if _, ok := gacc.mutation.UpdatedAt(); !ok {
		v := goodarticlecategory.DefaultUpdatedAt()
		gacc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gacc.mutation.Status(); !ok {
		v := goodarticlecategory.DefaultStatus
		gacc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gacc *GoodArticleCategoryCreate) check() error {
	if _, ok := gacc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "GoodArticleCategory.uid"`)}
	}
	if v, ok := gacc.mutation.UID(); ok {
		if err := goodarticlecategory.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "GoodArticleCategory.uid": %w`, err)}
		}
	}
	if _, ok := gacc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "GoodArticleCategory.created_at"`)}
	}
	if _, ok := gacc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "GoodArticleCategory.updated_at"`)}
	}
	if _, ok := gacc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`entschema: missing required field "GoodArticleCategory.name"`)}
	}
	if _, ok := gacc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`entschema: missing required field "GoodArticleCategory.status"`)}
	}
	if _, ok := gacc.mutation.Sequence(); !ok {
		return &ValidationError{Name: "sequence", err: errors.New(`entschema: missing required field "GoodArticleCategory.sequence"`)}
	}
	return nil
}

func (gacc *GoodArticleCategoryCreate) sqlSave(ctx context.Context) (*GoodArticleCategory, error) {
	_node, _spec := gacc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gacc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (gacc *GoodArticleCategoryCreate) createSpec() (*GoodArticleCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodArticleCategory{config: gacc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodarticlecategory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: goodarticlecategory.FieldID,
			},
		}
	)
	_spec.OnConflict = gacc.conflict
	if id, ok := gacc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gacc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticlecategory.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := gacc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlecategory.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gacc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlecategory.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := gacc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlecategory.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := gacc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticlecategory.FieldName,
		})
		_node.Name = value
	}
	if value, ok := gacc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodarticlecategory.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := gacc.mutation.Sequence(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: goodarticlecategory.FieldSequence,
		})
		_node.Sequence = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodArticleCategory.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodArticleCategoryUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (gacc *GoodArticleCategoryCreate) OnConflict(opts ...sql.ConflictOption) *GoodArticleCategoryUpsertOne {
	gacc.conflict = opts
	return &GoodArticleCategoryUpsertOne{
		create: gacc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodArticleCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gacc *GoodArticleCategoryCreate) OnConflictColumns(columns ...string) *GoodArticleCategoryUpsertOne {
	gacc.conflict = append(gacc.conflict, sql.ConflictColumns(columns...))
	return &GoodArticleCategoryUpsertOne{
		create: gacc,
	}
}

type (
	// GoodArticleCategoryUpsertOne is the builder for "upsert"-ing
	//  one GoodArticleCategory node.
	GoodArticleCategoryUpsertOne struct {
		create *GoodArticleCategoryCreate
	}

	// GoodArticleCategoryUpsert is the "OnConflict" setter.
	GoodArticleCategoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *GoodArticleCategoryUpsert) SetUID(v string) *GoodArticleCategoryUpsert {
	u.Set(goodarticlecategory.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsert) UpdateUID() *GoodArticleCategoryUpsert {
	u.SetExcluded(goodarticlecategory.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodArticleCategoryUpsert) SetCreatedAt(v time.Time) *GoodArticleCategoryUpsert {
	u.Set(goodarticlecategory.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsert) UpdateCreatedAt() *GoodArticleCategoryUpsert {
	u.SetExcluded(goodarticlecategory.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodArticleCategoryUpsert) SetUpdatedAt(v time.Time) *GoodArticleCategoryUpsert {
	u.Set(goodarticlecategory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsert) UpdateUpdatedAt() *GoodArticleCategoryUpsert {
	u.SetExcluded(goodarticlecategory.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *GoodArticleCategoryUpsert) SetDeactivatedAt(v time.Time) *GoodArticleCategoryUpsert {
	u.Set(goodarticlecategory.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsert) UpdateDeactivatedAt() *GoodArticleCategoryUpsert {
	u.SetExcluded(goodarticlecategory.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *GoodArticleCategoryUpsert) ClearDeactivatedAt() *GoodArticleCategoryUpsert {
	u.SetNull(goodarticlecategory.FieldDeactivatedAt)
	return u
}

// SetName sets the "name" field.
func (u *GoodArticleCategoryUpsert) SetName(v string) *GoodArticleCategoryUpsert {
	u.Set(goodarticlecategory.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsert) UpdateName() *GoodArticleCategoryUpsert {
	u.SetExcluded(goodarticlecategory.FieldName)
	return u
}

// SetStatus sets the "status" field.
func (u *GoodArticleCategoryUpsert) SetStatus(v bool) *GoodArticleCategoryUpsert {
	u.Set(goodarticlecategory.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsert) UpdateStatus() *GoodArticleCategoryUpsert {
	u.SetExcluded(goodarticlecategory.FieldStatus)
	return u
}

// SetSequence sets the "sequence" field.
func (u *GoodArticleCategoryUpsert) SetSequence(v int) *GoodArticleCategoryUpsert {
	u.Set(goodarticlecategory.FieldSequence, v)
	return u
}

// UpdateSequence sets the "sequence" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsert) UpdateSequence() *GoodArticleCategoryUpsert {
	u.SetExcluded(goodarticlecategory.FieldSequence)
	return u
}

// AddSequence adds v to the "sequence" field.
func (u *GoodArticleCategoryUpsert) AddSequence(v int) *GoodArticleCategoryUpsert {
	u.Add(goodarticlecategory.FieldSequence, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodArticleCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodarticlecategory.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodArticleCategoryUpsertOne) UpdateNewValues() *GoodArticleCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodarticlecategory.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(goodarticlecategory.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(goodarticlecategory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GoodArticleCategory.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GoodArticleCategoryUpsertOne) Ignore() *GoodArticleCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodArticleCategoryUpsertOne) DoNothing() *GoodArticleCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodArticleCategoryCreate.OnConflict
// documentation for more info.
func (u *GoodArticleCategoryUpsertOne) Update(set func(*GoodArticleCategoryUpsert)) *GoodArticleCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodArticleCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *GoodArticleCategoryUpsertOne) SetUID(v string) *GoodArticleCategoryUpsertOne {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsertOne) UpdateUID() *GoodArticleCategoryUpsertOne {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodArticleCategoryUpsertOne) SetCreatedAt(v time.Time) *GoodArticleCategoryUpsertOne {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsertOne) UpdateCreatedAt() *GoodArticleCategoryUpsertOne {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodArticleCategoryUpsertOne) SetUpdatedAt(v time.Time) *GoodArticleCategoryUpsertOne {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsertOne) UpdateUpdatedAt() *GoodArticleCategoryUpsertOne {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *GoodArticleCategoryUpsertOne) SetDeactivatedAt(v time.Time) *GoodArticleCategoryUpsertOne {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsertOne) UpdateDeactivatedAt() *GoodArticleCategoryUpsertOne {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *GoodArticleCategoryUpsertOne) ClearDeactivatedAt() *GoodArticleCategoryUpsertOne {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetName sets the "name" field.
func (u *GoodArticleCategoryUpsertOne) SetName(v string) *GoodArticleCategoryUpsertOne {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsertOne) UpdateName() *GoodArticleCategoryUpsertOne {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *GoodArticleCategoryUpsertOne) SetStatus(v bool) *GoodArticleCategoryUpsertOne {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsertOne) UpdateStatus() *GoodArticleCategoryUpsertOne {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.UpdateStatus()
	})
}

// SetSequence sets the "sequence" field.
func (u *GoodArticleCategoryUpsertOne) SetSequence(v int) *GoodArticleCategoryUpsertOne {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.SetSequence(v)
	})
}

// AddSequence adds v to the "sequence" field.
func (u *GoodArticleCategoryUpsertOne) AddSequence(v int) *GoodArticleCategoryUpsertOne {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.AddSequence(v)
	})
}

// UpdateSequence sets the "sequence" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsertOne) UpdateSequence() *GoodArticleCategoryUpsertOne {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.UpdateSequence()
	})
}

// Exec executes the query.
func (u *GoodArticleCategoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for GoodArticleCategoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodArticleCategoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodArticleCategoryUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodArticleCategoryUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodArticleCategoryCreateBulk is the builder for creating many GoodArticleCategory entities in bulk.
type GoodArticleCategoryCreateBulk struct {
	config
	builders []*GoodArticleCategoryCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodArticleCategory entities in the database.
func (gaccb *GoodArticleCategoryCreateBulk) Save(ctx context.Context) ([]*GoodArticleCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gaccb.builders))
	nodes := make([]*GoodArticleCategory, len(gaccb.builders))
	mutators := make([]Mutator, len(gaccb.builders))
	for i := range gaccb.builders {
		func(i int, root context.Context) {
			builder := gaccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodArticleCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gaccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gaccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gaccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gaccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gaccb *GoodArticleCategoryCreateBulk) SaveX(ctx context.Context) []*GoodArticleCategory {
	v, err := gaccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gaccb *GoodArticleCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := gaccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gaccb *GoodArticleCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := gaccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodArticleCategory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodArticleCategoryUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (gaccb *GoodArticleCategoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodArticleCategoryUpsertBulk {
	gaccb.conflict = opts
	return &GoodArticleCategoryUpsertBulk{
		create: gaccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodArticleCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gaccb *GoodArticleCategoryCreateBulk) OnConflictColumns(columns ...string) *GoodArticleCategoryUpsertBulk {
	gaccb.conflict = append(gaccb.conflict, sql.ConflictColumns(columns...))
	return &GoodArticleCategoryUpsertBulk{
		create: gaccb,
	}
}

// GoodArticleCategoryUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodArticleCategory nodes.
type GoodArticleCategoryUpsertBulk struct {
	create *GoodArticleCategoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodArticleCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodarticlecategory.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodArticleCategoryUpsertBulk) UpdateNewValues() *GoodArticleCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodarticlecategory.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(goodarticlecategory.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(goodarticlecategory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodArticleCategory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GoodArticleCategoryUpsertBulk) Ignore() *GoodArticleCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodArticleCategoryUpsertBulk) DoNothing() *GoodArticleCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodArticleCategoryCreateBulk.OnConflict
// documentation for more info.
func (u *GoodArticleCategoryUpsertBulk) Update(set func(*GoodArticleCategoryUpsert)) *GoodArticleCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodArticleCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *GoodArticleCategoryUpsertBulk) SetUID(v string) *GoodArticleCategoryUpsertBulk {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsertBulk) UpdateUID() *GoodArticleCategoryUpsertBulk {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GoodArticleCategoryUpsertBulk) SetCreatedAt(v time.Time) *GoodArticleCategoryUpsertBulk {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsertBulk) UpdateCreatedAt() *GoodArticleCategoryUpsertBulk {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodArticleCategoryUpsertBulk) SetUpdatedAt(v time.Time) *GoodArticleCategoryUpsertBulk {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsertBulk) UpdateUpdatedAt() *GoodArticleCategoryUpsertBulk {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *GoodArticleCategoryUpsertBulk) SetDeactivatedAt(v time.Time) *GoodArticleCategoryUpsertBulk {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsertBulk) UpdateDeactivatedAt() *GoodArticleCategoryUpsertBulk {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *GoodArticleCategoryUpsertBulk) ClearDeactivatedAt() *GoodArticleCategoryUpsertBulk {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetName sets the "name" field.
func (u *GoodArticleCategoryUpsertBulk) SetName(v string) *GoodArticleCategoryUpsertBulk {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsertBulk) UpdateName() *GoodArticleCategoryUpsertBulk {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *GoodArticleCategoryUpsertBulk) SetStatus(v bool) *GoodArticleCategoryUpsertBulk {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsertBulk) UpdateStatus() *GoodArticleCategoryUpsertBulk {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.UpdateStatus()
	})
}

// SetSequence sets the "sequence" field.
func (u *GoodArticleCategoryUpsertBulk) SetSequence(v int) *GoodArticleCategoryUpsertBulk {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.SetSequence(v)
	})
}

// AddSequence adds v to the "sequence" field.
func (u *GoodArticleCategoryUpsertBulk) AddSequence(v int) *GoodArticleCategoryUpsertBulk {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.AddSequence(v)
	})
}

// UpdateSequence sets the "sequence" field to the value that was provided on create.
func (u *GoodArticleCategoryUpsertBulk) UpdateSequence() *GoodArticleCategoryUpsertBulk {
	return u.Update(func(s *GoodArticleCategoryUpsert) {
		s.UpdateSequence()
	})
}

// Exec executes the query.
func (u *GoodArticleCategoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the GoodArticleCategoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for GoodArticleCategoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodArticleCategoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
