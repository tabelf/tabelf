// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"fmt"
	"log"

	"tabelf/backend/gen/entschema/migrate"

	"tabelf/backend/gen/entschema/account"
	"tabelf/backend/gen/entschema/admin"
	"tabelf/backend/gen/entschema/collaboration"
	"tabelf/backend/gen/entschema/community"
	"tabelf/backend/gen/entschema/communitycategory"
	"tabelf/backend/gen/entschema/communitymeta"
	"tabelf/backend/gen/entschema/feedback"
	"tabelf/backend/gen/entschema/focus"
	"tabelf/backend/gen/entschema/goodarticle"
	"tabelf/backend/gen/entschema/goodarticlecategory"
	"tabelf/backend/gen/entschema/goodarticlehot"
	"tabelf/backend/gen/entschema/goodarticlemeta"
	"tabelf/backend/gen/entschema/invite"
	"tabelf/backend/gen/entschema/message"
	"tabelf/backend/gen/entschema/notice"
	"tabelf/backend/gen/entschema/payorder"
	"tabelf/backend/gen/entschema/payorderfeedback"
	"tabelf/backend/gen/entschema/personalfolder"
	"tabelf/backend/gen/entschema/recharge"
	"tabelf/backend/gen/entschema/sharelink"
	"tabelf/backend/gen/entschema/station"
	"tabelf/backend/gen/entschema/stationcategory"
	"tabelf/backend/gen/entschema/stationmeta"
	"tabelf/backend/gen/entschema/team"
	"tabelf/backend/gen/entschema/teamfolder"
	"tabelf/backend/gen/entschema/teamgroup"
	"tabelf/backend/gen/entschema/urlcrawl"
	"tabelf/backend/gen/entschema/weblink"
	"tabelf/backend/gen/entschema/workspace"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Account is the client for interacting with the Account builders.
	Account *AccountClient
	// Admin is the client for interacting with the Admin builders.
	Admin *AdminClient
	// Collaboration is the client for interacting with the Collaboration builders.
	Collaboration *CollaborationClient
	// Community is the client for interacting with the Community builders.
	Community *CommunityClient
	// CommunityCategory is the client for interacting with the CommunityCategory builders.
	CommunityCategory *CommunityCategoryClient
	// CommunityMeta is the client for interacting with the CommunityMeta builders.
	CommunityMeta *CommunityMetaClient
	// Feedback is the client for interacting with the Feedback builders.
	Feedback *FeedbackClient
	// Focus is the client for interacting with the Focus builders.
	Focus *FocusClient
	// GoodArticle is the client for interacting with the GoodArticle builders.
	GoodArticle *GoodArticleClient
	// GoodArticleCategory is the client for interacting with the GoodArticleCategory builders.
	GoodArticleCategory *GoodArticleCategoryClient
	// GoodArticleHot is the client for interacting with the GoodArticleHot builders.
	GoodArticleHot *GoodArticleHotClient
	// GoodArticleMeta is the client for interacting with the GoodArticleMeta builders.
	GoodArticleMeta *GoodArticleMetaClient
	// Invite is the client for interacting with the Invite builders.
	Invite *InviteClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// Notice is the client for interacting with the Notice builders.
	Notice *NoticeClient
	// PayOrder is the client for interacting with the PayOrder builders.
	PayOrder *PayOrderClient
	// PayOrderFeedback is the client for interacting with the PayOrderFeedback builders.
	PayOrderFeedback *PayOrderFeedbackClient
	// PersonalFolder is the client for interacting with the PersonalFolder builders.
	PersonalFolder *PersonalFolderClient
	// Recharge is the client for interacting with the Recharge builders.
	Recharge *RechargeClient
	// ShareLink is the client for interacting with the ShareLink builders.
	ShareLink *ShareLinkClient
	// Station is the client for interacting with the Station builders.
	Station *StationClient
	// StationCategory is the client for interacting with the StationCategory builders.
	StationCategory *StationCategoryClient
	// StationMeta is the client for interacting with the StationMeta builders.
	StationMeta *StationMetaClient
	// Team is the client for interacting with the Team builders.
	Team *TeamClient
	// TeamFolder is the client for interacting with the TeamFolder builders.
	TeamFolder *TeamFolderClient
	// TeamGroup is the client for interacting with the TeamGroup builders.
	TeamGroup *TeamGroupClient
	// UrlCrawl is the client for interacting with the UrlCrawl builders.
	UrlCrawl *UrlCrawlClient
	// WebLink is the client for interacting with the WebLink builders.
	WebLink *WebLinkClient
	// Workspace is the client for interacting with the Workspace builders.
	Workspace *WorkspaceClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Account = NewAccountClient(c.config)
	c.Admin = NewAdminClient(c.config)
	c.Collaboration = NewCollaborationClient(c.config)
	c.Community = NewCommunityClient(c.config)
	c.CommunityCategory = NewCommunityCategoryClient(c.config)
	c.CommunityMeta = NewCommunityMetaClient(c.config)
	c.Feedback = NewFeedbackClient(c.config)
	c.Focus = NewFocusClient(c.config)
	c.GoodArticle = NewGoodArticleClient(c.config)
	c.GoodArticleCategory = NewGoodArticleCategoryClient(c.config)
	c.GoodArticleHot = NewGoodArticleHotClient(c.config)
	c.GoodArticleMeta = NewGoodArticleMetaClient(c.config)
	c.Invite = NewInviteClient(c.config)
	c.Message = NewMessageClient(c.config)
	c.Notice = NewNoticeClient(c.config)
	c.PayOrder = NewPayOrderClient(c.config)
	c.PayOrderFeedback = NewPayOrderFeedbackClient(c.config)
	c.PersonalFolder = NewPersonalFolderClient(c.config)
	c.Recharge = NewRechargeClient(c.config)
	c.ShareLink = NewShareLinkClient(c.config)
	c.Station = NewStationClient(c.config)
	c.StationCategory = NewStationCategoryClient(c.config)
	c.StationMeta = NewStationMetaClient(c.config)
	c.Team = NewTeamClient(c.config)
	c.TeamFolder = NewTeamFolderClient(c.config)
	c.TeamGroup = NewTeamGroupClient(c.config)
	c.UrlCrawl = NewUrlCrawlClient(c.config)
	c.WebLink = NewWebLinkClient(c.config)
	c.Workspace = NewWorkspaceClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("entschema: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("entschema: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Account:             NewAccountClient(cfg),
		Admin:               NewAdminClient(cfg),
		Collaboration:       NewCollaborationClient(cfg),
		Community:           NewCommunityClient(cfg),
		CommunityCategory:   NewCommunityCategoryClient(cfg),
		CommunityMeta:       NewCommunityMetaClient(cfg),
		Feedback:            NewFeedbackClient(cfg),
		Focus:               NewFocusClient(cfg),
		GoodArticle:         NewGoodArticleClient(cfg),
		GoodArticleCategory: NewGoodArticleCategoryClient(cfg),
		GoodArticleHot:      NewGoodArticleHotClient(cfg),
		GoodArticleMeta:     NewGoodArticleMetaClient(cfg),
		Invite:              NewInviteClient(cfg),
		Message:             NewMessageClient(cfg),
		Notice:              NewNoticeClient(cfg),
		PayOrder:            NewPayOrderClient(cfg),
		PayOrderFeedback:    NewPayOrderFeedbackClient(cfg),
		PersonalFolder:      NewPersonalFolderClient(cfg),
		Recharge:            NewRechargeClient(cfg),
		ShareLink:           NewShareLinkClient(cfg),
		Station:             NewStationClient(cfg),
		StationCategory:     NewStationCategoryClient(cfg),
		StationMeta:         NewStationMetaClient(cfg),
		Team:                NewTeamClient(cfg),
		TeamFolder:          NewTeamFolderClient(cfg),
		TeamGroup:           NewTeamGroupClient(cfg),
		UrlCrawl:            NewUrlCrawlClient(cfg),
		WebLink:             NewWebLinkClient(cfg),
		Workspace:           NewWorkspaceClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Account:             NewAccountClient(cfg),
		Admin:               NewAdminClient(cfg),
		Collaboration:       NewCollaborationClient(cfg),
		Community:           NewCommunityClient(cfg),
		CommunityCategory:   NewCommunityCategoryClient(cfg),
		CommunityMeta:       NewCommunityMetaClient(cfg),
		Feedback:            NewFeedbackClient(cfg),
		Focus:               NewFocusClient(cfg),
		GoodArticle:         NewGoodArticleClient(cfg),
		GoodArticleCategory: NewGoodArticleCategoryClient(cfg),
		GoodArticleHot:      NewGoodArticleHotClient(cfg),
		GoodArticleMeta:     NewGoodArticleMetaClient(cfg),
		Invite:              NewInviteClient(cfg),
		Message:             NewMessageClient(cfg),
		Notice:              NewNoticeClient(cfg),
		PayOrder:            NewPayOrderClient(cfg),
		PayOrderFeedback:    NewPayOrderFeedbackClient(cfg),
		PersonalFolder:      NewPersonalFolderClient(cfg),
		Recharge:            NewRechargeClient(cfg),
		ShareLink:           NewShareLinkClient(cfg),
		Station:             NewStationClient(cfg),
		StationCategory:     NewStationCategoryClient(cfg),
		StationMeta:         NewStationMetaClient(cfg),
		Team:                NewTeamClient(cfg),
		TeamFolder:          NewTeamFolderClient(cfg),
		TeamGroup:           NewTeamGroupClient(cfg),
		UrlCrawl:            NewUrlCrawlClient(cfg),
		WebLink:             NewWebLinkClient(cfg),
		Workspace:           NewWorkspaceClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Account.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Account.Use(hooks...)
	c.Admin.Use(hooks...)
	c.Collaboration.Use(hooks...)
	c.Community.Use(hooks...)
	c.CommunityCategory.Use(hooks...)
	c.CommunityMeta.Use(hooks...)
	c.Feedback.Use(hooks...)
	c.Focus.Use(hooks...)
	c.GoodArticle.Use(hooks...)
	c.GoodArticleCategory.Use(hooks...)
	c.GoodArticleHot.Use(hooks...)
	c.GoodArticleMeta.Use(hooks...)
	c.Invite.Use(hooks...)
	c.Message.Use(hooks...)
	c.Notice.Use(hooks...)
	c.PayOrder.Use(hooks...)
	c.PayOrderFeedback.Use(hooks...)
	c.PersonalFolder.Use(hooks...)
	c.Recharge.Use(hooks...)
	c.ShareLink.Use(hooks...)
	c.Station.Use(hooks...)
	c.StationCategory.Use(hooks...)
	c.StationMeta.Use(hooks...)
	c.Team.Use(hooks...)
	c.TeamFolder.Use(hooks...)
	c.TeamGroup.Use(hooks...)
	c.UrlCrawl.Use(hooks...)
	c.WebLink.Use(hooks...)
	c.Workspace.Use(hooks...)
}

// AccountClient is a client for the Account schema.
type AccountClient struct {
	config
}

// NewAccountClient returns a client for the Account from the given config.
func NewAccountClient(c config) *AccountClient {
	return &AccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `account.Hooks(f(g(h())))`.
func (c *AccountClient) Use(hooks ...Hook) {
	c.hooks.Account = append(c.hooks.Account, hooks...)
}

// Create returns a create builder for Account.
func (c *AccountClient) Create() *AccountCreate {
	mutation := newAccountMutation(c.config, OpCreate)
	return &AccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Account entities.
func (c *AccountClient) CreateBulk(builders ...*AccountCreate) *AccountCreateBulk {
	return &AccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Account.
func (c *AccountClient) Update() *AccountUpdate {
	mutation := newAccountMutation(c.config, OpUpdate)
	return &AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountClient) UpdateOne(a *Account) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccount(a))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountClient) UpdateOneID(id uint64) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccountID(id))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Account.
func (c *AccountClient) Delete() *AccountDelete {
	mutation := newAccountMutation(c.config, OpDelete)
	return &AccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AccountClient) DeleteOne(a *Account) *AccountDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AccountClient) DeleteOneID(id uint64) *AccountDeleteOne {
	builder := c.Delete().Where(account.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountDeleteOne{builder}
}

// Query returns a query builder for Account.
func (c *AccountClient) Query() *AccountQuery {
	return &AccountQuery{
		config: c.config,
	}
}

// Get returns a Account entity by its id.
func (c *AccountClient) Get(ctx context.Context, id uint64) (*Account, error) {
	return c.Query().Where(account.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountClient) GetX(ctx context.Context, id uint64) *Account {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AccountClient) Hooks() []Hook {
	return c.hooks.Account
}

// AdminClient is a client for the Admin schema.
type AdminClient struct {
	config
}

// NewAdminClient returns a client for the Admin from the given config.
func NewAdminClient(c config) *AdminClient {
	return &AdminClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `admin.Hooks(f(g(h())))`.
func (c *AdminClient) Use(hooks ...Hook) {
	c.hooks.Admin = append(c.hooks.Admin, hooks...)
}

// Create returns a create builder for Admin.
func (c *AdminClient) Create() *AdminCreate {
	mutation := newAdminMutation(c.config, OpCreate)
	return &AdminCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Admin entities.
func (c *AdminClient) CreateBulk(builders ...*AdminCreate) *AdminCreateBulk {
	return &AdminCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Admin.
func (c *AdminClient) Update() *AdminUpdate {
	mutation := newAdminMutation(c.config, OpUpdate)
	return &AdminUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminClient) UpdateOne(a *Admin) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdmin(a))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminClient) UpdateOneID(id int) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdminID(id))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Admin.
func (c *AdminClient) Delete() *AdminDelete {
	mutation := newAdminMutation(c.config, OpDelete)
	return &AdminDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdminClient) DeleteOne(a *Admin) *AdminDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdminClient) DeleteOneID(id int) *AdminDeleteOne {
	builder := c.Delete().Where(admin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminDeleteOne{builder}
}

// Query returns a query builder for Admin.
func (c *AdminClient) Query() *AdminQuery {
	return &AdminQuery{
		config: c.config,
	}
}

// Get returns a Admin entity by its id.
func (c *AdminClient) Get(ctx context.Context, id int) (*Admin, error) {
	return c.Query().Where(admin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminClient) GetX(ctx context.Context, id int) *Admin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AdminClient) Hooks() []Hook {
	return c.hooks.Admin
}

// CollaborationClient is a client for the Collaboration schema.
type CollaborationClient struct {
	config
}

// NewCollaborationClient returns a client for the Collaboration from the given config.
func NewCollaborationClient(c config) *CollaborationClient {
	return &CollaborationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `collaboration.Hooks(f(g(h())))`.
func (c *CollaborationClient) Use(hooks ...Hook) {
	c.hooks.Collaboration = append(c.hooks.Collaboration, hooks...)
}

// Create returns a create builder for Collaboration.
func (c *CollaborationClient) Create() *CollaborationCreate {
	mutation := newCollaborationMutation(c.config, OpCreate)
	return &CollaborationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Collaboration entities.
func (c *CollaborationClient) CreateBulk(builders ...*CollaborationCreate) *CollaborationCreateBulk {
	return &CollaborationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Collaboration.
func (c *CollaborationClient) Update() *CollaborationUpdate {
	mutation := newCollaborationMutation(c.config, OpUpdate)
	return &CollaborationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CollaborationClient) UpdateOne(co *Collaboration) *CollaborationUpdateOne {
	mutation := newCollaborationMutation(c.config, OpUpdateOne, withCollaboration(co))
	return &CollaborationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CollaborationClient) UpdateOneID(id uint64) *CollaborationUpdateOne {
	mutation := newCollaborationMutation(c.config, OpUpdateOne, withCollaborationID(id))
	return &CollaborationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Collaboration.
func (c *CollaborationClient) Delete() *CollaborationDelete {
	mutation := newCollaborationMutation(c.config, OpDelete)
	return &CollaborationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CollaborationClient) DeleteOne(co *Collaboration) *CollaborationDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CollaborationClient) DeleteOneID(id uint64) *CollaborationDeleteOne {
	builder := c.Delete().Where(collaboration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CollaborationDeleteOne{builder}
}

// Query returns a query builder for Collaboration.
func (c *CollaborationClient) Query() *CollaborationQuery {
	return &CollaborationQuery{
		config: c.config,
	}
}

// Get returns a Collaboration entity by its id.
func (c *CollaborationClient) Get(ctx context.Context, id uint64) (*Collaboration, error) {
	return c.Query().Where(collaboration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CollaborationClient) GetX(ctx context.Context, id uint64) *Collaboration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CollaborationClient) Hooks() []Hook {
	return c.hooks.Collaboration
}

// CommunityClient is a client for the Community schema.
type CommunityClient struct {
	config
}

// NewCommunityClient returns a client for the Community from the given config.
func NewCommunityClient(c config) *CommunityClient {
	return &CommunityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `community.Hooks(f(g(h())))`.
func (c *CommunityClient) Use(hooks ...Hook) {
	c.hooks.Community = append(c.hooks.Community, hooks...)
}

// Create returns a create builder for Community.
func (c *CommunityClient) Create() *CommunityCreate {
	mutation := newCommunityMutation(c.config, OpCreate)
	return &CommunityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Community entities.
func (c *CommunityClient) CreateBulk(builders ...*CommunityCreate) *CommunityCreateBulk {
	return &CommunityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Community.
func (c *CommunityClient) Update() *CommunityUpdate {
	mutation := newCommunityMutation(c.config, OpUpdate)
	return &CommunityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommunityClient) UpdateOne(co *Community) *CommunityUpdateOne {
	mutation := newCommunityMutation(c.config, OpUpdateOne, withCommunity(co))
	return &CommunityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommunityClient) UpdateOneID(id uint64) *CommunityUpdateOne {
	mutation := newCommunityMutation(c.config, OpUpdateOne, withCommunityID(id))
	return &CommunityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Community.
func (c *CommunityClient) Delete() *CommunityDelete {
	mutation := newCommunityMutation(c.config, OpDelete)
	return &CommunityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CommunityClient) DeleteOne(co *Community) *CommunityDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CommunityClient) DeleteOneID(id uint64) *CommunityDeleteOne {
	builder := c.Delete().Where(community.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommunityDeleteOne{builder}
}

// Query returns a query builder for Community.
func (c *CommunityClient) Query() *CommunityQuery {
	return &CommunityQuery{
		config: c.config,
	}
}

// Get returns a Community entity by its id.
func (c *CommunityClient) Get(ctx context.Context, id uint64) (*Community, error) {
	return c.Query().Where(community.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommunityClient) GetX(ctx context.Context, id uint64) *Community {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CommunityClient) Hooks() []Hook {
	return c.hooks.Community
}

// CommunityCategoryClient is a client for the CommunityCategory schema.
type CommunityCategoryClient struct {
	config
}

// NewCommunityCategoryClient returns a client for the CommunityCategory from the given config.
func NewCommunityCategoryClient(c config) *CommunityCategoryClient {
	return &CommunityCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `communitycategory.Hooks(f(g(h())))`.
func (c *CommunityCategoryClient) Use(hooks ...Hook) {
	c.hooks.CommunityCategory = append(c.hooks.CommunityCategory, hooks...)
}

// Create returns a create builder for CommunityCategory.
func (c *CommunityCategoryClient) Create() *CommunityCategoryCreate {
	mutation := newCommunityCategoryMutation(c.config, OpCreate)
	return &CommunityCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CommunityCategory entities.
func (c *CommunityCategoryClient) CreateBulk(builders ...*CommunityCategoryCreate) *CommunityCategoryCreateBulk {
	return &CommunityCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CommunityCategory.
func (c *CommunityCategoryClient) Update() *CommunityCategoryUpdate {
	mutation := newCommunityCategoryMutation(c.config, OpUpdate)
	return &CommunityCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommunityCategoryClient) UpdateOne(cc *CommunityCategory) *CommunityCategoryUpdateOne {
	mutation := newCommunityCategoryMutation(c.config, OpUpdateOne, withCommunityCategory(cc))
	return &CommunityCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommunityCategoryClient) UpdateOneID(id uint64) *CommunityCategoryUpdateOne {
	mutation := newCommunityCategoryMutation(c.config, OpUpdateOne, withCommunityCategoryID(id))
	return &CommunityCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CommunityCategory.
func (c *CommunityCategoryClient) Delete() *CommunityCategoryDelete {
	mutation := newCommunityCategoryMutation(c.config, OpDelete)
	return &CommunityCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CommunityCategoryClient) DeleteOne(cc *CommunityCategory) *CommunityCategoryDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CommunityCategoryClient) DeleteOneID(id uint64) *CommunityCategoryDeleteOne {
	builder := c.Delete().Where(communitycategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommunityCategoryDeleteOne{builder}
}

// Query returns a query builder for CommunityCategory.
func (c *CommunityCategoryClient) Query() *CommunityCategoryQuery {
	return &CommunityCategoryQuery{
		config: c.config,
	}
}

// Get returns a CommunityCategory entity by its id.
func (c *CommunityCategoryClient) Get(ctx context.Context, id uint64) (*CommunityCategory, error) {
	return c.Query().Where(communitycategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommunityCategoryClient) GetX(ctx context.Context, id uint64) *CommunityCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CommunityCategoryClient) Hooks() []Hook {
	return c.hooks.CommunityCategory
}

// CommunityMetaClient is a client for the CommunityMeta schema.
type CommunityMetaClient struct {
	config
}

// NewCommunityMetaClient returns a client for the CommunityMeta from the given config.
func NewCommunityMetaClient(c config) *CommunityMetaClient {
	return &CommunityMetaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `communitymeta.Hooks(f(g(h())))`.
func (c *CommunityMetaClient) Use(hooks ...Hook) {
	c.hooks.CommunityMeta = append(c.hooks.CommunityMeta, hooks...)
}

// Create returns a create builder for CommunityMeta.
func (c *CommunityMetaClient) Create() *CommunityMetaCreate {
	mutation := newCommunityMetaMutation(c.config, OpCreate)
	return &CommunityMetaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CommunityMeta entities.
func (c *CommunityMetaClient) CreateBulk(builders ...*CommunityMetaCreate) *CommunityMetaCreateBulk {
	return &CommunityMetaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CommunityMeta.
func (c *CommunityMetaClient) Update() *CommunityMetaUpdate {
	mutation := newCommunityMetaMutation(c.config, OpUpdate)
	return &CommunityMetaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommunityMetaClient) UpdateOne(cm *CommunityMeta) *CommunityMetaUpdateOne {
	mutation := newCommunityMetaMutation(c.config, OpUpdateOne, withCommunityMeta(cm))
	return &CommunityMetaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommunityMetaClient) UpdateOneID(id uint64) *CommunityMetaUpdateOne {
	mutation := newCommunityMetaMutation(c.config, OpUpdateOne, withCommunityMetaID(id))
	return &CommunityMetaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CommunityMeta.
func (c *CommunityMetaClient) Delete() *CommunityMetaDelete {
	mutation := newCommunityMetaMutation(c.config, OpDelete)
	return &CommunityMetaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CommunityMetaClient) DeleteOne(cm *CommunityMeta) *CommunityMetaDeleteOne {
	return c.DeleteOneID(cm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CommunityMetaClient) DeleteOneID(id uint64) *CommunityMetaDeleteOne {
	builder := c.Delete().Where(communitymeta.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommunityMetaDeleteOne{builder}
}

// Query returns a query builder for CommunityMeta.
func (c *CommunityMetaClient) Query() *CommunityMetaQuery {
	return &CommunityMetaQuery{
		config: c.config,
	}
}

// Get returns a CommunityMeta entity by its id.
func (c *CommunityMetaClient) Get(ctx context.Context, id uint64) (*CommunityMeta, error) {
	return c.Query().Where(communitymeta.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommunityMetaClient) GetX(ctx context.Context, id uint64) *CommunityMeta {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CommunityMetaClient) Hooks() []Hook {
	return c.hooks.CommunityMeta
}

// FeedbackClient is a client for the Feedback schema.
type FeedbackClient struct {
	config
}

// NewFeedbackClient returns a client for the Feedback from the given config.
func NewFeedbackClient(c config) *FeedbackClient {
	return &FeedbackClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feedback.Hooks(f(g(h())))`.
func (c *FeedbackClient) Use(hooks ...Hook) {
	c.hooks.Feedback = append(c.hooks.Feedback, hooks...)
}

// Create returns a create builder for Feedback.
func (c *FeedbackClient) Create() *FeedbackCreate {
	mutation := newFeedbackMutation(c.config, OpCreate)
	return &FeedbackCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Feedback entities.
func (c *FeedbackClient) CreateBulk(builders ...*FeedbackCreate) *FeedbackCreateBulk {
	return &FeedbackCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Feedback.
func (c *FeedbackClient) Update() *FeedbackUpdate {
	mutation := newFeedbackMutation(c.config, OpUpdate)
	return &FeedbackUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedbackClient) UpdateOne(f *Feedback) *FeedbackUpdateOne {
	mutation := newFeedbackMutation(c.config, OpUpdateOne, withFeedback(f))
	return &FeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedbackClient) UpdateOneID(id uint64) *FeedbackUpdateOne {
	mutation := newFeedbackMutation(c.config, OpUpdateOne, withFeedbackID(id))
	return &FeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Feedback.
func (c *FeedbackClient) Delete() *FeedbackDelete {
	mutation := newFeedbackMutation(c.config, OpDelete)
	return &FeedbackDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FeedbackClient) DeleteOne(f *Feedback) *FeedbackDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FeedbackClient) DeleteOneID(id uint64) *FeedbackDeleteOne {
	builder := c.Delete().Where(feedback.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedbackDeleteOne{builder}
}

// Query returns a query builder for Feedback.
func (c *FeedbackClient) Query() *FeedbackQuery {
	return &FeedbackQuery{
		config: c.config,
	}
}

// Get returns a Feedback entity by its id.
func (c *FeedbackClient) Get(ctx context.Context, id uint64) (*Feedback, error) {
	return c.Query().Where(feedback.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedbackClient) GetX(ctx context.Context, id uint64) *Feedback {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FeedbackClient) Hooks() []Hook {
	return c.hooks.Feedback
}

// FocusClient is a client for the Focus schema.
type FocusClient struct {
	config
}

// NewFocusClient returns a client for the Focus from the given config.
func NewFocusClient(c config) *FocusClient {
	return &FocusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `focus.Hooks(f(g(h())))`.
func (c *FocusClient) Use(hooks ...Hook) {
	c.hooks.Focus = append(c.hooks.Focus, hooks...)
}

// Create returns a create builder for Focus.
func (c *FocusClient) Create() *FocusCreate {
	mutation := newFocusMutation(c.config, OpCreate)
	return &FocusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Focus entities.
func (c *FocusClient) CreateBulk(builders ...*FocusCreate) *FocusCreateBulk {
	return &FocusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Focus.
func (c *FocusClient) Update() *FocusUpdate {
	mutation := newFocusMutation(c.config, OpUpdate)
	return &FocusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FocusClient) UpdateOne(f *Focus) *FocusUpdateOne {
	mutation := newFocusMutation(c.config, OpUpdateOne, withFocus(f))
	return &FocusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FocusClient) UpdateOneID(id int) *FocusUpdateOne {
	mutation := newFocusMutation(c.config, OpUpdateOne, withFocusID(id))
	return &FocusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Focus.
func (c *FocusClient) Delete() *FocusDelete {
	mutation := newFocusMutation(c.config, OpDelete)
	return &FocusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FocusClient) DeleteOne(f *Focus) *FocusDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FocusClient) DeleteOneID(id int) *FocusDeleteOne {
	builder := c.Delete().Where(focus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FocusDeleteOne{builder}
}

// Query returns a query builder for Focus.
func (c *FocusClient) Query() *FocusQuery {
	return &FocusQuery{
		config: c.config,
	}
}

// Get returns a Focus entity by its id.
func (c *FocusClient) Get(ctx context.Context, id int) (*Focus, error) {
	return c.Query().Where(focus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FocusClient) GetX(ctx context.Context, id int) *Focus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FocusClient) Hooks() []Hook {
	return c.hooks.Focus
}

// GoodArticleClient is a client for the GoodArticle schema.
type GoodArticleClient struct {
	config
}

// NewGoodArticleClient returns a client for the GoodArticle from the given config.
func NewGoodArticleClient(c config) *GoodArticleClient {
	return &GoodArticleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodarticle.Hooks(f(g(h())))`.
func (c *GoodArticleClient) Use(hooks ...Hook) {
	c.hooks.GoodArticle = append(c.hooks.GoodArticle, hooks...)
}

// Create returns a create builder for GoodArticle.
func (c *GoodArticleClient) Create() *GoodArticleCreate {
	mutation := newGoodArticleMutation(c.config, OpCreate)
	return &GoodArticleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodArticle entities.
func (c *GoodArticleClient) CreateBulk(builders ...*GoodArticleCreate) *GoodArticleCreateBulk {
	return &GoodArticleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodArticle.
func (c *GoodArticleClient) Update() *GoodArticleUpdate {
	mutation := newGoodArticleMutation(c.config, OpUpdate)
	return &GoodArticleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodArticleClient) UpdateOne(ga *GoodArticle) *GoodArticleUpdateOne {
	mutation := newGoodArticleMutation(c.config, OpUpdateOne, withGoodArticle(ga))
	return &GoodArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodArticleClient) UpdateOneID(id uint64) *GoodArticleUpdateOne {
	mutation := newGoodArticleMutation(c.config, OpUpdateOne, withGoodArticleID(id))
	return &GoodArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodArticle.
func (c *GoodArticleClient) Delete() *GoodArticleDelete {
	mutation := newGoodArticleMutation(c.config, OpDelete)
	return &GoodArticleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GoodArticleClient) DeleteOne(ga *GoodArticle) *GoodArticleDeleteOne {
	return c.DeleteOneID(ga.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GoodArticleClient) DeleteOneID(id uint64) *GoodArticleDeleteOne {
	builder := c.Delete().Where(goodarticle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodArticleDeleteOne{builder}
}

// Query returns a query builder for GoodArticle.
func (c *GoodArticleClient) Query() *GoodArticleQuery {
	return &GoodArticleQuery{
		config: c.config,
	}
}

// Get returns a GoodArticle entity by its id.
func (c *GoodArticleClient) Get(ctx context.Context, id uint64) (*GoodArticle, error) {
	return c.Query().Where(goodarticle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodArticleClient) GetX(ctx context.Context, id uint64) *GoodArticle {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodArticleClient) Hooks() []Hook {
	return c.hooks.GoodArticle
}

// GoodArticleCategoryClient is a client for the GoodArticleCategory schema.
type GoodArticleCategoryClient struct {
	config
}

// NewGoodArticleCategoryClient returns a client for the GoodArticleCategory from the given config.
func NewGoodArticleCategoryClient(c config) *GoodArticleCategoryClient {
	return &GoodArticleCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodarticlecategory.Hooks(f(g(h())))`.
func (c *GoodArticleCategoryClient) Use(hooks ...Hook) {
	c.hooks.GoodArticleCategory = append(c.hooks.GoodArticleCategory, hooks...)
}

// Create returns a create builder for GoodArticleCategory.
func (c *GoodArticleCategoryClient) Create() *GoodArticleCategoryCreate {
	mutation := newGoodArticleCategoryMutation(c.config, OpCreate)
	return &GoodArticleCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodArticleCategory entities.
func (c *GoodArticleCategoryClient) CreateBulk(builders ...*GoodArticleCategoryCreate) *GoodArticleCategoryCreateBulk {
	return &GoodArticleCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodArticleCategory.
func (c *GoodArticleCategoryClient) Update() *GoodArticleCategoryUpdate {
	mutation := newGoodArticleCategoryMutation(c.config, OpUpdate)
	return &GoodArticleCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodArticleCategoryClient) UpdateOne(gac *GoodArticleCategory) *GoodArticleCategoryUpdateOne {
	mutation := newGoodArticleCategoryMutation(c.config, OpUpdateOne, withGoodArticleCategory(gac))
	return &GoodArticleCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodArticleCategoryClient) UpdateOneID(id uint64) *GoodArticleCategoryUpdateOne {
	mutation := newGoodArticleCategoryMutation(c.config, OpUpdateOne, withGoodArticleCategoryID(id))
	return &GoodArticleCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodArticleCategory.
func (c *GoodArticleCategoryClient) Delete() *GoodArticleCategoryDelete {
	mutation := newGoodArticleCategoryMutation(c.config, OpDelete)
	return &GoodArticleCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GoodArticleCategoryClient) DeleteOne(gac *GoodArticleCategory) *GoodArticleCategoryDeleteOne {
	return c.DeleteOneID(gac.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GoodArticleCategoryClient) DeleteOneID(id uint64) *GoodArticleCategoryDeleteOne {
	builder := c.Delete().Where(goodarticlecategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodArticleCategoryDeleteOne{builder}
}

// Query returns a query builder for GoodArticleCategory.
func (c *GoodArticleCategoryClient) Query() *GoodArticleCategoryQuery {
	return &GoodArticleCategoryQuery{
		config: c.config,
	}
}

// Get returns a GoodArticleCategory entity by its id.
func (c *GoodArticleCategoryClient) Get(ctx context.Context, id uint64) (*GoodArticleCategory, error) {
	return c.Query().Where(goodarticlecategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodArticleCategoryClient) GetX(ctx context.Context, id uint64) *GoodArticleCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodArticleCategoryClient) Hooks() []Hook {
	return c.hooks.GoodArticleCategory
}

// GoodArticleHotClient is a client for the GoodArticleHot schema.
type GoodArticleHotClient struct {
	config
}

// NewGoodArticleHotClient returns a client for the GoodArticleHot from the given config.
func NewGoodArticleHotClient(c config) *GoodArticleHotClient {
	return &GoodArticleHotClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodarticlehot.Hooks(f(g(h())))`.
func (c *GoodArticleHotClient) Use(hooks ...Hook) {
	c.hooks.GoodArticleHot = append(c.hooks.GoodArticleHot, hooks...)
}

// Create returns a create builder for GoodArticleHot.
func (c *GoodArticleHotClient) Create() *GoodArticleHotCreate {
	mutation := newGoodArticleHotMutation(c.config, OpCreate)
	return &GoodArticleHotCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodArticleHot entities.
func (c *GoodArticleHotClient) CreateBulk(builders ...*GoodArticleHotCreate) *GoodArticleHotCreateBulk {
	return &GoodArticleHotCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodArticleHot.
func (c *GoodArticleHotClient) Update() *GoodArticleHotUpdate {
	mutation := newGoodArticleHotMutation(c.config, OpUpdate)
	return &GoodArticleHotUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodArticleHotClient) UpdateOne(gah *GoodArticleHot) *GoodArticleHotUpdateOne {
	mutation := newGoodArticleHotMutation(c.config, OpUpdateOne, withGoodArticleHot(gah))
	return &GoodArticleHotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodArticleHotClient) UpdateOneID(id uint64) *GoodArticleHotUpdateOne {
	mutation := newGoodArticleHotMutation(c.config, OpUpdateOne, withGoodArticleHotID(id))
	return &GoodArticleHotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodArticleHot.
func (c *GoodArticleHotClient) Delete() *GoodArticleHotDelete {
	mutation := newGoodArticleHotMutation(c.config, OpDelete)
	return &GoodArticleHotDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GoodArticleHotClient) DeleteOne(gah *GoodArticleHot) *GoodArticleHotDeleteOne {
	return c.DeleteOneID(gah.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GoodArticleHotClient) DeleteOneID(id uint64) *GoodArticleHotDeleteOne {
	builder := c.Delete().Where(goodarticlehot.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodArticleHotDeleteOne{builder}
}

// Query returns a query builder for GoodArticleHot.
func (c *GoodArticleHotClient) Query() *GoodArticleHotQuery {
	return &GoodArticleHotQuery{
		config: c.config,
	}
}

// Get returns a GoodArticleHot entity by its id.
func (c *GoodArticleHotClient) Get(ctx context.Context, id uint64) (*GoodArticleHot, error) {
	return c.Query().Where(goodarticlehot.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodArticleHotClient) GetX(ctx context.Context, id uint64) *GoodArticleHot {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodArticleHotClient) Hooks() []Hook {
	return c.hooks.GoodArticleHot
}

// GoodArticleMetaClient is a client for the GoodArticleMeta schema.
type GoodArticleMetaClient struct {
	config
}

// NewGoodArticleMetaClient returns a client for the GoodArticleMeta from the given config.
func NewGoodArticleMetaClient(c config) *GoodArticleMetaClient {
	return &GoodArticleMetaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goodarticlemeta.Hooks(f(g(h())))`.
func (c *GoodArticleMetaClient) Use(hooks ...Hook) {
	c.hooks.GoodArticleMeta = append(c.hooks.GoodArticleMeta, hooks...)
}

// Create returns a create builder for GoodArticleMeta.
func (c *GoodArticleMetaClient) Create() *GoodArticleMetaCreate {
	mutation := newGoodArticleMetaMutation(c.config, OpCreate)
	return &GoodArticleMetaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodArticleMeta entities.
func (c *GoodArticleMetaClient) CreateBulk(builders ...*GoodArticleMetaCreate) *GoodArticleMetaCreateBulk {
	return &GoodArticleMetaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodArticleMeta.
func (c *GoodArticleMetaClient) Update() *GoodArticleMetaUpdate {
	mutation := newGoodArticleMetaMutation(c.config, OpUpdate)
	return &GoodArticleMetaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodArticleMetaClient) UpdateOne(gam *GoodArticleMeta) *GoodArticleMetaUpdateOne {
	mutation := newGoodArticleMetaMutation(c.config, OpUpdateOne, withGoodArticleMeta(gam))
	return &GoodArticleMetaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodArticleMetaClient) UpdateOneID(id uint64) *GoodArticleMetaUpdateOne {
	mutation := newGoodArticleMetaMutation(c.config, OpUpdateOne, withGoodArticleMetaID(id))
	return &GoodArticleMetaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodArticleMeta.
func (c *GoodArticleMetaClient) Delete() *GoodArticleMetaDelete {
	mutation := newGoodArticleMetaMutation(c.config, OpDelete)
	return &GoodArticleMetaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GoodArticleMetaClient) DeleteOne(gam *GoodArticleMeta) *GoodArticleMetaDeleteOne {
	return c.DeleteOneID(gam.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GoodArticleMetaClient) DeleteOneID(id uint64) *GoodArticleMetaDeleteOne {
	builder := c.Delete().Where(goodarticlemeta.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodArticleMetaDeleteOne{builder}
}

// Query returns a query builder for GoodArticleMeta.
func (c *GoodArticleMetaClient) Query() *GoodArticleMetaQuery {
	return &GoodArticleMetaQuery{
		config: c.config,
	}
}

// Get returns a GoodArticleMeta entity by its id.
func (c *GoodArticleMetaClient) Get(ctx context.Context, id uint64) (*GoodArticleMeta, error) {
	return c.Query().Where(goodarticlemeta.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodArticleMetaClient) GetX(ctx context.Context, id uint64) *GoodArticleMeta {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodArticleMetaClient) Hooks() []Hook {
	return c.hooks.GoodArticleMeta
}

// InviteClient is a client for the Invite schema.
type InviteClient struct {
	config
}

// NewInviteClient returns a client for the Invite from the given config.
func NewInviteClient(c config) *InviteClient {
	return &InviteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invite.Hooks(f(g(h())))`.
func (c *InviteClient) Use(hooks ...Hook) {
	c.hooks.Invite = append(c.hooks.Invite, hooks...)
}

// Create returns a create builder for Invite.
func (c *InviteClient) Create() *InviteCreate {
	mutation := newInviteMutation(c.config, OpCreate)
	return &InviteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Invite entities.
func (c *InviteClient) CreateBulk(builders ...*InviteCreate) *InviteCreateBulk {
	return &InviteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Invite.
func (c *InviteClient) Update() *InviteUpdate {
	mutation := newInviteMutation(c.config, OpUpdate)
	return &InviteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InviteClient) UpdateOne(i *Invite) *InviteUpdateOne {
	mutation := newInviteMutation(c.config, OpUpdateOne, withInvite(i))
	return &InviteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InviteClient) UpdateOneID(id uint64) *InviteUpdateOne {
	mutation := newInviteMutation(c.config, OpUpdateOne, withInviteID(id))
	return &InviteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Invite.
func (c *InviteClient) Delete() *InviteDelete {
	mutation := newInviteMutation(c.config, OpDelete)
	return &InviteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InviteClient) DeleteOne(i *Invite) *InviteDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InviteClient) DeleteOneID(id uint64) *InviteDeleteOne {
	builder := c.Delete().Where(invite.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InviteDeleteOne{builder}
}

// Query returns a query builder for Invite.
func (c *InviteClient) Query() *InviteQuery {
	return &InviteQuery{
		config: c.config,
	}
}

// Get returns a Invite entity by its id.
func (c *InviteClient) Get(ctx context.Context, id uint64) (*Invite, error) {
	return c.Query().Where(invite.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InviteClient) GetX(ctx context.Context, id uint64) *Invite {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InviteClient) Hooks() []Hook {
	return c.hooks.Invite
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Create returns a create builder for Message.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id uint64) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MessageClient) DeleteOne(m *Message) *MessageDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MessageClient) DeleteOneID(id uint64) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{
		config: c.config,
	}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id uint64) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id uint64) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	return c.hooks.Message
}

// NoticeClient is a client for the Notice schema.
type NoticeClient struct {
	config
}

// NewNoticeClient returns a client for the Notice from the given config.
func NewNoticeClient(c config) *NoticeClient {
	return &NoticeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notice.Hooks(f(g(h())))`.
func (c *NoticeClient) Use(hooks ...Hook) {
	c.hooks.Notice = append(c.hooks.Notice, hooks...)
}

// Create returns a create builder for Notice.
func (c *NoticeClient) Create() *NoticeCreate {
	mutation := newNoticeMutation(c.config, OpCreate)
	return &NoticeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Notice entities.
func (c *NoticeClient) CreateBulk(builders ...*NoticeCreate) *NoticeCreateBulk {
	return &NoticeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Notice.
func (c *NoticeClient) Update() *NoticeUpdate {
	mutation := newNoticeMutation(c.config, OpUpdate)
	return &NoticeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NoticeClient) UpdateOne(n *Notice) *NoticeUpdateOne {
	mutation := newNoticeMutation(c.config, OpUpdateOne, withNotice(n))
	return &NoticeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NoticeClient) UpdateOneID(id int) *NoticeUpdateOne {
	mutation := newNoticeMutation(c.config, OpUpdateOne, withNoticeID(id))
	return &NoticeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Notice.
func (c *NoticeClient) Delete() *NoticeDelete {
	mutation := newNoticeMutation(c.config, OpDelete)
	return &NoticeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NoticeClient) DeleteOne(n *Notice) *NoticeDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NoticeClient) DeleteOneID(id int) *NoticeDeleteOne {
	builder := c.Delete().Where(notice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NoticeDeleteOne{builder}
}

// Query returns a query builder for Notice.
func (c *NoticeClient) Query() *NoticeQuery {
	return &NoticeQuery{
		config: c.config,
	}
}

// Get returns a Notice entity by its id.
func (c *NoticeClient) Get(ctx context.Context, id int) (*Notice, error) {
	return c.Query().Where(notice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NoticeClient) GetX(ctx context.Context, id int) *Notice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NoticeClient) Hooks() []Hook {
	return c.hooks.Notice
}

// PayOrderClient is a client for the PayOrder schema.
type PayOrderClient struct {
	config
}

// NewPayOrderClient returns a client for the PayOrder from the given config.
func NewPayOrderClient(c config) *PayOrderClient {
	return &PayOrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payorder.Hooks(f(g(h())))`.
func (c *PayOrderClient) Use(hooks ...Hook) {
	c.hooks.PayOrder = append(c.hooks.PayOrder, hooks...)
}

// Create returns a create builder for PayOrder.
func (c *PayOrderClient) Create() *PayOrderCreate {
	mutation := newPayOrderMutation(c.config, OpCreate)
	return &PayOrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PayOrder entities.
func (c *PayOrderClient) CreateBulk(builders ...*PayOrderCreate) *PayOrderCreateBulk {
	return &PayOrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PayOrder.
func (c *PayOrderClient) Update() *PayOrderUpdate {
	mutation := newPayOrderMutation(c.config, OpUpdate)
	return &PayOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PayOrderClient) UpdateOne(po *PayOrder) *PayOrderUpdateOne {
	mutation := newPayOrderMutation(c.config, OpUpdateOne, withPayOrder(po))
	return &PayOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PayOrderClient) UpdateOneID(id uint64) *PayOrderUpdateOne {
	mutation := newPayOrderMutation(c.config, OpUpdateOne, withPayOrderID(id))
	return &PayOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PayOrder.
func (c *PayOrderClient) Delete() *PayOrderDelete {
	mutation := newPayOrderMutation(c.config, OpDelete)
	return &PayOrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PayOrderClient) DeleteOne(po *PayOrder) *PayOrderDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PayOrderClient) DeleteOneID(id uint64) *PayOrderDeleteOne {
	builder := c.Delete().Where(payorder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PayOrderDeleteOne{builder}
}

// Query returns a query builder for PayOrder.
func (c *PayOrderClient) Query() *PayOrderQuery {
	return &PayOrderQuery{
		config: c.config,
	}
}

// Get returns a PayOrder entity by its id.
func (c *PayOrderClient) Get(ctx context.Context, id uint64) (*PayOrder, error) {
	return c.Query().Where(payorder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PayOrderClient) GetX(ctx context.Context, id uint64) *PayOrder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PayOrderClient) Hooks() []Hook {
	return c.hooks.PayOrder
}

// PayOrderFeedbackClient is a client for the PayOrderFeedback schema.
type PayOrderFeedbackClient struct {
	config
}

// NewPayOrderFeedbackClient returns a client for the PayOrderFeedback from the given config.
func NewPayOrderFeedbackClient(c config) *PayOrderFeedbackClient {
	return &PayOrderFeedbackClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payorderfeedback.Hooks(f(g(h())))`.
func (c *PayOrderFeedbackClient) Use(hooks ...Hook) {
	c.hooks.PayOrderFeedback = append(c.hooks.PayOrderFeedback, hooks...)
}

// Create returns a create builder for PayOrderFeedback.
func (c *PayOrderFeedbackClient) Create() *PayOrderFeedbackCreate {
	mutation := newPayOrderFeedbackMutation(c.config, OpCreate)
	return &PayOrderFeedbackCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PayOrderFeedback entities.
func (c *PayOrderFeedbackClient) CreateBulk(builders ...*PayOrderFeedbackCreate) *PayOrderFeedbackCreateBulk {
	return &PayOrderFeedbackCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PayOrderFeedback.
func (c *PayOrderFeedbackClient) Update() *PayOrderFeedbackUpdate {
	mutation := newPayOrderFeedbackMutation(c.config, OpUpdate)
	return &PayOrderFeedbackUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PayOrderFeedbackClient) UpdateOne(pof *PayOrderFeedback) *PayOrderFeedbackUpdateOne {
	mutation := newPayOrderFeedbackMutation(c.config, OpUpdateOne, withPayOrderFeedback(pof))
	return &PayOrderFeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PayOrderFeedbackClient) UpdateOneID(id uint64) *PayOrderFeedbackUpdateOne {
	mutation := newPayOrderFeedbackMutation(c.config, OpUpdateOne, withPayOrderFeedbackID(id))
	return &PayOrderFeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PayOrderFeedback.
func (c *PayOrderFeedbackClient) Delete() *PayOrderFeedbackDelete {
	mutation := newPayOrderFeedbackMutation(c.config, OpDelete)
	return &PayOrderFeedbackDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PayOrderFeedbackClient) DeleteOne(pof *PayOrderFeedback) *PayOrderFeedbackDeleteOne {
	return c.DeleteOneID(pof.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PayOrderFeedbackClient) DeleteOneID(id uint64) *PayOrderFeedbackDeleteOne {
	builder := c.Delete().Where(payorderfeedback.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PayOrderFeedbackDeleteOne{builder}
}

// Query returns a query builder for PayOrderFeedback.
func (c *PayOrderFeedbackClient) Query() *PayOrderFeedbackQuery {
	return &PayOrderFeedbackQuery{
		config: c.config,
	}
}

// Get returns a PayOrderFeedback entity by its id.
func (c *PayOrderFeedbackClient) Get(ctx context.Context, id uint64) (*PayOrderFeedback, error) {
	return c.Query().Where(payorderfeedback.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PayOrderFeedbackClient) GetX(ctx context.Context, id uint64) *PayOrderFeedback {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PayOrderFeedbackClient) Hooks() []Hook {
	return c.hooks.PayOrderFeedback
}

// PersonalFolderClient is a client for the PersonalFolder schema.
type PersonalFolderClient struct {
	config
}

// NewPersonalFolderClient returns a client for the PersonalFolder from the given config.
func NewPersonalFolderClient(c config) *PersonalFolderClient {
	return &PersonalFolderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `personalfolder.Hooks(f(g(h())))`.
func (c *PersonalFolderClient) Use(hooks ...Hook) {
	c.hooks.PersonalFolder = append(c.hooks.PersonalFolder, hooks...)
}

// Create returns a create builder for PersonalFolder.
func (c *PersonalFolderClient) Create() *PersonalFolderCreate {
	mutation := newPersonalFolderMutation(c.config, OpCreate)
	return &PersonalFolderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PersonalFolder entities.
func (c *PersonalFolderClient) CreateBulk(builders ...*PersonalFolderCreate) *PersonalFolderCreateBulk {
	return &PersonalFolderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PersonalFolder.
func (c *PersonalFolderClient) Update() *PersonalFolderUpdate {
	mutation := newPersonalFolderMutation(c.config, OpUpdate)
	return &PersonalFolderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonalFolderClient) UpdateOne(pf *PersonalFolder) *PersonalFolderUpdateOne {
	mutation := newPersonalFolderMutation(c.config, OpUpdateOne, withPersonalFolder(pf))
	return &PersonalFolderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonalFolderClient) UpdateOneID(id uint64) *PersonalFolderUpdateOne {
	mutation := newPersonalFolderMutation(c.config, OpUpdateOne, withPersonalFolderID(id))
	return &PersonalFolderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PersonalFolder.
func (c *PersonalFolderClient) Delete() *PersonalFolderDelete {
	mutation := newPersonalFolderMutation(c.config, OpDelete)
	return &PersonalFolderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PersonalFolderClient) DeleteOne(pf *PersonalFolder) *PersonalFolderDeleteOne {
	return c.DeleteOneID(pf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PersonalFolderClient) DeleteOneID(id uint64) *PersonalFolderDeleteOne {
	builder := c.Delete().Where(personalfolder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonalFolderDeleteOne{builder}
}

// Query returns a query builder for PersonalFolder.
func (c *PersonalFolderClient) Query() *PersonalFolderQuery {
	return &PersonalFolderQuery{
		config: c.config,
	}
}

// Get returns a PersonalFolder entity by its id.
func (c *PersonalFolderClient) Get(ctx context.Context, id uint64) (*PersonalFolder, error) {
	return c.Query().Where(personalfolder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonalFolderClient) GetX(ctx context.Context, id uint64) *PersonalFolder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PersonalFolderClient) Hooks() []Hook {
	return c.hooks.PersonalFolder
}

// RechargeClient is a client for the Recharge schema.
type RechargeClient struct {
	config
}

// NewRechargeClient returns a client for the Recharge from the given config.
func NewRechargeClient(c config) *RechargeClient {
	return &RechargeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recharge.Hooks(f(g(h())))`.
func (c *RechargeClient) Use(hooks ...Hook) {
	c.hooks.Recharge = append(c.hooks.Recharge, hooks...)
}

// Create returns a create builder for Recharge.
func (c *RechargeClient) Create() *RechargeCreate {
	mutation := newRechargeMutation(c.config, OpCreate)
	return &RechargeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Recharge entities.
func (c *RechargeClient) CreateBulk(builders ...*RechargeCreate) *RechargeCreateBulk {
	return &RechargeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Recharge.
func (c *RechargeClient) Update() *RechargeUpdate {
	mutation := newRechargeMutation(c.config, OpUpdate)
	return &RechargeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RechargeClient) UpdateOne(r *Recharge) *RechargeUpdateOne {
	mutation := newRechargeMutation(c.config, OpUpdateOne, withRecharge(r))
	return &RechargeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RechargeClient) UpdateOneID(id uint64) *RechargeUpdateOne {
	mutation := newRechargeMutation(c.config, OpUpdateOne, withRechargeID(id))
	return &RechargeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Recharge.
func (c *RechargeClient) Delete() *RechargeDelete {
	mutation := newRechargeMutation(c.config, OpDelete)
	return &RechargeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RechargeClient) DeleteOne(r *Recharge) *RechargeDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RechargeClient) DeleteOneID(id uint64) *RechargeDeleteOne {
	builder := c.Delete().Where(recharge.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RechargeDeleteOne{builder}
}

// Query returns a query builder for Recharge.
func (c *RechargeClient) Query() *RechargeQuery {
	return &RechargeQuery{
		config: c.config,
	}
}

// Get returns a Recharge entity by its id.
func (c *RechargeClient) Get(ctx context.Context, id uint64) (*Recharge, error) {
	return c.Query().Where(recharge.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RechargeClient) GetX(ctx context.Context, id uint64) *Recharge {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RechargeClient) Hooks() []Hook {
	return c.hooks.Recharge
}

// ShareLinkClient is a client for the ShareLink schema.
type ShareLinkClient struct {
	config
}

// NewShareLinkClient returns a client for the ShareLink from the given config.
func NewShareLinkClient(c config) *ShareLinkClient {
	return &ShareLinkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sharelink.Hooks(f(g(h())))`.
func (c *ShareLinkClient) Use(hooks ...Hook) {
	c.hooks.ShareLink = append(c.hooks.ShareLink, hooks...)
}

// Create returns a create builder for ShareLink.
func (c *ShareLinkClient) Create() *ShareLinkCreate {
	mutation := newShareLinkMutation(c.config, OpCreate)
	return &ShareLinkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShareLink entities.
func (c *ShareLinkClient) CreateBulk(builders ...*ShareLinkCreate) *ShareLinkCreateBulk {
	return &ShareLinkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShareLink.
func (c *ShareLinkClient) Update() *ShareLinkUpdate {
	mutation := newShareLinkMutation(c.config, OpUpdate)
	return &ShareLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShareLinkClient) UpdateOne(sl *ShareLink) *ShareLinkUpdateOne {
	mutation := newShareLinkMutation(c.config, OpUpdateOne, withShareLink(sl))
	return &ShareLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShareLinkClient) UpdateOneID(id uint64) *ShareLinkUpdateOne {
	mutation := newShareLinkMutation(c.config, OpUpdateOne, withShareLinkID(id))
	return &ShareLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShareLink.
func (c *ShareLinkClient) Delete() *ShareLinkDelete {
	mutation := newShareLinkMutation(c.config, OpDelete)
	return &ShareLinkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShareLinkClient) DeleteOne(sl *ShareLink) *ShareLinkDeleteOne {
	return c.DeleteOneID(sl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShareLinkClient) DeleteOneID(id uint64) *ShareLinkDeleteOne {
	builder := c.Delete().Where(sharelink.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShareLinkDeleteOne{builder}
}

// Query returns a query builder for ShareLink.
func (c *ShareLinkClient) Query() *ShareLinkQuery {
	return &ShareLinkQuery{
		config: c.config,
	}
}

// Get returns a ShareLink entity by its id.
func (c *ShareLinkClient) Get(ctx context.Context, id uint64) (*ShareLink, error) {
	return c.Query().Where(sharelink.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShareLinkClient) GetX(ctx context.Context, id uint64) *ShareLink {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ShareLinkClient) Hooks() []Hook {
	return c.hooks.ShareLink
}

// StationClient is a client for the Station schema.
type StationClient struct {
	config
}

// NewStationClient returns a client for the Station from the given config.
func NewStationClient(c config) *StationClient {
	return &StationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `station.Hooks(f(g(h())))`.
func (c *StationClient) Use(hooks ...Hook) {
	c.hooks.Station = append(c.hooks.Station, hooks...)
}

// Create returns a create builder for Station.
func (c *StationClient) Create() *StationCreate {
	mutation := newStationMutation(c.config, OpCreate)
	return &StationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Station entities.
func (c *StationClient) CreateBulk(builders ...*StationCreate) *StationCreateBulk {
	return &StationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Station.
func (c *StationClient) Update() *StationUpdate {
	mutation := newStationMutation(c.config, OpUpdate)
	return &StationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StationClient) UpdateOne(s *Station) *StationUpdateOne {
	mutation := newStationMutation(c.config, OpUpdateOne, withStation(s))
	return &StationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StationClient) UpdateOneID(id uint64) *StationUpdateOne {
	mutation := newStationMutation(c.config, OpUpdateOne, withStationID(id))
	return &StationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Station.
func (c *StationClient) Delete() *StationDelete {
	mutation := newStationMutation(c.config, OpDelete)
	return &StationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StationClient) DeleteOne(s *Station) *StationDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StationClient) DeleteOneID(id uint64) *StationDeleteOne {
	builder := c.Delete().Where(station.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StationDeleteOne{builder}
}

// Query returns a query builder for Station.
func (c *StationClient) Query() *StationQuery {
	return &StationQuery{
		config: c.config,
	}
}

// Get returns a Station entity by its id.
func (c *StationClient) Get(ctx context.Context, id uint64) (*Station, error) {
	return c.Query().Where(station.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StationClient) GetX(ctx context.Context, id uint64) *Station {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StationClient) Hooks() []Hook {
	return c.hooks.Station
}

// StationCategoryClient is a client for the StationCategory schema.
type StationCategoryClient struct {
	config
}

// NewStationCategoryClient returns a client for the StationCategory from the given config.
func NewStationCategoryClient(c config) *StationCategoryClient {
	return &StationCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stationcategory.Hooks(f(g(h())))`.
func (c *StationCategoryClient) Use(hooks ...Hook) {
	c.hooks.StationCategory = append(c.hooks.StationCategory, hooks...)
}

// Create returns a create builder for StationCategory.
func (c *StationCategoryClient) Create() *StationCategoryCreate {
	mutation := newStationCategoryMutation(c.config, OpCreate)
	return &StationCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StationCategory entities.
func (c *StationCategoryClient) CreateBulk(builders ...*StationCategoryCreate) *StationCategoryCreateBulk {
	return &StationCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StationCategory.
func (c *StationCategoryClient) Update() *StationCategoryUpdate {
	mutation := newStationCategoryMutation(c.config, OpUpdate)
	return &StationCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StationCategoryClient) UpdateOne(sc *StationCategory) *StationCategoryUpdateOne {
	mutation := newStationCategoryMutation(c.config, OpUpdateOne, withStationCategory(sc))
	return &StationCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StationCategoryClient) UpdateOneID(id uint64) *StationCategoryUpdateOne {
	mutation := newStationCategoryMutation(c.config, OpUpdateOne, withStationCategoryID(id))
	return &StationCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StationCategory.
func (c *StationCategoryClient) Delete() *StationCategoryDelete {
	mutation := newStationCategoryMutation(c.config, OpDelete)
	return &StationCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StationCategoryClient) DeleteOne(sc *StationCategory) *StationCategoryDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StationCategoryClient) DeleteOneID(id uint64) *StationCategoryDeleteOne {
	builder := c.Delete().Where(stationcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StationCategoryDeleteOne{builder}
}

// Query returns a query builder for StationCategory.
func (c *StationCategoryClient) Query() *StationCategoryQuery {
	return &StationCategoryQuery{
		config: c.config,
	}
}

// Get returns a StationCategory entity by its id.
func (c *StationCategoryClient) Get(ctx context.Context, id uint64) (*StationCategory, error) {
	return c.Query().Where(stationcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StationCategoryClient) GetX(ctx context.Context, id uint64) *StationCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StationCategoryClient) Hooks() []Hook {
	return c.hooks.StationCategory
}

// StationMetaClient is a client for the StationMeta schema.
type StationMetaClient struct {
	config
}

// NewStationMetaClient returns a client for the StationMeta from the given config.
func NewStationMetaClient(c config) *StationMetaClient {
	return &StationMetaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stationmeta.Hooks(f(g(h())))`.
func (c *StationMetaClient) Use(hooks ...Hook) {
	c.hooks.StationMeta = append(c.hooks.StationMeta, hooks...)
}

// Create returns a create builder for StationMeta.
func (c *StationMetaClient) Create() *StationMetaCreate {
	mutation := newStationMetaMutation(c.config, OpCreate)
	return &StationMetaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StationMeta entities.
func (c *StationMetaClient) CreateBulk(builders ...*StationMetaCreate) *StationMetaCreateBulk {
	return &StationMetaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StationMeta.
func (c *StationMetaClient) Update() *StationMetaUpdate {
	mutation := newStationMetaMutation(c.config, OpUpdate)
	return &StationMetaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StationMetaClient) UpdateOne(sm *StationMeta) *StationMetaUpdateOne {
	mutation := newStationMetaMutation(c.config, OpUpdateOne, withStationMeta(sm))
	return &StationMetaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StationMetaClient) UpdateOneID(id uint64) *StationMetaUpdateOne {
	mutation := newStationMetaMutation(c.config, OpUpdateOne, withStationMetaID(id))
	return &StationMetaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StationMeta.
func (c *StationMetaClient) Delete() *StationMetaDelete {
	mutation := newStationMetaMutation(c.config, OpDelete)
	return &StationMetaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StationMetaClient) DeleteOne(sm *StationMeta) *StationMetaDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StationMetaClient) DeleteOneID(id uint64) *StationMetaDeleteOne {
	builder := c.Delete().Where(stationmeta.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StationMetaDeleteOne{builder}
}

// Query returns a query builder for StationMeta.
func (c *StationMetaClient) Query() *StationMetaQuery {
	return &StationMetaQuery{
		config: c.config,
	}
}

// Get returns a StationMeta entity by its id.
func (c *StationMetaClient) Get(ctx context.Context, id uint64) (*StationMeta, error) {
	return c.Query().Where(stationmeta.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StationMetaClient) GetX(ctx context.Context, id uint64) *StationMeta {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StationMetaClient) Hooks() []Hook {
	return c.hooks.StationMeta
}

// TeamClient is a client for the Team schema.
type TeamClient struct {
	config
}

// NewTeamClient returns a client for the Team from the given config.
func NewTeamClient(c config) *TeamClient {
	return &TeamClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `team.Hooks(f(g(h())))`.
func (c *TeamClient) Use(hooks ...Hook) {
	c.hooks.Team = append(c.hooks.Team, hooks...)
}

// Create returns a create builder for Team.
func (c *TeamClient) Create() *TeamCreate {
	mutation := newTeamMutation(c.config, OpCreate)
	return &TeamCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Team entities.
func (c *TeamClient) CreateBulk(builders ...*TeamCreate) *TeamCreateBulk {
	return &TeamCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Team.
func (c *TeamClient) Update() *TeamUpdate {
	mutation := newTeamMutation(c.config, OpUpdate)
	return &TeamUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeamClient) UpdateOne(t *Team) *TeamUpdateOne {
	mutation := newTeamMutation(c.config, OpUpdateOne, withTeam(t))
	return &TeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeamClient) UpdateOneID(id uint64) *TeamUpdateOne {
	mutation := newTeamMutation(c.config, OpUpdateOne, withTeamID(id))
	return &TeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Team.
func (c *TeamClient) Delete() *TeamDelete {
	mutation := newTeamMutation(c.config, OpDelete)
	return &TeamDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TeamClient) DeleteOne(t *Team) *TeamDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TeamClient) DeleteOneID(id uint64) *TeamDeleteOne {
	builder := c.Delete().Where(team.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeamDeleteOne{builder}
}

// Query returns a query builder for Team.
func (c *TeamClient) Query() *TeamQuery {
	return &TeamQuery{
		config: c.config,
	}
}

// Get returns a Team entity by its id.
func (c *TeamClient) Get(ctx context.Context, id uint64) (*Team, error) {
	return c.Query().Where(team.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeamClient) GetX(ctx context.Context, id uint64) *Team {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TeamClient) Hooks() []Hook {
	return c.hooks.Team
}

// TeamFolderClient is a client for the TeamFolder schema.
type TeamFolderClient struct {
	config
}

// NewTeamFolderClient returns a client for the TeamFolder from the given config.
func NewTeamFolderClient(c config) *TeamFolderClient {
	return &TeamFolderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teamfolder.Hooks(f(g(h())))`.
func (c *TeamFolderClient) Use(hooks ...Hook) {
	c.hooks.TeamFolder = append(c.hooks.TeamFolder, hooks...)
}

// Create returns a create builder for TeamFolder.
func (c *TeamFolderClient) Create() *TeamFolderCreate {
	mutation := newTeamFolderMutation(c.config, OpCreate)
	return &TeamFolderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TeamFolder entities.
func (c *TeamFolderClient) CreateBulk(builders ...*TeamFolderCreate) *TeamFolderCreateBulk {
	return &TeamFolderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TeamFolder.
func (c *TeamFolderClient) Update() *TeamFolderUpdate {
	mutation := newTeamFolderMutation(c.config, OpUpdate)
	return &TeamFolderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeamFolderClient) UpdateOne(tf *TeamFolder) *TeamFolderUpdateOne {
	mutation := newTeamFolderMutation(c.config, OpUpdateOne, withTeamFolder(tf))
	return &TeamFolderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeamFolderClient) UpdateOneID(id uint64) *TeamFolderUpdateOne {
	mutation := newTeamFolderMutation(c.config, OpUpdateOne, withTeamFolderID(id))
	return &TeamFolderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TeamFolder.
func (c *TeamFolderClient) Delete() *TeamFolderDelete {
	mutation := newTeamFolderMutation(c.config, OpDelete)
	return &TeamFolderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TeamFolderClient) DeleteOne(tf *TeamFolder) *TeamFolderDeleteOne {
	return c.DeleteOneID(tf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TeamFolderClient) DeleteOneID(id uint64) *TeamFolderDeleteOne {
	builder := c.Delete().Where(teamfolder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeamFolderDeleteOne{builder}
}

// Query returns a query builder for TeamFolder.
func (c *TeamFolderClient) Query() *TeamFolderQuery {
	return &TeamFolderQuery{
		config: c.config,
	}
}

// Get returns a TeamFolder entity by its id.
func (c *TeamFolderClient) Get(ctx context.Context, id uint64) (*TeamFolder, error) {
	return c.Query().Where(teamfolder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeamFolderClient) GetX(ctx context.Context, id uint64) *TeamFolder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TeamFolderClient) Hooks() []Hook {
	return c.hooks.TeamFolder
}

// TeamGroupClient is a client for the TeamGroup schema.
type TeamGroupClient struct {
	config
}

// NewTeamGroupClient returns a client for the TeamGroup from the given config.
func NewTeamGroupClient(c config) *TeamGroupClient {
	return &TeamGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teamgroup.Hooks(f(g(h())))`.
func (c *TeamGroupClient) Use(hooks ...Hook) {
	c.hooks.TeamGroup = append(c.hooks.TeamGroup, hooks...)
}

// Create returns a create builder for TeamGroup.
func (c *TeamGroupClient) Create() *TeamGroupCreate {
	mutation := newTeamGroupMutation(c.config, OpCreate)
	return &TeamGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TeamGroup entities.
func (c *TeamGroupClient) CreateBulk(builders ...*TeamGroupCreate) *TeamGroupCreateBulk {
	return &TeamGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TeamGroup.
func (c *TeamGroupClient) Update() *TeamGroupUpdate {
	mutation := newTeamGroupMutation(c.config, OpUpdate)
	return &TeamGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeamGroupClient) UpdateOne(tg *TeamGroup) *TeamGroupUpdateOne {
	mutation := newTeamGroupMutation(c.config, OpUpdateOne, withTeamGroup(tg))
	return &TeamGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeamGroupClient) UpdateOneID(id uint64) *TeamGroupUpdateOne {
	mutation := newTeamGroupMutation(c.config, OpUpdateOne, withTeamGroupID(id))
	return &TeamGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TeamGroup.
func (c *TeamGroupClient) Delete() *TeamGroupDelete {
	mutation := newTeamGroupMutation(c.config, OpDelete)
	return &TeamGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TeamGroupClient) DeleteOne(tg *TeamGroup) *TeamGroupDeleteOne {
	return c.DeleteOneID(tg.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TeamGroupClient) DeleteOneID(id uint64) *TeamGroupDeleteOne {
	builder := c.Delete().Where(teamgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeamGroupDeleteOne{builder}
}

// Query returns a query builder for TeamGroup.
func (c *TeamGroupClient) Query() *TeamGroupQuery {
	return &TeamGroupQuery{
		config: c.config,
	}
}

// Get returns a TeamGroup entity by its id.
func (c *TeamGroupClient) Get(ctx context.Context, id uint64) (*TeamGroup, error) {
	return c.Query().Where(teamgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeamGroupClient) GetX(ctx context.Context, id uint64) *TeamGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TeamGroupClient) Hooks() []Hook {
	return c.hooks.TeamGroup
}

// UrlCrawlClient is a client for the UrlCrawl schema.
type UrlCrawlClient struct {
	config
}

// NewUrlCrawlClient returns a client for the UrlCrawl from the given config.
func NewUrlCrawlClient(c config) *UrlCrawlClient {
	return &UrlCrawlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `urlcrawl.Hooks(f(g(h())))`.
func (c *UrlCrawlClient) Use(hooks ...Hook) {
	c.hooks.UrlCrawl = append(c.hooks.UrlCrawl, hooks...)
}

// Create returns a create builder for UrlCrawl.
func (c *UrlCrawlClient) Create() *UrlCrawlCreate {
	mutation := newUrlCrawlMutation(c.config, OpCreate)
	return &UrlCrawlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UrlCrawl entities.
func (c *UrlCrawlClient) CreateBulk(builders ...*UrlCrawlCreate) *UrlCrawlCreateBulk {
	return &UrlCrawlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UrlCrawl.
func (c *UrlCrawlClient) Update() *UrlCrawlUpdate {
	mutation := newUrlCrawlMutation(c.config, OpUpdate)
	return &UrlCrawlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UrlCrawlClient) UpdateOne(uc *UrlCrawl) *UrlCrawlUpdateOne {
	mutation := newUrlCrawlMutation(c.config, OpUpdateOne, withUrlCrawl(uc))
	return &UrlCrawlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UrlCrawlClient) UpdateOneID(id uint64) *UrlCrawlUpdateOne {
	mutation := newUrlCrawlMutation(c.config, OpUpdateOne, withUrlCrawlID(id))
	return &UrlCrawlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UrlCrawl.
func (c *UrlCrawlClient) Delete() *UrlCrawlDelete {
	mutation := newUrlCrawlMutation(c.config, OpDelete)
	return &UrlCrawlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UrlCrawlClient) DeleteOne(uc *UrlCrawl) *UrlCrawlDeleteOne {
	return c.DeleteOneID(uc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UrlCrawlClient) DeleteOneID(id uint64) *UrlCrawlDeleteOne {
	builder := c.Delete().Where(urlcrawl.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UrlCrawlDeleteOne{builder}
}

// Query returns a query builder for UrlCrawl.
func (c *UrlCrawlClient) Query() *UrlCrawlQuery {
	return &UrlCrawlQuery{
		config: c.config,
	}
}

// Get returns a UrlCrawl entity by its id.
func (c *UrlCrawlClient) Get(ctx context.Context, id uint64) (*UrlCrawl, error) {
	return c.Query().Where(urlcrawl.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UrlCrawlClient) GetX(ctx context.Context, id uint64) *UrlCrawl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UrlCrawlClient) Hooks() []Hook {
	return c.hooks.UrlCrawl
}

// WebLinkClient is a client for the WebLink schema.
type WebLinkClient struct {
	config
}

// NewWebLinkClient returns a client for the WebLink from the given config.
func NewWebLinkClient(c config) *WebLinkClient {
	return &WebLinkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `weblink.Hooks(f(g(h())))`.
func (c *WebLinkClient) Use(hooks ...Hook) {
	c.hooks.WebLink = append(c.hooks.WebLink, hooks...)
}

// Create returns a create builder for WebLink.
func (c *WebLinkClient) Create() *WebLinkCreate {
	mutation := newWebLinkMutation(c.config, OpCreate)
	return &WebLinkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WebLink entities.
func (c *WebLinkClient) CreateBulk(builders ...*WebLinkCreate) *WebLinkCreateBulk {
	return &WebLinkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WebLink.
func (c *WebLinkClient) Update() *WebLinkUpdate {
	mutation := newWebLinkMutation(c.config, OpUpdate)
	return &WebLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WebLinkClient) UpdateOne(wl *WebLink) *WebLinkUpdateOne {
	mutation := newWebLinkMutation(c.config, OpUpdateOne, withWebLink(wl))
	return &WebLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WebLinkClient) UpdateOneID(id uint64) *WebLinkUpdateOne {
	mutation := newWebLinkMutation(c.config, OpUpdateOne, withWebLinkID(id))
	return &WebLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WebLink.
func (c *WebLinkClient) Delete() *WebLinkDelete {
	mutation := newWebLinkMutation(c.config, OpDelete)
	return &WebLinkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WebLinkClient) DeleteOne(wl *WebLink) *WebLinkDeleteOne {
	return c.DeleteOneID(wl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WebLinkClient) DeleteOneID(id uint64) *WebLinkDeleteOne {
	builder := c.Delete().Where(weblink.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WebLinkDeleteOne{builder}
}

// Query returns a query builder for WebLink.
func (c *WebLinkClient) Query() *WebLinkQuery {
	return &WebLinkQuery{
		config: c.config,
	}
}

// Get returns a WebLink entity by its id.
func (c *WebLinkClient) Get(ctx context.Context, id uint64) (*WebLink, error) {
	return c.Query().Where(weblink.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WebLinkClient) GetX(ctx context.Context, id uint64) *WebLink {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WebLinkClient) Hooks() []Hook {
	return c.hooks.WebLink
}

// WorkspaceClient is a client for the Workspace schema.
type WorkspaceClient struct {
	config
}

// NewWorkspaceClient returns a client for the Workspace from the given config.
func NewWorkspaceClient(c config) *WorkspaceClient {
	return &WorkspaceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workspace.Hooks(f(g(h())))`.
func (c *WorkspaceClient) Use(hooks ...Hook) {
	c.hooks.Workspace = append(c.hooks.Workspace, hooks...)
}

// Create returns a create builder for Workspace.
func (c *WorkspaceClient) Create() *WorkspaceCreate {
	mutation := newWorkspaceMutation(c.config, OpCreate)
	return &WorkspaceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Workspace entities.
func (c *WorkspaceClient) CreateBulk(builders ...*WorkspaceCreate) *WorkspaceCreateBulk {
	return &WorkspaceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Workspace.
func (c *WorkspaceClient) Update() *WorkspaceUpdate {
	mutation := newWorkspaceMutation(c.config, OpUpdate)
	return &WorkspaceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkspaceClient) UpdateOne(w *Workspace) *WorkspaceUpdateOne {
	mutation := newWorkspaceMutation(c.config, OpUpdateOne, withWorkspace(w))
	return &WorkspaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkspaceClient) UpdateOneID(id uint64) *WorkspaceUpdateOne {
	mutation := newWorkspaceMutation(c.config, OpUpdateOne, withWorkspaceID(id))
	return &WorkspaceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Workspace.
func (c *WorkspaceClient) Delete() *WorkspaceDelete {
	mutation := newWorkspaceMutation(c.config, OpDelete)
	return &WorkspaceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkspaceClient) DeleteOne(w *Workspace) *WorkspaceDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkspaceClient) DeleteOneID(id uint64) *WorkspaceDeleteOne {
	builder := c.Delete().Where(workspace.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkspaceDeleteOne{builder}
}

// Query returns a query builder for Workspace.
func (c *WorkspaceClient) Query() *WorkspaceQuery {
	return &WorkspaceQuery{
		config: c.config,
	}
}

// Get returns a Workspace entity by its id.
func (c *WorkspaceClient) Get(ctx context.Context, id uint64) (*Workspace, error) {
	return c.Query().Where(workspace.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkspaceClient) GetX(ctx context.Context, id uint64) *Workspace {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WorkspaceClient) Hooks() []Hook {
	return c.hooks.Workspace
}
