// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/goodarticlemeta"
	"tabelf/backend/gen/entschema/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GoodArticleMetaUpdate is the builder for updating GoodArticleMeta entities.
type GoodArticleMetaUpdate struct {
	config
	hooks    []Hook
	mutation *GoodArticleMetaMutation
}

// Where appends a list predicates to the GoodArticleMetaUpdate builder.
func (gamu *GoodArticleMetaUpdate) Where(ps ...predicate.GoodArticleMeta) *GoodArticleMetaUpdate {
	gamu.mutation.Where(ps...)
	return gamu
}

// SetUpdatedAt sets the "updated_at" field.
func (gamu *GoodArticleMetaUpdate) SetUpdatedAt(t time.Time) *GoodArticleMetaUpdate {
	gamu.mutation.SetUpdatedAt(t)
	return gamu
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (gamu *GoodArticleMetaUpdate) SetDeactivatedAt(t time.Time) *GoodArticleMetaUpdate {
	gamu.mutation.SetDeactivatedAt(t)
	return gamu
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (gamu *GoodArticleMetaUpdate) SetNillableDeactivatedAt(t *time.Time) *GoodArticleMetaUpdate {
	if t != nil {
		gamu.SetDeactivatedAt(*t)
	}
	return gamu
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (gamu *GoodArticleMetaUpdate) ClearDeactivatedAt() *GoodArticleMetaUpdate {
	gamu.mutation.ClearDeactivatedAt()
	return gamu
}

// SetArticleUID sets the "article_uid" field.
func (gamu *GoodArticleMetaUpdate) SetArticleUID(s string) *GoodArticleMetaUpdate {
	gamu.mutation.SetArticleUID(s)
	return gamu
}

// SetUserUID sets the "user_uid" field.
func (gamu *GoodArticleMetaUpdate) SetUserUID(s string) *GoodArticleMetaUpdate {
	gamu.mutation.SetUserUID(s)
	return gamu
}

// SetHasStar sets the "has_star" field.
func (gamu *GoodArticleMetaUpdate) SetHasStar(b bool) *GoodArticleMetaUpdate {
	gamu.mutation.SetHasStar(b)
	return gamu
}

// SetNillableHasStar sets the "has_star" field if the given value is not nil.
func (gamu *GoodArticleMetaUpdate) SetNillableHasStar(b *bool) *GoodArticleMetaUpdate {
	if b != nil {
		gamu.SetHasStar(*b)
	}
	return gamu
}

// SetHasView sets the "has_view" field.
func (gamu *GoodArticleMetaUpdate) SetHasView(b bool) *GoodArticleMetaUpdate {
	gamu.mutation.SetHasView(b)
	return gamu
}

// SetNillableHasView sets the "has_view" field if the given value is not nil.
func (gamu *GoodArticleMetaUpdate) SetNillableHasView(b *bool) *GoodArticleMetaUpdate {
	if b != nil {
		gamu.SetHasView(*b)
	}
	return gamu
}

// SetHasUsed sets the "has_used" field.
func (gamu *GoodArticleMetaUpdate) SetHasUsed(b bool) *GoodArticleMetaUpdate {
	gamu.mutation.SetHasUsed(b)
	return gamu
}

// SetNillableHasUsed sets the "has_used" field if the given value is not nil.
func (gamu *GoodArticleMetaUpdate) SetNillableHasUsed(b *bool) *GoodArticleMetaUpdate {
	if b != nil {
		gamu.SetHasUsed(*b)
	}
	return gamu
}

// Mutation returns the GoodArticleMetaMutation object of the builder.
func (gamu *GoodArticleMetaUpdate) Mutation() *GoodArticleMetaMutation {
	return gamu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gamu *GoodArticleMetaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gamu.defaults()
	if len(gamu.hooks) == 0 {
		affected, err = gamu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodArticleMetaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gamu.mutation = mutation
			affected, err = gamu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gamu.hooks) - 1; i >= 0; i-- {
			if gamu.hooks[i] == nil {
				return 0, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = gamu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gamu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gamu *GoodArticleMetaUpdate) SaveX(ctx context.Context) int {
	affected, err := gamu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gamu *GoodArticleMetaUpdate) Exec(ctx context.Context) error {
	_, err := gamu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gamu *GoodArticleMetaUpdate) ExecX(ctx context.Context) {
	if err := gamu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gamu *GoodArticleMetaUpdate) defaults() {
	if _, ok := gamu.mutation.UpdatedAt(); !ok {
		v := goodarticlemeta.UpdateDefaultUpdatedAt()
		gamu.mutation.SetUpdatedAt(v)
	}
}

func (gamu *GoodArticleMetaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodarticlemeta.Table,
			Columns: goodarticlemeta.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: goodarticlemeta.FieldID,
			},
		},
	}
	if ps := gamu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gamu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlemeta.FieldUpdatedAt,
		})
	}
	if value, ok := gamu.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlemeta.FieldDeactivatedAt,
		})
	}
	if gamu.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodarticlemeta.FieldDeactivatedAt,
		})
	}
	if value, ok := gamu.mutation.ArticleUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticlemeta.FieldArticleUID,
		})
	}
	if value, ok := gamu.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticlemeta.FieldUserUID,
		})
	}
	if value, ok := gamu.mutation.HasStar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodarticlemeta.FieldHasStar,
		})
	}
	if value, ok := gamu.mutation.HasView(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodarticlemeta.FieldHasView,
		})
	}
	if value, ok := gamu.mutation.HasUsed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodarticlemeta.FieldHasUsed,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gamu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodarticlemeta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GoodArticleMetaUpdateOne is the builder for updating a single GoodArticleMeta entity.
type GoodArticleMetaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodArticleMetaMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (gamuo *GoodArticleMetaUpdateOne) SetUpdatedAt(t time.Time) *GoodArticleMetaUpdateOne {
	gamuo.mutation.SetUpdatedAt(t)
	return gamuo
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (gamuo *GoodArticleMetaUpdateOne) SetDeactivatedAt(t time.Time) *GoodArticleMetaUpdateOne {
	gamuo.mutation.SetDeactivatedAt(t)
	return gamuo
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (gamuo *GoodArticleMetaUpdateOne) SetNillableDeactivatedAt(t *time.Time) *GoodArticleMetaUpdateOne {
	if t != nil {
		gamuo.SetDeactivatedAt(*t)
	}
	return gamuo
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (gamuo *GoodArticleMetaUpdateOne) ClearDeactivatedAt() *GoodArticleMetaUpdateOne {
	gamuo.mutation.ClearDeactivatedAt()
	return gamuo
}

// SetArticleUID sets the "article_uid" field.
func (gamuo *GoodArticleMetaUpdateOne) SetArticleUID(s string) *GoodArticleMetaUpdateOne {
	gamuo.mutation.SetArticleUID(s)
	return gamuo
}

// SetUserUID sets the "user_uid" field.
func (gamuo *GoodArticleMetaUpdateOne) SetUserUID(s string) *GoodArticleMetaUpdateOne {
	gamuo.mutation.SetUserUID(s)
	return gamuo
}

// SetHasStar sets the "has_star" field.
func (gamuo *GoodArticleMetaUpdateOne) SetHasStar(b bool) *GoodArticleMetaUpdateOne {
	gamuo.mutation.SetHasStar(b)
	return gamuo
}

// SetNillableHasStar sets the "has_star" field if the given value is not nil.
func (gamuo *GoodArticleMetaUpdateOne) SetNillableHasStar(b *bool) *GoodArticleMetaUpdateOne {
	if b != nil {
		gamuo.SetHasStar(*b)
	}
	return gamuo
}

// SetHasView sets the "has_view" field.
func (gamuo *GoodArticleMetaUpdateOne) SetHasView(b bool) *GoodArticleMetaUpdateOne {
	gamuo.mutation.SetHasView(b)
	return gamuo
}

// SetNillableHasView sets the "has_view" field if the given value is not nil.
func (gamuo *GoodArticleMetaUpdateOne) SetNillableHasView(b *bool) *GoodArticleMetaUpdateOne {
	if b != nil {
		gamuo.SetHasView(*b)
	}
	return gamuo
}

// SetHasUsed sets the "has_used" field.
func (gamuo *GoodArticleMetaUpdateOne) SetHasUsed(b bool) *GoodArticleMetaUpdateOne {
	gamuo.mutation.SetHasUsed(b)
	return gamuo
}

// SetNillableHasUsed sets the "has_used" field if the given value is not nil.
func (gamuo *GoodArticleMetaUpdateOne) SetNillableHasUsed(b *bool) *GoodArticleMetaUpdateOne {
	if b != nil {
		gamuo.SetHasUsed(*b)
	}
	return gamuo
}

// Mutation returns the GoodArticleMetaMutation object of the builder.
func (gamuo *GoodArticleMetaUpdateOne) Mutation() *GoodArticleMetaMutation {
	return gamuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gamuo *GoodArticleMetaUpdateOne) Select(field string, fields ...string) *GoodArticleMetaUpdateOne {
	gamuo.fields = append([]string{field}, fields...)
	return gamuo
}

// Save executes the query and returns the updated GoodArticleMeta entity.
func (gamuo *GoodArticleMetaUpdateOne) Save(ctx context.Context) (*GoodArticleMeta, error) {
	var (
		err  error
		node *GoodArticleMeta
	)
	gamuo.defaults()
	if len(gamuo.hooks) == 0 {
		node, err = gamuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodArticleMetaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gamuo.mutation = mutation
			node, err = gamuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gamuo.hooks) - 1; i >= 0; i-- {
			if gamuo.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = gamuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gamuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gamuo *GoodArticleMetaUpdateOne) SaveX(ctx context.Context) *GoodArticleMeta {
	node, err := gamuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gamuo *GoodArticleMetaUpdateOne) Exec(ctx context.Context) error {
	_, err := gamuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gamuo *GoodArticleMetaUpdateOne) ExecX(ctx context.Context) {
	if err := gamuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gamuo *GoodArticleMetaUpdateOne) defaults() {
	if _, ok := gamuo.mutation.UpdatedAt(); !ok {
		v := goodarticlemeta.UpdateDefaultUpdatedAt()
		gamuo.mutation.SetUpdatedAt(v)
	}
}

func (gamuo *GoodArticleMetaUpdateOne) sqlSave(ctx context.Context) (_node *GoodArticleMeta, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodarticlemeta.Table,
			Columns: goodarticlemeta.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: goodarticlemeta.FieldID,
			},
		},
	}
	id, ok := gamuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entschema: missing "GoodArticleMeta.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gamuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodarticlemeta.FieldID)
		for _, f := range fields {
			if !goodarticlemeta.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entschema: invalid field %q for query", f)}
			}
			if f != goodarticlemeta.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gamuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gamuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlemeta.FieldUpdatedAt,
		})
	}
	if value, ok := gamuo.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: goodarticlemeta.FieldDeactivatedAt,
		})
	}
	if gamuo.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: goodarticlemeta.FieldDeactivatedAt,
		})
	}
	if value, ok := gamuo.mutation.ArticleUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticlemeta.FieldArticleUID,
		})
	}
	if value, ok := gamuo.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodarticlemeta.FieldUserUID,
		})
	}
	if value, ok := gamuo.mutation.HasStar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodarticlemeta.FieldHasStar,
		})
	}
	if value, ok := gamuo.mutation.HasView(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodarticlemeta.FieldHasView,
		})
	}
	if value, ok := gamuo.mutation.HasUsed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodarticlemeta.FieldHasUsed,
		})
	}
	_node = &GoodArticleMeta{config: gamuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gamuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodarticlemeta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
