// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"
	"tabelf/backend/gen/entschema"
)

// The AccountFunc type is an adapter to allow the use of ordinary
// function as Account mutator.
type AccountFunc func(context.Context, *entschema.AccountMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f AccountFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.AccountMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.AccountMutation", m)
	}
	return f(ctx, mv)
}

// The AdminFunc type is an adapter to allow the use of ordinary
// function as Admin mutator.
type AdminFunc func(context.Context, *entschema.AdminMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f AdminFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.AdminMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.AdminMutation", m)
	}
	return f(ctx, mv)
}

// The CollaborationFunc type is an adapter to allow the use of ordinary
// function as Collaboration mutator.
type CollaborationFunc func(context.Context, *entschema.CollaborationMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f CollaborationFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.CollaborationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.CollaborationMutation", m)
	}
	return f(ctx, mv)
}

// The CommunityFunc type is an adapter to allow the use of ordinary
// function as Community mutator.
type CommunityFunc func(context.Context, *entschema.CommunityMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f CommunityFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.CommunityMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.CommunityMutation", m)
	}
	return f(ctx, mv)
}

// The CommunityCategoryFunc type is an adapter to allow the use of ordinary
// function as CommunityCategory mutator.
type CommunityCategoryFunc func(context.Context, *entschema.CommunityCategoryMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f CommunityCategoryFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.CommunityCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.CommunityCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The CommunityMetaFunc type is an adapter to allow the use of ordinary
// function as CommunityMeta mutator.
type CommunityMetaFunc func(context.Context, *entschema.CommunityMetaMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f CommunityMetaFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.CommunityMetaMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.CommunityMetaMutation", m)
	}
	return f(ctx, mv)
}

// The FeedbackFunc type is an adapter to allow the use of ordinary
// function as Feedback mutator.
type FeedbackFunc func(context.Context, *entschema.FeedbackMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f FeedbackFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.FeedbackMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.FeedbackMutation", m)
	}
	return f(ctx, mv)
}

// The FocusFunc type is an adapter to allow the use of ordinary
// function as Focus mutator.
type FocusFunc func(context.Context, *entschema.FocusMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f FocusFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.FocusMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.FocusMutation", m)
	}
	return f(ctx, mv)
}

// The GoodArticleFunc type is an adapter to allow the use of ordinary
// function as GoodArticle mutator.
type GoodArticleFunc func(context.Context, *entschema.GoodArticleMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f GoodArticleFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.GoodArticleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.GoodArticleMutation", m)
	}
	return f(ctx, mv)
}

// The GoodArticleCategoryFunc type is an adapter to allow the use of ordinary
// function as GoodArticleCategory mutator.
type GoodArticleCategoryFunc func(context.Context, *entschema.GoodArticleCategoryMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f GoodArticleCategoryFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.GoodArticleCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.GoodArticleCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The GoodArticleHotFunc type is an adapter to allow the use of ordinary
// function as GoodArticleHot mutator.
type GoodArticleHotFunc func(context.Context, *entschema.GoodArticleHotMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f GoodArticleHotFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.GoodArticleHotMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.GoodArticleHotMutation", m)
	}
	return f(ctx, mv)
}

// The GoodArticleMetaFunc type is an adapter to allow the use of ordinary
// function as GoodArticleMeta mutator.
type GoodArticleMetaFunc func(context.Context, *entschema.GoodArticleMetaMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f GoodArticleMetaFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.GoodArticleMetaMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.GoodArticleMetaMutation", m)
	}
	return f(ctx, mv)
}

// The InviteFunc type is an adapter to allow the use of ordinary
// function as Invite mutator.
type InviteFunc func(context.Context, *entschema.InviteMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f InviteFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.InviteMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.InviteMutation", m)
	}
	return f(ctx, mv)
}

// The MessageFunc type is an adapter to allow the use of ordinary
// function as Message mutator.
type MessageFunc func(context.Context, *entschema.MessageMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f MessageFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.MessageMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.MessageMutation", m)
	}
	return f(ctx, mv)
}

// The NoticeFunc type is an adapter to allow the use of ordinary
// function as Notice mutator.
type NoticeFunc func(context.Context, *entschema.NoticeMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f NoticeFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.NoticeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.NoticeMutation", m)
	}
	return f(ctx, mv)
}

// The PayOrderFunc type is an adapter to allow the use of ordinary
// function as PayOrder mutator.
type PayOrderFunc func(context.Context, *entschema.PayOrderMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f PayOrderFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.PayOrderMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.PayOrderMutation", m)
	}
	return f(ctx, mv)
}

// The PayOrderFeedbackFunc type is an adapter to allow the use of ordinary
// function as PayOrderFeedback mutator.
type PayOrderFeedbackFunc func(context.Context, *entschema.PayOrderFeedbackMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f PayOrderFeedbackFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.PayOrderFeedbackMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.PayOrderFeedbackMutation", m)
	}
	return f(ctx, mv)
}

// The PersonalFolderFunc type is an adapter to allow the use of ordinary
// function as PersonalFolder mutator.
type PersonalFolderFunc func(context.Context, *entschema.PersonalFolderMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f PersonalFolderFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.PersonalFolderMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.PersonalFolderMutation", m)
	}
	return f(ctx, mv)
}

// The RechargeFunc type is an adapter to allow the use of ordinary
// function as Recharge mutator.
type RechargeFunc func(context.Context, *entschema.RechargeMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f RechargeFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.RechargeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.RechargeMutation", m)
	}
	return f(ctx, mv)
}

// The ShareLinkFunc type is an adapter to allow the use of ordinary
// function as ShareLink mutator.
type ShareLinkFunc func(context.Context, *entschema.ShareLinkMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f ShareLinkFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.ShareLinkMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.ShareLinkMutation", m)
	}
	return f(ctx, mv)
}

// The StationFunc type is an adapter to allow the use of ordinary
// function as Station mutator.
type StationFunc func(context.Context, *entschema.StationMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f StationFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.StationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.StationMutation", m)
	}
	return f(ctx, mv)
}

// The StationCategoryFunc type is an adapter to allow the use of ordinary
// function as StationCategory mutator.
type StationCategoryFunc func(context.Context, *entschema.StationCategoryMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f StationCategoryFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.StationCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.StationCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The StationMetaFunc type is an adapter to allow the use of ordinary
// function as StationMeta mutator.
type StationMetaFunc func(context.Context, *entschema.StationMetaMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f StationMetaFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.StationMetaMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.StationMetaMutation", m)
	}
	return f(ctx, mv)
}

// The TeamFunc type is an adapter to allow the use of ordinary
// function as Team mutator.
type TeamFunc func(context.Context, *entschema.TeamMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f TeamFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.TeamMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.TeamMutation", m)
	}
	return f(ctx, mv)
}

// The TeamFolderFunc type is an adapter to allow the use of ordinary
// function as TeamFolder mutator.
type TeamFolderFunc func(context.Context, *entschema.TeamFolderMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f TeamFolderFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.TeamFolderMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.TeamFolderMutation", m)
	}
	return f(ctx, mv)
}

// The TeamGroupFunc type is an adapter to allow the use of ordinary
// function as TeamGroup mutator.
type TeamGroupFunc func(context.Context, *entschema.TeamGroupMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f TeamGroupFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.TeamGroupMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.TeamGroupMutation", m)
	}
	return f(ctx, mv)
}

// The UrlCrawlFunc type is an adapter to allow the use of ordinary
// function as UrlCrawl mutator.
type UrlCrawlFunc func(context.Context, *entschema.UrlCrawlMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f UrlCrawlFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.UrlCrawlMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.UrlCrawlMutation", m)
	}
	return f(ctx, mv)
}

// The WebLinkFunc type is an adapter to allow the use of ordinary
// function as WebLink mutator.
type WebLinkFunc func(context.Context, *entschema.WebLinkMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f WebLinkFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.WebLinkMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.WebLinkMutation", m)
	}
	return f(ctx, mv)
}

// The WorkspaceFunc type is an adapter to allow the use of ordinary
// function as Workspace mutator.
type WorkspaceFunc func(context.Context, *entschema.WorkspaceMutation) (entschema.Value, error)

// Mutate calls f(ctx, m).
func (f WorkspaceFunc) Mutate(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
	mv, ok := m.(*entschema.WorkspaceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entschema.WorkspaceMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, entschema.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m entschema.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m entschema.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m entschema.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op entschema.Op) Condition {
	return func(_ context.Context, m entschema.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m entschema.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m entschema.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m entschema.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk entschema.Hook, cond Condition) entschema.Hook {
	return func(next entschema.Mutator) entschema.Mutator {
		return entschema.MutateFunc(func(ctx context.Context, m entschema.Mutation) (entschema.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, entschema.Delete|entschema.Create)
//
func On(hk entschema.Hook, op entschema.Op) entschema.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, entschema.Update|entschema.UpdateOne)
//
func Unless(hk entschema.Hook, op entschema.Op) entschema.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) entschema.Hook {
	return func(entschema.Mutator) entschema.Mutator {
		return entschema.MutateFunc(func(context.Context, entschema.Mutation) (entschema.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []entschema.Hook {
//		return []entschema.Hook{
//			Reject(entschema.Delete|entschema.Update),
//		}
//	}
//
func Reject(op entschema.Op) entschema.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []entschema.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...entschema.Hook) Chain {
	return Chain{append([]entschema.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() entschema.Hook {
	return func(mutator entschema.Mutator) entschema.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...entschema.Hook) Chain {
	newHooks := make([]entschema.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
