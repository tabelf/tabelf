// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/predicate"
	"tabelf/backend/gen/entschema/weblink"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WebLinkUpdate is the builder for updating WebLink entities.
type WebLinkUpdate struct {
	config
	hooks    []Hook
	mutation *WebLinkMutation
}

// Where appends a list predicates to the WebLinkUpdate builder.
func (wlu *WebLinkUpdate) Where(ps ...predicate.WebLink) *WebLinkUpdate {
	wlu.mutation.Where(ps...)
	return wlu
}

// SetUpdatedAt sets the "updated_at" field.
func (wlu *WebLinkUpdate) SetUpdatedAt(t time.Time) *WebLinkUpdate {
	wlu.mutation.SetUpdatedAt(t)
	return wlu
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (wlu *WebLinkUpdate) SetDeactivatedAt(t time.Time) *WebLinkUpdate {
	wlu.mutation.SetDeactivatedAt(t)
	return wlu
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (wlu *WebLinkUpdate) SetNillableDeactivatedAt(t *time.Time) *WebLinkUpdate {
	if t != nil {
		wlu.SetDeactivatedAt(*t)
	}
	return wlu
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (wlu *WebLinkUpdate) ClearDeactivatedAt() *WebLinkUpdate {
	wlu.mutation.ClearDeactivatedAt()
	return wlu
}

// SetTitle sets the "title" field.
func (wlu *WebLinkUpdate) SetTitle(s string) *WebLinkUpdate {
	wlu.mutation.SetTitle(s)
	return wlu
}

// SetImage sets the "image" field.
func (wlu *WebLinkUpdate) SetImage(s string) *WebLinkUpdate {
	wlu.mutation.SetImage(s)
	return wlu
}

// SetLink sets the "link" field.
func (wlu *WebLinkUpdate) SetLink(s string) *WebLinkUpdate {
	wlu.mutation.SetLink(s)
	return wlu
}

// SetDescription sets the "description" field.
func (wlu *WebLinkUpdate) SetDescription(s string) *WebLinkUpdate {
	wlu.mutation.SetDescription(s)
	return wlu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wlu *WebLinkUpdate) SetNillableDescription(s *string) *WebLinkUpdate {
	if s != nil {
		wlu.SetDescription(*s)
	}
	return wlu
}

// SetFileType sets the "file_type" field.
func (wlu *WebLinkUpdate) SetFileType(s string) *WebLinkUpdate {
	wlu.mutation.SetFileType(s)
	return wlu
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (wlu *WebLinkUpdate) SetNillableFileType(s *string) *WebLinkUpdate {
	if s != nil {
		wlu.SetFileType(*s)
	}
	return wlu
}

// SetSequence sets the "sequence" field.
func (wlu *WebLinkUpdate) SetSequence(i int) *WebLinkUpdate {
	wlu.mutation.ResetSequence()
	wlu.mutation.SetSequence(i)
	return wlu
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (wlu *WebLinkUpdate) SetNillableSequence(i *int) *WebLinkUpdate {
	if i != nil {
		wlu.SetSequence(*i)
	}
	return wlu
}

// AddSequence adds i to the "sequence" field.
func (wlu *WebLinkUpdate) AddSequence(i int) *WebLinkUpdate {
	wlu.mutation.AddSequence(i)
	return wlu
}

// SetForeverDelete sets the "forever_delete" field.
func (wlu *WebLinkUpdate) SetForeverDelete(b bool) *WebLinkUpdate {
	wlu.mutation.SetForeverDelete(b)
	return wlu
}

// SetNillableForeverDelete sets the "forever_delete" field if the given value is not nil.
func (wlu *WebLinkUpdate) SetNillableForeverDelete(b *bool) *WebLinkUpdate {
	if b != nil {
		wlu.SetForeverDelete(*b)
	}
	return wlu
}

// SetUserUID sets the "user_uid" field.
func (wlu *WebLinkUpdate) SetUserUID(s string) *WebLinkUpdate {
	wlu.mutation.SetUserUID(s)
	return wlu
}

// SetWorkspaceUID sets the "workspace_uid" field.
func (wlu *WebLinkUpdate) SetWorkspaceUID(s string) *WebLinkUpdate {
	wlu.mutation.SetWorkspaceUID(s)
	return wlu
}

// SetFolderUID sets the "folder_uid" field.
func (wlu *WebLinkUpdate) SetFolderUID(s string) *WebLinkUpdate {
	wlu.mutation.SetFolderUID(s)
	return wlu
}

// Mutation returns the WebLinkMutation object of the builder.
func (wlu *WebLinkUpdate) Mutation() *WebLinkMutation {
	return wlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wlu *WebLinkUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	wlu.defaults()
	if len(wlu.hooks) == 0 {
		affected, err = wlu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WebLinkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wlu.mutation = mutation
			affected, err = wlu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wlu.hooks) - 1; i >= 0; i-- {
			if wlu.hooks[i] == nil {
				return 0, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = wlu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wlu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wlu *WebLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := wlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wlu *WebLinkUpdate) Exec(ctx context.Context) error {
	_, err := wlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wlu *WebLinkUpdate) ExecX(ctx context.Context) {
	if err := wlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wlu *WebLinkUpdate) defaults() {
	if _, ok := wlu.mutation.UpdatedAt(); !ok {
		v := weblink.UpdateDefaultUpdatedAt()
		wlu.mutation.SetUpdatedAt(v)
	}
}

func (wlu *WebLinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   weblink.Table,
			Columns: weblink.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: weblink.FieldID,
			},
		},
	}
	if ps := wlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wlu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: weblink.FieldUpdatedAt,
		})
	}
	if value, ok := wlu.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: weblink.FieldDeactivatedAt,
		})
	}
	if wlu.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: weblink.FieldDeactivatedAt,
		})
	}
	if value, ok := wlu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldTitle,
		})
	}
	if value, ok := wlu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldImage,
		})
	}
	if value, ok := wlu.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldLink,
		})
	}
	if value, ok := wlu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldDescription,
		})
	}
	if value, ok := wlu.mutation.FileType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldFileType,
		})
	}
	if value, ok := wlu.mutation.Sequence(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weblink.FieldSequence,
		})
	}
	if value, ok := wlu.mutation.AddedSequence(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weblink.FieldSequence,
		})
	}
	if value, ok := wlu.mutation.ForeverDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: weblink.FieldForeverDelete,
		})
	}
	if value, ok := wlu.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldUserUID,
		})
	}
	if value, ok := wlu.mutation.WorkspaceUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldWorkspaceUID,
		})
	}
	if value, ok := wlu.mutation.FolderUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldFolderUID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weblink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// WebLinkUpdateOne is the builder for updating a single WebLink entity.
type WebLinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WebLinkMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (wluo *WebLinkUpdateOne) SetUpdatedAt(t time.Time) *WebLinkUpdateOne {
	wluo.mutation.SetUpdatedAt(t)
	return wluo
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (wluo *WebLinkUpdateOne) SetDeactivatedAt(t time.Time) *WebLinkUpdateOne {
	wluo.mutation.SetDeactivatedAt(t)
	return wluo
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (wluo *WebLinkUpdateOne) SetNillableDeactivatedAt(t *time.Time) *WebLinkUpdateOne {
	if t != nil {
		wluo.SetDeactivatedAt(*t)
	}
	return wluo
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (wluo *WebLinkUpdateOne) ClearDeactivatedAt() *WebLinkUpdateOne {
	wluo.mutation.ClearDeactivatedAt()
	return wluo
}

// SetTitle sets the "title" field.
func (wluo *WebLinkUpdateOne) SetTitle(s string) *WebLinkUpdateOne {
	wluo.mutation.SetTitle(s)
	return wluo
}

// SetImage sets the "image" field.
func (wluo *WebLinkUpdateOne) SetImage(s string) *WebLinkUpdateOne {
	wluo.mutation.SetImage(s)
	return wluo
}

// SetLink sets the "link" field.
func (wluo *WebLinkUpdateOne) SetLink(s string) *WebLinkUpdateOne {
	wluo.mutation.SetLink(s)
	return wluo
}

// SetDescription sets the "description" field.
func (wluo *WebLinkUpdateOne) SetDescription(s string) *WebLinkUpdateOne {
	wluo.mutation.SetDescription(s)
	return wluo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wluo *WebLinkUpdateOne) SetNillableDescription(s *string) *WebLinkUpdateOne {
	if s != nil {
		wluo.SetDescription(*s)
	}
	return wluo
}

// SetFileType sets the "file_type" field.
func (wluo *WebLinkUpdateOne) SetFileType(s string) *WebLinkUpdateOne {
	wluo.mutation.SetFileType(s)
	return wluo
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (wluo *WebLinkUpdateOne) SetNillableFileType(s *string) *WebLinkUpdateOne {
	if s != nil {
		wluo.SetFileType(*s)
	}
	return wluo
}

// SetSequence sets the "sequence" field.
func (wluo *WebLinkUpdateOne) SetSequence(i int) *WebLinkUpdateOne {
	wluo.mutation.ResetSequence()
	wluo.mutation.SetSequence(i)
	return wluo
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (wluo *WebLinkUpdateOne) SetNillableSequence(i *int) *WebLinkUpdateOne {
	if i != nil {
		wluo.SetSequence(*i)
	}
	return wluo
}

// AddSequence adds i to the "sequence" field.
func (wluo *WebLinkUpdateOne) AddSequence(i int) *WebLinkUpdateOne {
	wluo.mutation.AddSequence(i)
	return wluo
}

// SetForeverDelete sets the "forever_delete" field.
func (wluo *WebLinkUpdateOne) SetForeverDelete(b bool) *WebLinkUpdateOne {
	wluo.mutation.SetForeverDelete(b)
	return wluo
}

// SetNillableForeverDelete sets the "forever_delete" field if the given value is not nil.
func (wluo *WebLinkUpdateOne) SetNillableForeverDelete(b *bool) *WebLinkUpdateOne {
	if b != nil {
		wluo.SetForeverDelete(*b)
	}
	return wluo
}

// SetUserUID sets the "user_uid" field.
func (wluo *WebLinkUpdateOne) SetUserUID(s string) *WebLinkUpdateOne {
	wluo.mutation.SetUserUID(s)
	return wluo
}

// SetWorkspaceUID sets the "workspace_uid" field.
func (wluo *WebLinkUpdateOne) SetWorkspaceUID(s string) *WebLinkUpdateOne {
	wluo.mutation.SetWorkspaceUID(s)
	return wluo
}

// SetFolderUID sets the "folder_uid" field.
func (wluo *WebLinkUpdateOne) SetFolderUID(s string) *WebLinkUpdateOne {
	wluo.mutation.SetFolderUID(s)
	return wluo
}

// Mutation returns the WebLinkMutation object of the builder.
func (wluo *WebLinkUpdateOne) Mutation() *WebLinkMutation {
	return wluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wluo *WebLinkUpdateOne) Select(field string, fields ...string) *WebLinkUpdateOne {
	wluo.fields = append([]string{field}, fields...)
	return wluo
}

// Save executes the query and returns the updated WebLink entity.
func (wluo *WebLinkUpdateOne) Save(ctx context.Context) (*WebLink, error) {
	var (
		err  error
		node *WebLink
	)
	wluo.defaults()
	if len(wluo.hooks) == 0 {
		node, err = wluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WebLinkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wluo.mutation = mutation
			node, err = wluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wluo.hooks) - 1; i >= 0; i-- {
			if wluo.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = wluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wluo *WebLinkUpdateOne) SaveX(ctx context.Context) *WebLink {
	node, err := wluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wluo *WebLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := wluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wluo *WebLinkUpdateOne) ExecX(ctx context.Context) {
	if err := wluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wluo *WebLinkUpdateOne) defaults() {
	if _, ok := wluo.mutation.UpdatedAt(); !ok {
		v := weblink.UpdateDefaultUpdatedAt()
		wluo.mutation.SetUpdatedAt(v)
	}
}

func (wluo *WebLinkUpdateOne) sqlSave(ctx context.Context) (_node *WebLink, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   weblink.Table,
			Columns: weblink.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: weblink.FieldID,
			},
		},
	}
	id, ok := wluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entschema: missing "WebLink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, weblink.FieldID)
		for _, f := range fields {
			if !weblink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entschema: invalid field %q for query", f)}
			}
			if f != weblink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: weblink.FieldUpdatedAt,
		})
	}
	if value, ok := wluo.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: weblink.FieldDeactivatedAt,
		})
	}
	if wluo.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: weblink.FieldDeactivatedAt,
		})
	}
	if value, ok := wluo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldTitle,
		})
	}
	if value, ok := wluo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldImage,
		})
	}
	if value, ok := wluo.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldLink,
		})
	}
	if value, ok := wluo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldDescription,
		})
	}
	if value, ok := wluo.mutation.FileType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldFileType,
		})
	}
	if value, ok := wluo.mutation.Sequence(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weblink.FieldSequence,
		})
	}
	if value, ok := wluo.mutation.AddedSequence(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weblink.FieldSequence,
		})
	}
	if value, ok := wluo.mutation.ForeverDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: weblink.FieldForeverDelete,
		})
	}
	if value, ok := wluo.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldUserUID,
		})
	}
	if value, ok := wluo.mutation.WorkspaceUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldWorkspaceUID,
		})
	}
	if value, ok := wluo.mutation.FolderUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldFolderUID,
		})
	}
	_node = &WebLink{config: wluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weblink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
