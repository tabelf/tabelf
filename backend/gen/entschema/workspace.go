// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"fmt"
	"strings"
	"tabelf/backend/gen/entschema/workspace"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Workspace is the model entity for the Workspace schema.
type Workspace struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeactivatedAt holds the value of the "deactivated_at" field.
	DeactivatedAt *time.Time `json:"deactivated_at,omitempty"`
	// Name holds the value of the "name" field.
	// 工作空间名称
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	// 类型: 0 为个人, 1 为团队
	Type int `json:"type,omitempty"`
	// UserUID holds the value of the "user_uid" field.
	// 用户uid
	UserUID string `json:"user_uid,omitempty"`
	// PersonalFolderUID holds the value of the "personal_folder_uid" field.
	// 个人文件uid
	PersonalFolderUID string `json:"personal_folder_uid,omitempty"`
	// TeamFolderUID holds the value of the "team_folder_uid" field.
	// 团队文件uid
	TeamFolderUID string `json:"team_folder_uid,omitempty"`
	// IsOpen holds the value of the "is_open" field.
	// 是否打开, 0 折叠, 1 打开
	IsOpen bool `json:"is_open,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Workspace) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case workspace.FieldIsOpen:
			values[i] = new(sql.NullBool)
		case workspace.FieldID, workspace.FieldType:
			values[i] = new(sql.NullInt64)
		case workspace.FieldUID, workspace.FieldName, workspace.FieldUserUID, workspace.FieldPersonalFolderUID, workspace.FieldTeamFolderUID:
			values[i] = new(sql.NullString)
		case workspace.FieldCreatedAt, workspace.FieldUpdatedAt, workspace.FieldDeactivatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Workspace", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Workspace fields.
func (w *Workspace) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workspace.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = uint64(value.Int64)
		case workspace.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				w.UID = value.String
			}
		case workspace.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case workspace.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				w.UpdatedAt = value.Time
			}
		case workspace.FieldDeactivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deactivated_at", values[i])
			} else if value.Valid {
				w.DeactivatedAt = new(time.Time)
				*w.DeactivatedAt = value.Time
			}
		case workspace.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				w.Name = value.String
			}
		case workspace.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				w.Type = int(value.Int64)
			}
		case workspace.FieldUserUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_uid", values[i])
			} else if value.Valid {
				w.UserUID = value.String
			}
		case workspace.FieldPersonalFolderUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field personal_folder_uid", values[i])
			} else if value.Valid {
				w.PersonalFolderUID = value.String
			}
		case workspace.FieldTeamFolderUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field team_folder_uid", values[i])
			} else if value.Valid {
				w.TeamFolderUID = value.String
			}
		case workspace.FieldIsOpen:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_open", values[i])
			} else if value.Valid {
				w.IsOpen = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Workspace.
// Note that you need to call Workspace.Unwrap() before calling this method if this Workspace
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Workspace) Update() *WorkspaceUpdateOne {
	return (&WorkspaceClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the Workspace entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Workspace) Unwrap() *Workspace {
	tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("entschema: Workspace is not a transactional entity")
	}
	w.config.driver = tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Workspace) String() string {
	var builder strings.Builder
	builder.WriteString("Workspace(")
	builder.WriteString(fmt.Sprintf("id=%v", w.ID))
	builder.WriteString(", uid=")
	builder.WriteString(w.UID)
	builder.WriteString(", created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(w.UpdatedAt.Format(time.ANSIC))
	if v := w.DeactivatedAt; v != nil {
		builder.WriteString(", deactivated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(w.Name)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", w.Type))
	builder.WriteString(", user_uid=")
	builder.WriteString(w.UserUID)
	builder.WriteString(", personal_folder_uid=")
	builder.WriteString(w.PersonalFolderUID)
	builder.WriteString(", team_folder_uid=")
	builder.WriteString(w.TeamFolderUID)
	builder.WriteString(", is_open=")
	builder.WriteString(fmt.Sprintf("%v", w.IsOpen))
	builder.WriteByte(')')
	return builder.String()
}

// Workspaces is a parsable slice of Workspace.
type Workspaces []*Workspace

func (w Workspaces) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
