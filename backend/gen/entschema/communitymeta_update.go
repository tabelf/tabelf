// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/communitymeta"
	"tabelf/backend/gen/entschema/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommunityMetaUpdate is the builder for updating CommunityMeta entities.
type CommunityMetaUpdate struct {
	config
	hooks    []Hook
	mutation *CommunityMetaMutation
}

// Where appends a list predicates to the CommunityMetaUpdate builder.
func (cmu *CommunityMetaUpdate) Where(ps ...predicate.CommunityMeta) *CommunityMetaUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetUpdatedAt sets the "updated_at" field.
func (cmu *CommunityMetaUpdate) SetUpdatedAt(t time.Time) *CommunityMetaUpdate {
	cmu.mutation.SetUpdatedAt(t)
	return cmu
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (cmu *CommunityMetaUpdate) SetDeactivatedAt(t time.Time) *CommunityMetaUpdate {
	cmu.mutation.SetDeactivatedAt(t)
	return cmu
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (cmu *CommunityMetaUpdate) SetNillableDeactivatedAt(t *time.Time) *CommunityMetaUpdate {
	if t != nil {
		cmu.SetDeactivatedAt(*t)
	}
	return cmu
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (cmu *CommunityMetaUpdate) ClearDeactivatedAt() *CommunityMetaUpdate {
	cmu.mutation.ClearDeactivatedAt()
	return cmu
}

// SetCommunityUID sets the "community_uid" field.
func (cmu *CommunityMetaUpdate) SetCommunityUID(s string) *CommunityMetaUpdate {
	cmu.mutation.SetCommunityUID(s)
	return cmu
}

// SetUserUID sets the "user_uid" field.
func (cmu *CommunityMetaUpdate) SetUserUID(s string) *CommunityMetaUpdate {
	cmu.mutation.SetUserUID(s)
	return cmu
}

// SetHasPraise sets the "has_praise" field.
func (cmu *CommunityMetaUpdate) SetHasPraise(b bool) *CommunityMetaUpdate {
	cmu.mutation.SetHasPraise(b)
	return cmu
}

// SetNillableHasPraise sets the "has_praise" field if the given value is not nil.
func (cmu *CommunityMetaUpdate) SetNillableHasPraise(b *bool) *CommunityMetaUpdate {
	if b != nil {
		cmu.SetHasPraise(*b)
	}
	return cmu
}

// SetHasStar sets the "has_star" field.
func (cmu *CommunityMetaUpdate) SetHasStar(b bool) *CommunityMetaUpdate {
	cmu.mutation.SetHasStar(b)
	return cmu
}

// SetNillableHasStar sets the "has_star" field if the given value is not nil.
func (cmu *CommunityMetaUpdate) SetNillableHasStar(b *bool) *CommunityMetaUpdate {
	if b != nil {
		cmu.SetHasStar(*b)
	}
	return cmu
}

// SetHasView sets the "has_view" field.
func (cmu *CommunityMetaUpdate) SetHasView(b bool) *CommunityMetaUpdate {
	cmu.mutation.SetHasView(b)
	return cmu
}

// SetNillableHasView sets the "has_view" field if the given value is not nil.
func (cmu *CommunityMetaUpdate) SetNillableHasView(b *bool) *CommunityMetaUpdate {
	if b != nil {
		cmu.SetHasView(*b)
	}
	return cmu
}

// SetHasUsed sets the "has_used" field.
func (cmu *CommunityMetaUpdate) SetHasUsed(b bool) *CommunityMetaUpdate {
	cmu.mutation.SetHasUsed(b)
	return cmu
}

// SetNillableHasUsed sets the "has_used" field if the given value is not nil.
func (cmu *CommunityMetaUpdate) SetNillableHasUsed(b *bool) *CommunityMetaUpdate {
	if b != nil {
		cmu.SetHasUsed(*b)
	}
	return cmu
}

// Mutation returns the CommunityMetaMutation object of the builder.
func (cmu *CommunityMetaUpdate) Mutation() *CommunityMetaMutation {
	return cmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *CommunityMetaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cmu.defaults()
	if len(cmu.hooks) == 0 {
		affected, err = cmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommunityMetaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cmu.mutation = mutation
			affected, err = cmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cmu.hooks) - 1; i >= 0; i-- {
			if cmu.hooks[i] == nil {
				return 0, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = cmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *CommunityMetaUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *CommunityMetaUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *CommunityMetaUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmu *CommunityMetaUpdate) defaults() {
	if _, ok := cmu.mutation.UpdatedAt(); !ok {
		v := communitymeta.UpdateDefaultUpdatedAt()
		cmu.mutation.SetUpdatedAt(v)
	}
}

func (cmu *CommunityMetaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   communitymeta.Table,
			Columns: communitymeta.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: communitymeta.FieldID,
			},
		},
	}
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: communitymeta.FieldUpdatedAt,
		})
	}
	if value, ok := cmu.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: communitymeta.FieldDeactivatedAt,
		})
	}
	if cmu.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: communitymeta.FieldDeactivatedAt,
		})
	}
	if value, ok := cmu.mutation.CommunityUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: communitymeta.FieldCommunityUID,
		})
	}
	if value, ok := cmu.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: communitymeta.FieldUserUID,
		})
	}
	if value, ok := cmu.mutation.HasPraise(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: communitymeta.FieldHasPraise,
		})
	}
	if value, ok := cmu.mutation.HasStar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: communitymeta.FieldHasStar,
		})
	}
	if value, ok := cmu.mutation.HasView(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: communitymeta.FieldHasView,
		})
	}
	if value, ok := cmu.mutation.HasUsed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: communitymeta.FieldHasUsed,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{communitymeta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CommunityMetaUpdateOne is the builder for updating a single CommunityMeta entity.
type CommunityMetaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommunityMetaMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cmuo *CommunityMetaUpdateOne) SetUpdatedAt(t time.Time) *CommunityMetaUpdateOne {
	cmuo.mutation.SetUpdatedAt(t)
	return cmuo
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (cmuo *CommunityMetaUpdateOne) SetDeactivatedAt(t time.Time) *CommunityMetaUpdateOne {
	cmuo.mutation.SetDeactivatedAt(t)
	return cmuo
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (cmuo *CommunityMetaUpdateOne) SetNillableDeactivatedAt(t *time.Time) *CommunityMetaUpdateOne {
	if t != nil {
		cmuo.SetDeactivatedAt(*t)
	}
	return cmuo
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (cmuo *CommunityMetaUpdateOne) ClearDeactivatedAt() *CommunityMetaUpdateOne {
	cmuo.mutation.ClearDeactivatedAt()
	return cmuo
}

// SetCommunityUID sets the "community_uid" field.
func (cmuo *CommunityMetaUpdateOne) SetCommunityUID(s string) *CommunityMetaUpdateOne {
	cmuo.mutation.SetCommunityUID(s)
	return cmuo
}

// SetUserUID sets the "user_uid" field.
func (cmuo *CommunityMetaUpdateOne) SetUserUID(s string) *CommunityMetaUpdateOne {
	cmuo.mutation.SetUserUID(s)
	return cmuo
}

// SetHasPraise sets the "has_praise" field.
func (cmuo *CommunityMetaUpdateOne) SetHasPraise(b bool) *CommunityMetaUpdateOne {
	cmuo.mutation.SetHasPraise(b)
	return cmuo
}

// SetNillableHasPraise sets the "has_praise" field if the given value is not nil.
func (cmuo *CommunityMetaUpdateOne) SetNillableHasPraise(b *bool) *CommunityMetaUpdateOne {
	if b != nil {
		cmuo.SetHasPraise(*b)
	}
	return cmuo
}

// SetHasStar sets the "has_star" field.
func (cmuo *CommunityMetaUpdateOne) SetHasStar(b bool) *CommunityMetaUpdateOne {
	cmuo.mutation.SetHasStar(b)
	return cmuo
}

// SetNillableHasStar sets the "has_star" field if the given value is not nil.
func (cmuo *CommunityMetaUpdateOne) SetNillableHasStar(b *bool) *CommunityMetaUpdateOne {
	if b != nil {
		cmuo.SetHasStar(*b)
	}
	return cmuo
}

// SetHasView sets the "has_view" field.
func (cmuo *CommunityMetaUpdateOne) SetHasView(b bool) *CommunityMetaUpdateOne {
	cmuo.mutation.SetHasView(b)
	return cmuo
}

// SetNillableHasView sets the "has_view" field if the given value is not nil.
func (cmuo *CommunityMetaUpdateOne) SetNillableHasView(b *bool) *CommunityMetaUpdateOne {
	if b != nil {
		cmuo.SetHasView(*b)
	}
	return cmuo
}

// SetHasUsed sets the "has_used" field.
func (cmuo *CommunityMetaUpdateOne) SetHasUsed(b bool) *CommunityMetaUpdateOne {
	cmuo.mutation.SetHasUsed(b)
	return cmuo
}

// SetNillableHasUsed sets the "has_used" field if the given value is not nil.
func (cmuo *CommunityMetaUpdateOne) SetNillableHasUsed(b *bool) *CommunityMetaUpdateOne {
	if b != nil {
		cmuo.SetHasUsed(*b)
	}
	return cmuo
}

// Mutation returns the CommunityMetaMutation object of the builder.
func (cmuo *CommunityMetaUpdateOne) Mutation() *CommunityMetaMutation {
	return cmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *CommunityMetaUpdateOne) Select(field string, fields ...string) *CommunityMetaUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated CommunityMeta entity.
func (cmuo *CommunityMetaUpdateOne) Save(ctx context.Context) (*CommunityMeta, error) {
	var (
		err  error
		node *CommunityMeta
	)
	cmuo.defaults()
	if len(cmuo.hooks) == 0 {
		node, err = cmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommunityMetaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cmuo.mutation = mutation
			node, err = cmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cmuo.hooks) - 1; i >= 0; i-- {
			if cmuo.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = cmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *CommunityMetaUpdateOne) SaveX(ctx context.Context) *CommunityMeta {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *CommunityMetaUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *CommunityMetaUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmuo *CommunityMetaUpdateOne) defaults() {
	if _, ok := cmuo.mutation.UpdatedAt(); !ok {
		v := communitymeta.UpdateDefaultUpdatedAt()
		cmuo.mutation.SetUpdatedAt(v)
	}
}

func (cmuo *CommunityMetaUpdateOne) sqlSave(ctx context.Context) (_node *CommunityMeta, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   communitymeta.Table,
			Columns: communitymeta.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: communitymeta.FieldID,
			},
		},
	}
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entschema: missing "CommunityMeta.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, communitymeta.FieldID)
		for _, f := range fields {
			if !communitymeta.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entschema: invalid field %q for query", f)}
			}
			if f != communitymeta.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: communitymeta.FieldUpdatedAt,
		})
	}
	if value, ok := cmuo.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: communitymeta.FieldDeactivatedAt,
		})
	}
	if cmuo.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: communitymeta.FieldDeactivatedAt,
		})
	}
	if value, ok := cmuo.mutation.CommunityUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: communitymeta.FieldCommunityUID,
		})
	}
	if value, ok := cmuo.mutation.UserUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: communitymeta.FieldUserUID,
		})
	}
	if value, ok := cmuo.mutation.HasPraise(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: communitymeta.FieldHasPraise,
		})
	}
	if value, ok := cmuo.mutation.HasStar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: communitymeta.FieldHasStar,
		})
	}
	if value, ok := cmuo.mutation.HasView(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: communitymeta.FieldHasView,
		})
	}
	if value, ok := cmuo.mutation.HasUsed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: communitymeta.FieldHasUsed,
		})
	}
	_node = &CommunityMeta{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{communitymeta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
