// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"encoding/json"
	"fmt"
	"strings"
	"tabelf/backend/gen/entschema/community"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Community is the model entity for the Community schema.
type Community struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeactivatedAt holds the value of the "deactivated_at" field.
	DeactivatedAt *time.Time `json:"deactivated_at,omitempty"`
	// Title holds the value of the "title" field.
	// 标题
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	// 描述
	Description string `json:"description,omitempty"`
	// Image holds the value of the "image" field.
	// 图片
	Image string `json:"image,omitempty"`
	// Tags holds the value of the "tags" field.
	// 标签列表
	Tags []string `json:"tags,omitempty"`
	// Praise holds the value of the "praise" field.
	// 点赞量
	Praise int `json:"praise,omitempty"`
	// Star holds the value of the "star" field.
	// 收藏量
	Star int `json:"star,omitempty"`
	// View holds the value of the "view" field.
	// 查看量
	View int `json:"view,omitempty"`
	// Used holds the value of the "used" field.
	// 使用量
	Used int `json:"used,omitempty"`
	// FolderUID holds the value of the "folder_uid" field.
	// 文件uid
	FolderUID string `json:"folder_uid,omitempty"`
	// UserUID holds the value of the "user_uid" field.
	// 用户uid
	UserUID string `json:"user_uid,omitempty"`
	// Status holds the value of the "status" field.
	// 状态, -1 审核失败, 0 待审核, 1 审核通过
	Status string `json:"status,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// CategoryUID holds the value of the "category_uid" field.
	// 分类uid
	CategoryUID string `json:"category_uid,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Community) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case community.FieldTags:
			values[i] = new([]byte)
		case community.FieldID, community.FieldPraise, community.FieldStar, community.FieldView, community.FieldUsed:
			values[i] = new(sql.NullInt64)
		case community.FieldUID, community.FieldTitle, community.FieldDescription, community.FieldImage, community.FieldFolderUID, community.FieldUserUID, community.FieldStatus, community.FieldRemark, community.FieldCategoryUID:
			values[i] = new(sql.NullString)
		case community.FieldCreatedAt, community.FieldUpdatedAt, community.FieldDeactivatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Community", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Community fields.
func (c *Community) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case community.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = uint64(value.Int64)
		case community.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				c.UID = value.String
			}
		case community.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case community.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case community.FieldDeactivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deactivated_at", values[i])
			} else if value.Valid {
				c.DeactivatedAt = new(time.Time)
				*c.DeactivatedAt = value.Time
			}
		case community.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				c.Title = value.String
			}
		case community.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case community.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				c.Image = value.String
			}
		case community.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case community.FieldPraise:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field praise", values[i])
			} else if value.Valid {
				c.Praise = int(value.Int64)
			}
		case community.FieldStar:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field star", values[i])
			} else if value.Valid {
				c.Star = int(value.Int64)
			}
		case community.FieldView:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field view", values[i])
			} else if value.Valid {
				c.View = int(value.Int64)
			}
		case community.FieldUsed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field used", values[i])
			} else if value.Valid {
				c.Used = int(value.Int64)
			}
		case community.FieldFolderUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field folder_uid", values[i])
			} else if value.Valid {
				c.FolderUID = value.String
			}
		case community.FieldUserUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_uid", values[i])
			} else if value.Valid {
				c.UserUID = value.String
			}
		case community.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = value.String
			}
		case community.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				c.Remark = value.String
			}
		case community.FieldCategoryUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category_uid", values[i])
			} else if value.Valid {
				c.CategoryUID = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Community.
// Note that you need to call Community.Unwrap() before calling this method if this Community
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Community) Update() *CommunityUpdateOne {
	return (&CommunityClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Community entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Community) Unwrap() *Community {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("entschema: Community is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Community) String() string {
	var builder strings.Builder
	builder.WriteString("Community(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", uid=")
	builder.WriteString(c.UID)
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	if v := c.DeactivatedAt; v != nil {
		builder.WriteString(", deactivated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", title=")
	builder.WriteString(c.Title)
	builder.WriteString(", description=")
	builder.WriteString(c.Description)
	builder.WriteString(", image=")
	builder.WriteString(c.Image)
	builder.WriteString(", tags=")
	builder.WriteString(fmt.Sprintf("%v", c.Tags))
	builder.WriteString(", praise=")
	builder.WriteString(fmt.Sprintf("%v", c.Praise))
	builder.WriteString(", star=")
	builder.WriteString(fmt.Sprintf("%v", c.Star))
	builder.WriteString(", view=")
	builder.WriteString(fmt.Sprintf("%v", c.View))
	builder.WriteString(", used=")
	builder.WriteString(fmt.Sprintf("%v", c.Used))
	builder.WriteString(", folder_uid=")
	builder.WriteString(c.FolderUID)
	builder.WriteString(", user_uid=")
	builder.WriteString(c.UserUID)
	builder.WriteString(", status=")
	builder.WriteString(c.Status)
	builder.WriteString(", remark=")
	builder.WriteString(c.Remark)
	builder.WriteString(", category_uid=")
	builder.WriteString(c.CategoryUID)
	builder.WriteByte(')')
	return builder.String()
}

// Communities is a parsable slice of Community.
type Communities []*Community

func (c Communities) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
