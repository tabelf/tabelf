// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/collaboration"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CollaborationCreate is the builder for creating a Collaboration entity.
type CollaborationCreate struct {
	config
	mutation *CollaborationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (cc *CollaborationCreate) SetUID(s string) *CollaborationCreate {
	cc.mutation.SetUID(s)
	return cc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (cc *CollaborationCreate) SetNillableUID(s *string) *CollaborationCreate {
	if s != nil {
		cc.SetUID(*s)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CollaborationCreate) SetCreatedAt(t time.Time) *CollaborationCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CollaborationCreate) SetNillableCreatedAt(t *time.Time) *CollaborationCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CollaborationCreate) SetUpdatedAt(t time.Time) *CollaborationCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CollaborationCreate) SetNillableUpdatedAt(t *time.Time) *CollaborationCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (cc *CollaborationCreate) SetDeactivatedAt(t time.Time) *CollaborationCreate {
	cc.mutation.SetDeactivatedAt(t)
	return cc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (cc *CollaborationCreate) SetNillableDeactivatedAt(t *time.Time) *CollaborationCreate {
	if t != nil {
		cc.SetDeactivatedAt(*t)
	}
	return cc
}

// SetShardUID sets the "shard_uid" field.
func (cc *CollaborationCreate) SetShardUID(s string) *CollaborationCreate {
	cc.mutation.SetShardUID(s)
	return cc
}

// SetFolderUID sets the "folder_uid" field.
func (cc *CollaborationCreate) SetFolderUID(s string) *CollaborationCreate {
	cc.mutation.SetFolderUID(s)
	return cc
}

// SetUserUID sets the "user_uid" field.
func (cc *CollaborationCreate) SetUserUID(s string) *CollaborationCreate {
	cc.mutation.SetUserUID(s)
	return cc
}

// SetAuthority sets the "authority" field.
func (cc *CollaborationCreate) SetAuthority(s string) *CollaborationCreate {
	cc.mutation.SetAuthority(s)
	return cc
}

// SetFolderNumber sets the "folder_number" field.
func (cc *CollaborationCreate) SetFolderNumber(s string) *CollaborationCreate {
	cc.mutation.SetFolderNumber(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CollaborationCreate) SetID(u uint64) *CollaborationCreate {
	cc.mutation.SetID(u)
	return cc
}

// Mutation returns the CollaborationMutation object of the builder.
func (cc *CollaborationCreate) Mutation() *CollaborationMutation {
	return cc.mutation
}

// Save creates the Collaboration in the database.
func (cc *CollaborationCreate) Save(ctx context.Context) (*Collaboration, error) {
	var (
		err  error
		node *Collaboration
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CollaborationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CollaborationCreate) SaveX(ctx context.Context) *Collaboration {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CollaborationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CollaborationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CollaborationCreate) defaults() {
	if _, ok := cc.mutation.UID(); !ok {
		v := collaboration.DefaultUID()
		cc.mutation.SetUID(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := collaboration.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := collaboration.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CollaborationCreate) check() error {
	if _, ok := cc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "Collaboration.uid"`)}
	}
	if v, ok := cc.mutation.UID(); ok {
		if err := collaboration.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "Collaboration.uid": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "Collaboration.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "Collaboration.updated_at"`)}
	}
	if _, ok := cc.mutation.ShardUID(); !ok {
		return &ValidationError{Name: "shard_uid", err: errors.New(`entschema: missing required field "Collaboration.shard_uid"`)}
	}
	if _, ok := cc.mutation.FolderUID(); !ok {
		return &ValidationError{Name: "folder_uid", err: errors.New(`entschema: missing required field "Collaboration.folder_uid"`)}
	}
	if _, ok := cc.mutation.UserUID(); !ok {
		return &ValidationError{Name: "user_uid", err: errors.New(`entschema: missing required field "Collaboration.user_uid"`)}
	}
	if _, ok := cc.mutation.Authority(); !ok {
		return &ValidationError{Name: "authority", err: errors.New(`entschema: missing required field "Collaboration.authority"`)}
	}
	if _, ok := cc.mutation.FolderNumber(); !ok {
		return &ValidationError{Name: "folder_number", err: errors.New(`entschema: missing required field "Collaboration.folder_number"`)}
	}
	if v, ok := cc.mutation.FolderNumber(); ok {
		if err := collaboration.FolderNumberValidator(v); err != nil {
			return &ValidationError{Name: "folder_number", err: fmt.Errorf(`entschema: validator failed for field "Collaboration.folder_number": %w`, err)}
		}
	}
	return nil
}

func (cc *CollaborationCreate) sqlSave(ctx context.Context) (*Collaboration, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (cc *CollaborationCreate) createSpec() (*Collaboration, *sqlgraph.CreateSpec) {
	var (
		_node = &Collaboration{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: collaboration.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: collaboration.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: collaboration.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: collaboration.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: collaboration.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: collaboration.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := cc.mutation.ShardUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: collaboration.FieldShardUID,
		})
		_node.ShardUID = value
	}
	if value, ok := cc.mutation.FolderUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: collaboration.FieldFolderUID,
		})
		_node.FolderUID = value
	}
	if value, ok := cc.mutation.UserUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: collaboration.FieldUserUID,
		})
		_node.UserUID = value
	}
	if value, ok := cc.mutation.Authority(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: collaboration.FieldAuthority,
		})
		_node.Authority = value
	}
	if value, ok := cc.mutation.FolderNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: collaboration.FieldFolderNumber,
		})
		_node.FolderNumber = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Collaboration.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CollaborationUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (cc *CollaborationCreate) OnConflict(opts ...sql.ConflictOption) *CollaborationUpsertOne {
	cc.conflict = opts
	return &CollaborationUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Collaboration.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cc *CollaborationCreate) OnConflictColumns(columns ...string) *CollaborationUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CollaborationUpsertOne{
		create: cc,
	}
}

type (
	// CollaborationUpsertOne is the builder for "upsert"-ing
	//  one Collaboration node.
	CollaborationUpsertOne struct {
		create *CollaborationCreate
	}

	// CollaborationUpsert is the "OnConflict" setter.
	CollaborationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *CollaborationUpsert) SetUID(v string) *CollaborationUpsert {
	u.Set(collaboration.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *CollaborationUpsert) UpdateUID() *CollaborationUpsert {
	u.SetExcluded(collaboration.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CollaborationUpsert) SetCreatedAt(v time.Time) *CollaborationUpsert {
	u.Set(collaboration.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CollaborationUpsert) UpdateCreatedAt() *CollaborationUpsert {
	u.SetExcluded(collaboration.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CollaborationUpsert) SetUpdatedAt(v time.Time) *CollaborationUpsert {
	u.Set(collaboration.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CollaborationUpsert) UpdateUpdatedAt() *CollaborationUpsert {
	u.SetExcluded(collaboration.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *CollaborationUpsert) SetDeactivatedAt(v time.Time) *CollaborationUpsert {
	u.Set(collaboration.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *CollaborationUpsert) UpdateDeactivatedAt() *CollaborationUpsert {
	u.SetExcluded(collaboration.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *CollaborationUpsert) ClearDeactivatedAt() *CollaborationUpsert {
	u.SetNull(collaboration.FieldDeactivatedAt)
	return u
}

// SetShardUID sets the "shard_uid" field.
func (u *CollaborationUpsert) SetShardUID(v string) *CollaborationUpsert {
	u.Set(collaboration.FieldShardUID, v)
	return u
}

// UpdateShardUID sets the "shard_uid" field to the value that was provided on create.
func (u *CollaborationUpsert) UpdateShardUID() *CollaborationUpsert {
	u.SetExcluded(collaboration.FieldShardUID)
	return u
}

// SetFolderUID sets the "folder_uid" field.
func (u *CollaborationUpsert) SetFolderUID(v string) *CollaborationUpsert {
	u.Set(collaboration.FieldFolderUID, v)
	return u
}

// UpdateFolderUID sets the "folder_uid" field to the value that was provided on create.
func (u *CollaborationUpsert) UpdateFolderUID() *CollaborationUpsert {
	u.SetExcluded(collaboration.FieldFolderUID)
	return u
}

// SetUserUID sets the "user_uid" field.
func (u *CollaborationUpsert) SetUserUID(v string) *CollaborationUpsert {
	u.Set(collaboration.FieldUserUID, v)
	return u
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *CollaborationUpsert) UpdateUserUID() *CollaborationUpsert {
	u.SetExcluded(collaboration.FieldUserUID)
	return u
}

// SetAuthority sets the "authority" field.
func (u *CollaborationUpsert) SetAuthority(v string) *CollaborationUpsert {
	u.Set(collaboration.FieldAuthority, v)
	return u
}

// UpdateAuthority sets the "authority" field to the value that was provided on create.
func (u *CollaborationUpsert) UpdateAuthority() *CollaborationUpsert {
	u.SetExcluded(collaboration.FieldAuthority)
	return u
}

// SetFolderNumber sets the "folder_number" field.
func (u *CollaborationUpsert) SetFolderNumber(v string) *CollaborationUpsert {
	u.Set(collaboration.FieldFolderNumber, v)
	return u
}

// UpdateFolderNumber sets the "folder_number" field to the value that was provided on create.
func (u *CollaborationUpsert) UpdateFolderNumber() *CollaborationUpsert {
	u.SetExcluded(collaboration.FieldFolderNumber)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Collaboration.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(collaboration.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CollaborationUpsertOne) UpdateNewValues() *CollaborationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(collaboration.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(collaboration.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(collaboration.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Collaboration.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CollaborationUpsertOne) Ignore() *CollaborationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CollaborationUpsertOne) DoNothing() *CollaborationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CollaborationCreate.OnConflict
// documentation for more info.
func (u *CollaborationUpsertOne) Update(set func(*CollaborationUpsert)) *CollaborationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CollaborationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *CollaborationUpsertOne) SetUID(v string) *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *CollaborationUpsertOne) UpdateUID() *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *CollaborationUpsertOne) SetCreatedAt(v time.Time) *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CollaborationUpsertOne) UpdateCreatedAt() *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CollaborationUpsertOne) SetUpdatedAt(v time.Time) *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CollaborationUpsertOne) UpdateUpdatedAt() *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *CollaborationUpsertOne) SetDeactivatedAt(v time.Time) *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *CollaborationUpsertOne) UpdateDeactivatedAt() *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *CollaborationUpsertOne) ClearDeactivatedAt() *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetShardUID sets the "shard_uid" field.
func (u *CollaborationUpsertOne) SetShardUID(v string) *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetShardUID(v)
	})
}

// UpdateShardUID sets the "shard_uid" field to the value that was provided on create.
func (u *CollaborationUpsertOne) UpdateShardUID() *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateShardUID()
	})
}

// SetFolderUID sets the "folder_uid" field.
func (u *CollaborationUpsertOne) SetFolderUID(v string) *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetFolderUID(v)
	})
}

// UpdateFolderUID sets the "folder_uid" field to the value that was provided on create.
func (u *CollaborationUpsertOne) UpdateFolderUID() *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateFolderUID()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *CollaborationUpsertOne) SetUserUID(v string) *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *CollaborationUpsertOne) UpdateUserUID() *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateUserUID()
	})
}

// SetAuthority sets the "authority" field.
func (u *CollaborationUpsertOne) SetAuthority(v string) *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetAuthority(v)
	})
}

// UpdateAuthority sets the "authority" field to the value that was provided on create.
func (u *CollaborationUpsertOne) UpdateAuthority() *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateAuthority()
	})
}

// SetFolderNumber sets the "folder_number" field.
func (u *CollaborationUpsertOne) SetFolderNumber(v string) *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetFolderNumber(v)
	})
}

// UpdateFolderNumber sets the "folder_number" field to the value that was provided on create.
func (u *CollaborationUpsertOne) UpdateFolderNumber() *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateFolderNumber()
	})
}

// Exec executes the query.
func (u *CollaborationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for CollaborationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CollaborationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CollaborationUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CollaborationUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CollaborationCreateBulk is the builder for creating many Collaboration entities in bulk.
type CollaborationCreateBulk struct {
	config
	builders []*CollaborationCreate
	conflict []sql.ConflictOption
}

// Save creates the Collaboration entities in the database.
func (ccb *CollaborationCreateBulk) Save(ctx context.Context) ([]*Collaboration, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Collaboration, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CollaborationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CollaborationCreateBulk) SaveX(ctx context.Context) []*Collaboration {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CollaborationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CollaborationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Collaboration.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CollaborationUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (ccb *CollaborationCreateBulk) OnConflict(opts ...sql.ConflictOption) *CollaborationUpsertBulk {
	ccb.conflict = opts
	return &CollaborationUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Collaboration.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ccb *CollaborationCreateBulk) OnConflictColumns(columns ...string) *CollaborationUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CollaborationUpsertBulk{
		create: ccb,
	}
}

// CollaborationUpsertBulk is the builder for "upsert"-ing
// a bulk of Collaboration nodes.
type CollaborationUpsertBulk struct {
	create *CollaborationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Collaboration.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(collaboration.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CollaborationUpsertBulk) UpdateNewValues() *CollaborationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(collaboration.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(collaboration.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(collaboration.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Collaboration.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CollaborationUpsertBulk) Ignore() *CollaborationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CollaborationUpsertBulk) DoNothing() *CollaborationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CollaborationCreateBulk.OnConflict
// documentation for more info.
func (u *CollaborationUpsertBulk) Update(set func(*CollaborationUpsert)) *CollaborationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CollaborationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *CollaborationUpsertBulk) SetUID(v string) *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *CollaborationUpsertBulk) UpdateUID() *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *CollaborationUpsertBulk) SetCreatedAt(v time.Time) *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CollaborationUpsertBulk) UpdateCreatedAt() *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CollaborationUpsertBulk) SetUpdatedAt(v time.Time) *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CollaborationUpsertBulk) UpdateUpdatedAt() *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *CollaborationUpsertBulk) SetDeactivatedAt(v time.Time) *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *CollaborationUpsertBulk) UpdateDeactivatedAt() *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *CollaborationUpsertBulk) ClearDeactivatedAt() *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetShardUID sets the "shard_uid" field.
func (u *CollaborationUpsertBulk) SetShardUID(v string) *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetShardUID(v)
	})
}

// UpdateShardUID sets the "shard_uid" field to the value that was provided on create.
func (u *CollaborationUpsertBulk) UpdateShardUID() *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateShardUID()
	})
}

// SetFolderUID sets the "folder_uid" field.
func (u *CollaborationUpsertBulk) SetFolderUID(v string) *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetFolderUID(v)
	})
}

// UpdateFolderUID sets the "folder_uid" field to the value that was provided on create.
func (u *CollaborationUpsertBulk) UpdateFolderUID() *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateFolderUID()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *CollaborationUpsertBulk) SetUserUID(v string) *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *CollaborationUpsertBulk) UpdateUserUID() *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateUserUID()
	})
}

// SetAuthority sets the "authority" field.
func (u *CollaborationUpsertBulk) SetAuthority(v string) *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetAuthority(v)
	})
}

// UpdateAuthority sets the "authority" field to the value that was provided on create.
func (u *CollaborationUpsertBulk) UpdateAuthority() *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateAuthority()
	})
}

// SetFolderNumber sets the "folder_number" field.
func (u *CollaborationUpsertBulk) SetFolderNumber(v string) *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetFolderNumber(v)
	})
}

// UpdateFolderNumber sets the "folder_number" field to the value that was provided on create.
func (u *CollaborationUpsertBulk) UpdateFolderNumber() *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateFolderNumber()
	})
}

// Exec executes the query.
func (u *CollaborationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the CollaborationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for CollaborationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CollaborationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
