// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/payorder"
	"tabelf/backend/spec/schema"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PayOrderCreate is the builder for creating a PayOrder entity.
type PayOrderCreate struct {
	config
	mutation *PayOrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (poc *PayOrderCreate) SetUID(s string) *PayOrderCreate {
	poc.mutation.SetUID(s)
	return poc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableUID(s *string) *PayOrderCreate {
	if s != nil {
		poc.SetUID(*s)
	}
	return poc
}

// SetCreatedAt sets the "created_at" field.
func (poc *PayOrderCreate) SetCreatedAt(t time.Time) *PayOrderCreate {
	poc.mutation.SetCreatedAt(t)
	return poc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableCreatedAt(t *time.Time) *PayOrderCreate {
	if t != nil {
		poc.SetCreatedAt(*t)
	}
	return poc
}

// SetUpdatedAt sets the "updated_at" field.
func (poc *PayOrderCreate) SetUpdatedAt(t time.Time) *PayOrderCreate {
	poc.mutation.SetUpdatedAt(t)
	return poc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableUpdatedAt(t *time.Time) *PayOrderCreate {
	if t != nil {
		poc.SetUpdatedAt(*t)
	}
	return poc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (poc *PayOrderCreate) SetDeactivatedAt(t time.Time) *PayOrderCreate {
	poc.mutation.SetDeactivatedAt(t)
	return poc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableDeactivatedAt(t *time.Time) *PayOrderCreate {
	if t != nil {
		poc.SetDeactivatedAt(*t)
	}
	return poc
}

// SetOrderNumber sets the "order_number" field.
func (poc *PayOrderCreate) SetOrderNumber(s string) *PayOrderCreate {
	poc.mutation.SetOrderNumber(s)
	return poc
}

// SetOrderType sets the "order_type" field.
func (poc *PayOrderCreate) SetOrderType(s string) *PayOrderCreate {
	poc.mutation.SetOrderType(s)
	return poc
}

// SetUserUID sets the "user_uid" field.
func (poc *PayOrderCreate) SetUserUID(s string) *PayOrderCreate {
	poc.mutation.SetUserUID(s)
	return poc
}

// SetPayMethod sets the "pay_method" field.
func (poc *PayOrderCreate) SetPayMethod(s string) *PayOrderCreate {
	poc.mutation.SetPayMethod(s)
	return poc
}

// SetPaymentAmount sets the "payment_amount" field.
func (poc *PayOrderCreate) SetPaymentAmount(s string) *PayOrderCreate {
	poc.mutation.SetPaymentAmount(s)
	return poc
}

// SetTotalPrice sets the "total_price" field.
func (poc *PayOrderCreate) SetTotalPrice(s string) *PayOrderCreate {
	poc.mutation.SetTotalPrice(s)
	return poc
}

// SetRechargeRecord sets the "recharge_record" field.
func (poc *PayOrderCreate) SetRechargeRecord(sr schema.RechargeRecord) *PayOrderCreate {
	poc.mutation.SetRechargeRecord(sr)
	return poc
}

// SetStatus sets the "status" field.
func (poc *PayOrderCreate) SetStatus(s string) *PayOrderCreate {
	poc.mutation.SetStatus(s)
	return poc
}

// SetTransactionNumber sets the "transaction_number" field.
func (poc *PayOrderCreate) SetTransactionNumber(s string) *PayOrderCreate {
	poc.mutation.SetTransactionNumber(s)
	return poc
}

// SetNillableTransactionNumber sets the "transaction_number" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableTransactionNumber(s *string) *PayOrderCreate {
	if s != nil {
		poc.SetTransactionNumber(*s)
	}
	return poc
}

// SetThirdpartyNumber sets the "thirdparty_number" field.
func (poc *PayOrderCreate) SetThirdpartyNumber(s string) *PayOrderCreate {
	poc.mutation.SetThirdpartyNumber(s)
	return poc
}

// SetNillableThirdpartyNumber sets the "thirdparty_number" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableThirdpartyNumber(s *string) *PayOrderCreate {
	if s != nil {
		poc.SetThirdpartyNumber(*s)
	}
	return poc
}

// SetMchID sets the "mch_id" field.
func (poc *PayOrderCreate) SetMchID(s string) *PayOrderCreate {
	poc.mutation.SetMchID(s)
	return poc
}

// SetNillableMchID sets the "mch_id" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableMchID(s *string) *PayOrderCreate {
	if s != nil {
		poc.SetMchID(*s)
	}
	return poc
}

// SetOpenID sets the "open_id" field.
func (poc *PayOrderCreate) SetOpenID(s string) *PayOrderCreate {
	poc.mutation.SetOpenID(s)
	return poc
}

// SetNillableOpenID sets the "open_id" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableOpenID(s *string) *PayOrderCreate {
	if s != nil {
		poc.SetOpenID(*s)
	}
	return poc
}

// SetMemberExpired sets the "member_expired" field.
func (poc *PayOrderCreate) SetMemberExpired(t time.Time) *PayOrderCreate {
	poc.mutation.SetMemberExpired(t)
	return poc
}

// SetNillableMemberExpired sets the "member_expired" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableMemberExpired(t *time.Time) *PayOrderCreate {
	if t != nil {
		poc.SetMemberExpired(*t)
	}
	return poc
}

// SetCancelEvent sets the "cancel_event" field.
func (poc *PayOrderCreate) SetCancelEvent(s string) *PayOrderCreate {
	poc.mutation.SetCancelEvent(s)
	return poc
}

// SetNillableCancelEvent sets the "cancel_event" field if the given value is not nil.
func (poc *PayOrderCreate) SetNillableCancelEvent(s *string) *PayOrderCreate {
	if s != nil {
		poc.SetCancelEvent(*s)
	}
	return poc
}

// SetID sets the "id" field.
func (poc *PayOrderCreate) SetID(u uint64) *PayOrderCreate {
	poc.mutation.SetID(u)
	return poc
}

// Mutation returns the PayOrderMutation object of the builder.
func (poc *PayOrderCreate) Mutation() *PayOrderMutation {
	return poc.mutation
}

// Save creates the PayOrder in the database.
func (poc *PayOrderCreate) Save(ctx context.Context) (*PayOrder, error) {
	var (
		err  error
		node *PayOrder
	)
	poc.defaults()
	if len(poc.hooks) == 0 {
		if err = poc.check(); err != nil {
			return nil, err
		}
		node, err = poc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PayOrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = poc.check(); err != nil {
				return nil, err
			}
			poc.mutation = mutation
			if node, err = poc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(poc.hooks) - 1; i >= 0; i-- {
			if poc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = poc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, poc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (poc *PayOrderCreate) SaveX(ctx context.Context) *PayOrder {
	v, err := poc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (poc *PayOrderCreate) Exec(ctx context.Context) error {
	_, err := poc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poc *PayOrderCreate) ExecX(ctx context.Context) {
	if err := poc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (poc *PayOrderCreate) defaults() {
	if _, ok := poc.mutation.UID(); !ok {
		v := payorder.DefaultUID()
		poc.mutation.SetUID(v)
	}
	if _, ok := poc.mutation.CreatedAt(); !ok {
		v := payorder.DefaultCreatedAt()
		poc.mutation.SetCreatedAt(v)
	}
	if _, ok := poc.mutation.UpdatedAt(); !ok {
		v := payorder.DefaultUpdatedAt()
		poc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (poc *PayOrderCreate) check() error {
	if _, ok := poc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "PayOrder.uid"`)}
	}
	if v, ok := poc.mutation.UID(); ok {
		if err := payorder.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "PayOrder.uid": %w`, err)}
		}
	}
	if _, ok := poc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "PayOrder.created_at"`)}
	}
	if _, ok := poc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "PayOrder.updated_at"`)}
	}
	if _, ok := poc.mutation.OrderNumber(); !ok {
		return &ValidationError{Name: "order_number", err: errors.New(`entschema: missing required field "PayOrder.order_number"`)}
	}
	if _, ok := poc.mutation.OrderType(); !ok {
		return &ValidationError{Name: "order_type", err: errors.New(`entschema: missing required field "PayOrder.order_type"`)}
	}
	if _, ok := poc.mutation.UserUID(); !ok {
		return &ValidationError{Name: "user_uid", err: errors.New(`entschema: missing required field "PayOrder.user_uid"`)}
	}
	if _, ok := poc.mutation.PayMethod(); !ok {
		return &ValidationError{Name: "pay_method", err: errors.New(`entschema: missing required field "PayOrder.pay_method"`)}
	}
	if _, ok := poc.mutation.PaymentAmount(); !ok {
		return &ValidationError{Name: "payment_amount", err: errors.New(`entschema: missing required field "PayOrder.payment_amount"`)}
	}
	if _, ok := poc.mutation.TotalPrice(); !ok {
		return &ValidationError{Name: "total_price", err: errors.New(`entschema: missing required field "PayOrder.total_price"`)}
	}
	if _, ok := poc.mutation.RechargeRecord(); !ok {
		return &ValidationError{Name: "recharge_record", err: errors.New(`entschema: missing required field "PayOrder.recharge_record"`)}
	}
	if _, ok := poc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`entschema: missing required field "PayOrder.status"`)}
	}
	if v, ok := poc.mutation.Status(); ok {
		if err := payorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`entschema: validator failed for field "PayOrder.status": %w`, err)}
		}
	}
	if v, ok := poc.mutation.CancelEvent(); ok {
		if err := payorder.CancelEventValidator(v); err != nil {
			return &ValidationError{Name: "cancel_event", err: fmt.Errorf(`entschema: validator failed for field "PayOrder.cancel_event": %w`, err)}
		}
	}
	return nil
}

func (poc *PayOrderCreate) sqlSave(ctx context.Context) (*PayOrder, error) {
	_node, _spec := poc.createSpec()
	if err := sqlgraph.CreateNode(ctx, poc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (poc *PayOrderCreate) createSpec() (*PayOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &PayOrder{config: poc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: payorder.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: payorder.FieldID,
			},
		}
	)
	_spec.OnConflict = poc.conflict
	if id, ok := poc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := poc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := poc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorder.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := poc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorder.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := poc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorder.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := poc.mutation.OrderNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldOrderNumber,
		})
		_node.OrderNumber = value
	}
	if value, ok := poc.mutation.OrderType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldOrderType,
		})
		_node.OrderType = value
	}
	if value, ok := poc.mutation.UserUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldUserUID,
		})
		_node.UserUID = value
	}
	if value, ok := poc.mutation.PayMethod(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldPayMethod,
		})
		_node.PayMethod = value
	}
	if value, ok := poc.mutation.PaymentAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldPaymentAmount,
		})
		_node.PaymentAmount = value
	}
	if value, ok := poc.mutation.TotalPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldTotalPrice,
		})
		_node.TotalPrice = value
	}
	if value, ok := poc.mutation.RechargeRecord(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: payorder.FieldRechargeRecord,
		})
		_node.RechargeRecord = value
	}
	if value, ok := poc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := poc.mutation.TransactionNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldTransactionNumber,
		})
		_node.TransactionNumber = value
	}
	if value, ok := poc.mutation.ThirdpartyNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldThirdpartyNumber,
		})
		_node.ThirdpartyNumber = value
	}
	if value, ok := poc.mutation.MchID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldMchID,
		})
		_node.MchID = value
	}
	if value, ok := poc.mutation.OpenID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldOpenID,
		})
		_node.OpenID = value
	}
	if value, ok := poc.mutation.MemberExpired(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payorder.FieldMemberExpired,
		})
		_node.MemberExpired = value
	}
	if value, ok := poc.mutation.CancelEvent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payorder.FieldCancelEvent,
		})
		_node.CancelEvent = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PayOrder.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PayOrderUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (poc *PayOrderCreate) OnConflict(opts ...sql.ConflictOption) *PayOrderUpsertOne {
	poc.conflict = opts
	return &PayOrderUpsertOne{
		create: poc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PayOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (poc *PayOrderCreate) OnConflictColumns(columns ...string) *PayOrderUpsertOne {
	poc.conflict = append(poc.conflict, sql.ConflictColumns(columns...))
	return &PayOrderUpsertOne{
		create: poc,
	}
}

type (
	// PayOrderUpsertOne is the builder for "upsert"-ing
	//  one PayOrder node.
	PayOrderUpsertOne struct {
		create *PayOrderCreate
	}

	// PayOrderUpsert is the "OnConflict" setter.
	PayOrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *PayOrderUpsert) SetUID(v string) *PayOrderUpsert {
	u.Set(payorder.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdateUID() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PayOrderUpsert) SetCreatedAt(v time.Time) *PayOrderUpsert {
	u.Set(payorder.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdateCreatedAt() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PayOrderUpsert) SetUpdatedAt(v time.Time) *PayOrderUpsert {
	u.Set(payorder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdateUpdatedAt() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *PayOrderUpsert) SetDeactivatedAt(v time.Time) *PayOrderUpsert {
	u.Set(payorder.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdateDeactivatedAt() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *PayOrderUpsert) ClearDeactivatedAt() *PayOrderUpsert {
	u.SetNull(payorder.FieldDeactivatedAt)
	return u
}

// SetOrderNumber sets the "order_number" field.
func (u *PayOrderUpsert) SetOrderNumber(v string) *PayOrderUpsert {
	u.Set(payorder.FieldOrderNumber, v)
	return u
}

// UpdateOrderNumber sets the "order_number" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdateOrderNumber() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldOrderNumber)
	return u
}

// SetOrderType sets the "order_type" field.
func (u *PayOrderUpsert) SetOrderType(v string) *PayOrderUpsert {
	u.Set(payorder.FieldOrderType, v)
	return u
}

// UpdateOrderType sets the "order_type" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdateOrderType() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldOrderType)
	return u
}

// SetUserUID sets the "user_uid" field.
func (u *PayOrderUpsert) SetUserUID(v string) *PayOrderUpsert {
	u.Set(payorder.FieldUserUID, v)
	return u
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdateUserUID() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldUserUID)
	return u
}

// SetPayMethod sets the "pay_method" field.
func (u *PayOrderUpsert) SetPayMethod(v string) *PayOrderUpsert {
	u.Set(payorder.FieldPayMethod, v)
	return u
}

// UpdatePayMethod sets the "pay_method" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdatePayMethod() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldPayMethod)
	return u
}

// SetPaymentAmount sets the "payment_amount" field.
func (u *PayOrderUpsert) SetPaymentAmount(v string) *PayOrderUpsert {
	u.Set(payorder.FieldPaymentAmount, v)
	return u
}

// UpdatePaymentAmount sets the "payment_amount" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdatePaymentAmount() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldPaymentAmount)
	return u
}

// SetTotalPrice sets the "total_price" field.
func (u *PayOrderUpsert) SetTotalPrice(v string) *PayOrderUpsert {
	u.Set(payorder.FieldTotalPrice, v)
	return u
}

// UpdateTotalPrice sets the "total_price" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdateTotalPrice() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldTotalPrice)
	return u
}

// SetRechargeRecord sets the "recharge_record" field.
func (u *PayOrderUpsert) SetRechargeRecord(v schema.RechargeRecord) *PayOrderUpsert {
	u.Set(payorder.FieldRechargeRecord, v)
	return u
}

// UpdateRechargeRecord sets the "recharge_record" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdateRechargeRecord() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldRechargeRecord)
	return u
}

// SetStatus sets the "status" field.
func (u *PayOrderUpsert) SetStatus(v string) *PayOrderUpsert {
	u.Set(payorder.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdateStatus() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldStatus)
	return u
}

// SetTransactionNumber sets the "transaction_number" field.
func (u *PayOrderUpsert) SetTransactionNumber(v string) *PayOrderUpsert {
	u.Set(payorder.FieldTransactionNumber, v)
	return u
}

// UpdateTransactionNumber sets the "transaction_number" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdateTransactionNumber() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldTransactionNumber)
	return u
}

// ClearTransactionNumber clears the value of the "transaction_number" field.
func (u *PayOrderUpsert) ClearTransactionNumber() *PayOrderUpsert {
	u.SetNull(payorder.FieldTransactionNumber)
	return u
}

// SetThirdpartyNumber sets the "thirdparty_number" field.
func (u *PayOrderUpsert) SetThirdpartyNumber(v string) *PayOrderUpsert {
	u.Set(payorder.FieldThirdpartyNumber, v)
	return u
}

// UpdateThirdpartyNumber sets the "thirdparty_number" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdateThirdpartyNumber() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldThirdpartyNumber)
	return u
}

// ClearThirdpartyNumber clears the value of the "thirdparty_number" field.
func (u *PayOrderUpsert) ClearThirdpartyNumber() *PayOrderUpsert {
	u.SetNull(payorder.FieldThirdpartyNumber)
	return u
}

// SetMchID sets the "mch_id" field.
func (u *PayOrderUpsert) SetMchID(v string) *PayOrderUpsert {
	u.Set(payorder.FieldMchID, v)
	return u
}

// UpdateMchID sets the "mch_id" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdateMchID() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldMchID)
	return u
}

// ClearMchID clears the value of the "mch_id" field.
func (u *PayOrderUpsert) ClearMchID() *PayOrderUpsert {
	u.SetNull(payorder.FieldMchID)
	return u
}

// SetOpenID sets the "open_id" field.
func (u *PayOrderUpsert) SetOpenID(v string) *PayOrderUpsert {
	u.Set(payorder.FieldOpenID, v)
	return u
}

// UpdateOpenID sets the "open_id" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdateOpenID() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldOpenID)
	return u
}

// ClearOpenID clears the value of the "open_id" field.
func (u *PayOrderUpsert) ClearOpenID() *PayOrderUpsert {
	u.SetNull(payorder.FieldOpenID)
	return u
}

// SetMemberExpired sets the "member_expired" field.
func (u *PayOrderUpsert) SetMemberExpired(v time.Time) *PayOrderUpsert {
	u.Set(payorder.FieldMemberExpired, v)
	return u
}

// UpdateMemberExpired sets the "member_expired" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdateMemberExpired() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldMemberExpired)
	return u
}

// ClearMemberExpired clears the value of the "member_expired" field.
func (u *PayOrderUpsert) ClearMemberExpired() *PayOrderUpsert {
	u.SetNull(payorder.FieldMemberExpired)
	return u
}

// SetCancelEvent sets the "cancel_event" field.
func (u *PayOrderUpsert) SetCancelEvent(v string) *PayOrderUpsert {
	u.Set(payorder.FieldCancelEvent, v)
	return u
}

// UpdateCancelEvent sets the "cancel_event" field to the value that was provided on create.
func (u *PayOrderUpsert) UpdateCancelEvent() *PayOrderUpsert {
	u.SetExcluded(payorder.FieldCancelEvent)
	return u
}

// ClearCancelEvent clears the value of the "cancel_event" field.
func (u *PayOrderUpsert) ClearCancelEvent() *PayOrderUpsert {
	u.SetNull(payorder.FieldCancelEvent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PayOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(payorder.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PayOrderUpsertOne) UpdateNewValues() *PayOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(payorder.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(payorder.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(payorder.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.PayOrder.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PayOrderUpsertOne) Ignore() *PayOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PayOrderUpsertOne) DoNothing() *PayOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PayOrderCreate.OnConflict
// documentation for more info.
func (u *PayOrderUpsertOne) Update(set func(*PayOrderUpsert)) *PayOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PayOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *PayOrderUpsertOne) SetUID(v string) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdateUID() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PayOrderUpsertOne) SetCreatedAt(v time.Time) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdateCreatedAt() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PayOrderUpsertOne) SetUpdatedAt(v time.Time) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdateUpdatedAt() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *PayOrderUpsertOne) SetDeactivatedAt(v time.Time) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdateDeactivatedAt() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *PayOrderUpsertOne) ClearDeactivatedAt() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetOrderNumber sets the "order_number" field.
func (u *PayOrderUpsertOne) SetOrderNumber(v string) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetOrderNumber(v)
	})
}

// UpdateOrderNumber sets the "order_number" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdateOrderNumber() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateOrderNumber()
	})
}

// SetOrderType sets the "order_type" field.
func (u *PayOrderUpsertOne) SetOrderType(v string) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetOrderType(v)
	})
}

// UpdateOrderType sets the "order_type" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdateOrderType() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateOrderType()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *PayOrderUpsertOne) SetUserUID(v string) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdateUserUID() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateUserUID()
	})
}

// SetPayMethod sets the "pay_method" field.
func (u *PayOrderUpsertOne) SetPayMethod(v string) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetPayMethod(v)
	})
}

// UpdatePayMethod sets the "pay_method" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdatePayMethod() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdatePayMethod()
	})
}

// SetPaymentAmount sets the "payment_amount" field.
func (u *PayOrderUpsertOne) SetPaymentAmount(v string) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetPaymentAmount(v)
	})
}

// UpdatePaymentAmount sets the "payment_amount" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdatePaymentAmount() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdatePaymentAmount()
	})
}

// SetTotalPrice sets the "total_price" field.
func (u *PayOrderUpsertOne) SetTotalPrice(v string) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetTotalPrice(v)
	})
}

// UpdateTotalPrice sets the "total_price" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdateTotalPrice() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateTotalPrice()
	})
}

// SetRechargeRecord sets the "recharge_record" field.
func (u *PayOrderUpsertOne) SetRechargeRecord(v schema.RechargeRecord) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetRechargeRecord(v)
	})
}

// UpdateRechargeRecord sets the "recharge_record" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdateRechargeRecord() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateRechargeRecord()
	})
}

// SetStatus sets the "status" field.
func (u *PayOrderUpsertOne) SetStatus(v string) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdateStatus() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetTransactionNumber sets the "transaction_number" field.
func (u *PayOrderUpsertOne) SetTransactionNumber(v string) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetTransactionNumber(v)
	})
}

// UpdateTransactionNumber sets the "transaction_number" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdateTransactionNumber() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateTransactionNumber()
	})
}

// ClearTransactionNumber clears the value of the "transaction_number" field.
func (u *PayOrderUpsertOne) ClearTransactionNumber() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.ClearTransactionNumber()
	})
}

// SetThirdpartyNumber sets the "thirdparty_number" field.
func (u *PayOrderUpsertOne) SetThirdpartyNumber(v string) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetThirdpartyNumber(v)
	})
}

// UpdateThirdpartyNumber sets the "thirdparty_number" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdateThirdpartyNumber() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateThirdpartyNumber()
	})
}

// ClearThirdpartyNumber clears the value of the "thirdparty_number" field.
func (u *PayOrderUpsertOne) ClearThirdpartyNumber() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.ClearThirdpartyNumber()
	})
}

// SetMchID sets the "mch_id" field.
func (u *PayOrderUpsertOne) SetMchID(v string) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetMchID(v)
	})
}

// UpdateMchID sets the "mch_id" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdateMchID() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateMchID()
	})
}

// ClearMchID clears the value of the "mch_id" field.
func (u *PayOrderUpsertOne) ClearMchID() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.ClearMchID()
	})
}

// SetOpenID sets the "open_id" field.
func (u *PayOrderUpsertOne) SetOpenID(v string) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetOpenID(v)
	})
}

// UpdateOpenID sets the "open_id" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdateOpenID() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateOpenID()
	})
}

// ClearOpenID clears the value of the "open_id" field.
func (u *PayOrderUpsertOne) ClearOpenID() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.ClearOpenID()
	})
}

// SetMemberExpired sets the "member_expired" field.
func (u *PayOrderUpsertOne) SetMemberExpired(v time.Time) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetMemberExpired(v)
	})
}

// UpdateMemberExpired sets the "member_expired" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdateMemberExpired() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateMemberExpired()
	})
}

// ClearMemberExpired clears the value of the "member_expired" field.
func (u *PayOrderUpsertOne) ClearMemberExpired() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.ClearMemberExpired()
	})
}

// SetCancelEvent sets the "cancel_event" field.
func (u *PayOrderUpsertOne) SetCancelEvent(v string) *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetCancelEvent(v)
	})
}

// UpdateCancelEvent sets the "cancel_event" field to the value that was provided on create.
func (u *PayOrderUpsertOne) UpdateCancelEvent() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateCancelEvent()
	})
}

// ClearCancelEvent clears the value of the "cancel_event" field.
func (u *PayOrderUpsertOne) ClearCancelEvent() *PayOrderUpsertOne {
	return u.Update(func(s *PayOrderUpsert) {
		s.ClearCancelEvent()
	})
}

// Exec executes the query.
func (u *PayOrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for PayOrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PayOrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PayOrderUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PayOrderUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PayOrderCreateBulk is the builder for creating many PayOrder entities in bulk.
type PayOrderCreateBulk struct {
	config
	builders []*PayOrderCreate
	conflict []sql.ConflictOption
}

// Save creates the PayOrder entities in the database.
func (pocb *PayOrderCreateBulk) Save(ctx context.Context) ([]*PayOrder, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pocb.builders))
	nodes := make([]*PayOrder, len(pocb.builders))
	mutators := make([]Mutator, len(pocb.builders))
	for i := range pocb.builders {
		func(i int, root context.Context) {
			builder := pocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PayOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pocb *PayOrderCreateBulk) SaveX(ctx context.Context) []*PayOrder {
	v, err := pocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pocb *PayOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := pocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pocb *PayOrderCreateBulk) ExecX(ctx context.Context) {
	if err := pocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PayOrder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PayOrderUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (pocb *PayOrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *PayOrderUpsertBulk {
	pocb.conflict = opts
	return &PayOrderUpsertBulk{
		create: pocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PayOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pocb *PayOrderCreateBulk) OnConflictColumns(columns ...string) *PayOrderUpsertBulk {
	pocb.conflict = append(pocb.conflict, sql.ConflictColumns(columns...))
	return &PayOrderUpsertBulk{
		create: pocb,
	}
}

// PayOrderUpsertBulk is the builder for "upsert"-ing
// a bulk of PayOrder nodes.
type PayOrderUpsertBulk struct {
	create *PayOrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PayOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(payorder.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PayOrderUpsertBulk) UpdateNewValues() *PayOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(payorder.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(payorder.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(payorder.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PayOrder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PayOrderUpsertBulk) Ignore() *PayOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PayOrderUpsertBulk) DoNothing() *PayOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PayOrderCreateBulk.OnConflict
// documentation for more info.
func (u *PayOrderUpsertBulk) Update(set func(*PayOrderUpsert)) *PayOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PayOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *PayOrderUpsertBulk) SetUID(v string) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdateUID() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PayOrderUpsertBulk) SetCreatedAt(v time.Time) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdateCreatedAt() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PayOrderUpsertBulk) SetUpdatedAt(v time.Time) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdateUpdatedAt() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *PayOrderUpsertBulk) SetDeactivatedAt(v time.Time) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdateDeactivatedAt() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *PayOrderUpsertBulk) ClearDeactivatedAt() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetOrderNumber sets the "order_number" field.
func (u *PayOrderUpsertBulk) SetOrderNumber(v string) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetOrderNumber(v)
	})
}

// UpdateOrderNumber sets the "order_number" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdateOrderNumber() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateOrderNumber()
	})
}

// SetOrderType sets the "order_type" field.
func (u *PayOrderUpsertBulk) SetOrderType(v string) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetOrderType(v)
	})
}

// UpdateOrderType sets the "order_type" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdateOrderType() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateOrderType()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *PayOrderUpsertBulk) SetUserUID(v string) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdateUserUID() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateUserUID()
	})
}

// SetPayMethod sets the "pay_method" field.
func (u *PayOrderUpsertBulk) SetPayMethod(v string) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetPayMethod(v)
	})
}

// UpdatePayMethod sets the "pay_method" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdatePayMethod() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdatePayMethod()
	})
}

// SetPaymentAmount sets the "payment_amount" field.
func (u *PayOrderUpsertBulk) SetPaymentAmount(v string) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetPaymentAmount(v)
	})
}

// UpdatePaymentAmount sets the "payment_amount" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdatePaymentAmount() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdatePaymentAmount()
	})
}

// SetTotalPrice sets the "total_price" field.
func (u *PayOrderUpsertBulk) SetTotalPrice(v string) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetTotalPrice(v)
	})
}

// UpdateTotalPrice sets the "total_price" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdateTotalPrice() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateTotalPrice()
	})
}

// SetRechargeRecord sets the "recharge_record" field.
func (u *PayOrderUpsertBulk) SetRechargeRecord(v schema.RechargeRecord) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetRechargeRecord(v)
	})
}

// UpdateRechargeRecord sets the "recharge_record" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdateRechargeRecord() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateRechargeRecord()
	})
}

// SetStatus sets the "status" field.
func (u *PayOrderUpsertBulk) SetStatus(v string) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdateStatus() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetTransactionNumber sets the "transaction_number" field.
func (u *PayOrderUpsertBulk) SetTransactionNumber(v string) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetTransactionNumber(v)
	})
}

// UpdateTransactionNumber sets the "transaction_number" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdateTransactionNumber() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateTransactionNumber()
	})
}

// ClearTransactionNumber clears the value of the "transaction_number" field.
func (u *PayOrderUpsertBulk) ClearTransactionNumber() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.ClearTransactionNumber()
	})
}

// SetThirdpartyNumber sets the "thirdparty_number" field.
func (u *PayOrderUpsertBulk) SetThirdpartyNumber(v string) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetThirdpartyNumber(v)
	})
}

// UpdateThirdpartyNumber sets the "thirdparty_number" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdateThirdpartyNumber() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateThirdpartyNumber()
	})
}

// ClearThirdpartyNumber clears the value of the "thirdparty_number" field.
func (u *PayOrderUpsertBulk) ClearThirdpartyNumber() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.ClearThirdpartyNumber()
	})
}

// SetMchID sets the "mch_id" field.
func (u *PayOrderUpsertBulk) SetMchID(v string) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetMchID(v)
	})
}

// UpdateMchID sets the "mch_id" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdateMchID() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateMchID()
	})
}

// ClearMchID clears the value of the "mch_id" field.
func (u *PayOrderUpsertBulk) ClearMchID() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.ClearMchID()
	})
}

// SetOpenID sets the "open_id" field.
func (u *PayOrderUpsertBulk) SetOpenID(v string) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetOpenID(v)
	})
}

// UpdateOpenID sets the "open_id" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdateOpenID() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateOpenID()
	})
}

// ClearOpenID clears the value of the "open_id" field.
func (u *PayOrderUpsertBulk) ClearOpenID() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.ClearOpenID()
	})
}

// SetMemberExpired sets the "member_expired" field.
func (u *PayOrderUpsertBulk) SetMemberExpired(v time.Time) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetMemberExpired(v)
	})
}

// UpdateMemberExpired sets the "member_expired" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdateMemberExpired() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateMemberExpired()
	})
}

// ClearMemberExpired clears the value of the "member_expired" field.
func (u *PayOrderUpsertBulk) ClearMemberExpired() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.ClearMemberExpired()
	})
}

// SetCancelEvent sets the "cancel_event" field.
func (u *PayOrderUpsertBulk) SetCancelEvent(v string) *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.SetCancelEvent(v)
	})
}

// UpdateCancelEvent sets the "cancel_event" field to the value that was provided on create.
func (u *PayOrderUpsertBulk) UpdateCancelEvent() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.UpdateCancelEvent()
	})
}

// ClearCancelEvent clears the value of the "cancel_event" field.
func (u *PayOrderUpsertBulk) ClearCancelEvent() *PayOrderUpsertBulk {
	return u.Update(func(s *PayOrderUpsert) {
		s.ClearCancelEvent()
	})
}

// Exec executes the query.
func (u *PayOrderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the PayOrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for PayOrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PayOrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
