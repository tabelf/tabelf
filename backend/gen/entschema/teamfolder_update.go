// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/predicate"
	"tabelf/backend/gen/entschema/teamfolder"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamFolderUpdate is the builder for updating TeamFolder entities.
type TeamFolderUpdate struct {
	config
	hooks    []Hook
	mutation *TeamFolderMutation
}

// Where appends a list predicates to the TeamFolderUpdate builder.
func (tfu *TeamFolderUpdate) Where(ps ...predicate.TeamFolder) *TeamFolderUpdate {
	tfu.mutation.Where(ps...)
	return tfu
}

// SetUpdatedAt sets the "updated_at" field.
func (tfu *TeamFolderUpdate) SetUpdatedAt(t time.Time) *TeamFolderUpdate {
	tfu.mutation.SetUpdatedAt(t)
	return tfu
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (tfu *TeamFolderUpdate) SetDeactivatedAt(t time.Time) *TeamFolderUpdate {
	tfu.mutation.SetDeactivatedAt(t)
	return tfu
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (tfu *TeamFolderUpdate) SetNillableDeactivatedAt(t *time.Time) *TeamFolderUpdate {
	if t != nil {
		tfu.SetDeactivatedAt(*t)
	}
	return tfu
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (tfu *TeamFolderUpdate) ClearDeactivatedAt() *TeamFolderUpdate {
	tfu.mutation.ClearDeactivatedAt()
	return tfu
}

// SetTeamUID sets the "team_uid" field.
func (tfu *TeamFolderUpdate) SetTeamUID(s string) *TeamFolderUpdate {
	tfu.mutation.SetTeamUID(s)
	return tfu
}

// SetFileName sets the "file_name" field.
func (tfu *TeamFolderUpdate) SetFileName(s string) *TeamFolderUpdate {
	tfu.mutation.SetFileName(s)
	return tfu
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (tfu *TeamFolderUpdate) SetNillableFileName(s *string) *TeamFolderUpdate {
	if s != nil {
		tfu.SetFileName(*s)
	}
	return tfu
}

// ClearFileName clears the value of the "file_name" field.
func (tfu *TeamFolderUpdate) ClearFileName() *TeamFolderUpdate {
	tfu.mutation.ClearFileName()
	return tfu
}

// Mutation returns the TeamFolderMutation object of the builder.
func (tfu *TeamFolderUpdate) Mutation() *TeamFolderMutation {
	return tfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tfu *TeamFolderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tfu.defaults()
	if len(tfu.hooks) == 0 {
		affected, err = tfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeamFolderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tfu.mutation = mutation
			affected, err = tfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tfu.hooks) - 1; i >= 0; i-- {
			if tfu.hooks[i] == nil {
				return 0, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = tfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tfu *TeamFolderUpdate) SaveX(ctx context.Context) int {
	affected, err := tfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tfu *TeamFolderUpdate) Exec(ctx context.Context) error {
	_, err := tfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfu *TeamFolderUpdate) ExecX(ctx context.Context) {
	if err := tfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfu *TeamFolderUpdate) defaults() {
	if _, ok := tfu.mutation.UpdatedAt(); !ok {
		v := teamfolder.UpdateDefaultUpdatedAt()
		tfu.mutation.SetUpdatedAt(v)
	}
}

func (tfu *TeamFolderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teamfolder.Table,
			Columns: teamfolder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: teamfolder.FieldID,
			},
		},
	}
	if ps := tfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teamfolder.FieldUpdatedAt,
		})
	}
	if value, ok := tfu.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teamfolder.FieldDeactivatedAt,
		})
	}
	if tfu.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: teamfolder.FieldDeactivatedAt,
		})
	}
	if value, ok := tfu.mutation.TeamUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teamfolder.FieldTeamUID,
		})
	}
	if value, ok := tfu.mutation.FileName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teamfolder.FieldFileName,
		})
	}
	if tfu.mutation.FileNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: teamfolder.FieldFileName,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teamfolder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TeamFolderUpdateOne is the builder for updating a single TeamFolder entity.
type TeamFolderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamFolderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tfuo *TeamFolderUpdateOne) SetUpdatedAt(t time.Time) *TeamFolderUpdateOne {
	tfuo.mutation.SetUpdatedAt(t)
	return tfuo
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (tfuo *TeamFolderUpdateOne) SetDeactivatedAt(t time.Time) *TeamFolderUpdateOne {
	tfuo.mutation.SetDeactivatedAt(t)
	return tfuo
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (tfuo *TeamFolderUpdateOne) SetNillableDeactivatedAt(t *time.Time) *TeamFolderUpdateOne {
	if t != nil {
		tfuo.SetDeactivatedAt(*t)
	}
	return tfuo
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (tfuo *TeamFolderUpdateOne) ClearDeactivatedAt() *TeamFolderUpdateOne {
	tfuo.mutation.ClearDeactivatedAt()
	return tfuo
}

// SetTeamUID sets the "team_uid" field.
func (tfuo *TeamFolderUpdateOne) SetTeamUID(s string) *TeamFolderUpdateOne {
	tfuo.mutation.SetTeamUID(s)
	return tfuo
}

// SetFileName sets the "file_name" field.
func (tfuo *TeamFolderUpdateOne) SetFileName(s string) *TeamFolderUpdateOne {
	tfuo.mutation.SetFileName(s)
	return tfuo
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (tfuo *TeamFolderUpdateOne) SetNillableFileName(s *string) *TeamFolderUpdateOne {
	if s != nil {
		tfuo.SetFileName(*s)
	}
	return tfuo
}

// ClearFileName clears the value of the "file_name" field.
func (tfuo *TeamFolderUpdateOne) ClearFileName() *TeamFolderUpdateOne {
	tfuo.mutation.ClearFileName()
	return tfuo
}

// Mutation returns the TeamFolderMutation object of the builder.
func (tfuo *TeamFolderUpdateOne) Mutation() *TeamFolderMutation {
	return tfuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tfuo *TeamFolderUpdateOne) Select(field string, fields ...string) *TeamFolderUpdateOne {
	tfuo.fields = append([]string{field}, fields...)
	return tfuo
}

// Save executes the query and returns the updated TeamFolder entity.
func (tfuo *TeamFolderUpdateOne) Save(ctx context.Context) (*TeamFolder, error) {
	var (
		err  error
		node *TeamFolder
	)
	tfuo.defaults()
	if len(tfuo.hooks) == 0 {
		node, err = tfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeamFolderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tfuo.mutation = mutation
			node, err = tfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tfuo.hooks) - 1; i >= 0; i-- {
			if tfuo.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = tfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tfuo *TeamFolderUpdateOne) SaveX(ctx context.Context) *TeamFolder {
	node, err := tfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tfuo *TeamFolderUpdateOne) Exec(ctx context.Context) error {
	_, err := tfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfuo *TeamFolderUpdateOne) ExecX(ctx context.Context) {
	if err := tfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tfuo *TeamFolderUpdateOne) defaults() {
	if _, ok := tfuo.mutation.UpdatedAt(); !ok {
		v := teamfolder.UpdateDefaultUpdatedAt()
		tfuo.mutation.SetUpdatedAt(v)
	}
}

func (tfuo *TeamFolderUpdateOne) sqlSave(ctx context.Context) (_node *TeamFolder, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   teamfolder.Table,
			Columns: teamfolder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: teamfolder.FieldID,
			},
		},
	}
	id, ok := tfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entschema: missing "TeamFolder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teamfolder.FieldID)
		for _, f := range fields {
			if !teamfolder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entschema: invalid field %q for query", f)}
			}
			if f != teamfolder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teamfolder.FieldUpdatedAt,
		})
	}
	if value, ok := tfuo.mutation.DeactivatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teamfolder.FieldDeactivatedAt,
		})
	}
	if tfuo.mutation.DeactivatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: teamfolder.FieldDeactivatedAt,
		})
	}
	if value, ok := tfuo.mutation.TeamUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teamfolder.FieldTeamUID,
		})
	}
	if value, ok := tfuo.mutation.FileName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teamfolder.FieldFileName,
		})
	}
	if tfuo.mutation.FileNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: teamfolder.FieldFileName,
		})
	}
	_node = &TeamFolder{config: tfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teamfolder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
