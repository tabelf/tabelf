// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/communitymeta"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommunityMetaCreate is the builder for creating a CommunityMeta entity.
type CommunityMetaCreate struct {
	config
	mutation *CommunityMetaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (cmc *CommunityMetaCreate) SetUID(s string) *CommunityMetaCreate {
	cmc.mutation.SetUID(s)
	return cmc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (cmc *CommunityMetaCreate) SetNillableUID(s *string) *CommunityMetaCreate {
	if s != nil {
		cmc.SetUID(*s)
	}
	return cmc
}

// SetCreatedAt sets the "created_at" field.
func (cmc *CommunityMetaCreate) SetCreatedAt(t time.Time) *CommunityMetaCreate {
	cmc.mutation.SetCreatedAt(t)
	return cmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cmc *CommunityMetaCreate) SetNillableCreatedAt(t *time.Time) *CommunityMetaCreate {
	if t != nil {
		cmc.SetCreatedAt(*t)
	}
	return cmc
}

// SetUpdatedAt sets the "updated_at" field.
func (cmc *CommunityMetaCreate) SetUpdatedAt(t time.Time) *CommunityMetaCreate {
	cmc.mutation.SetUpdatedAt(t)
	return cmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cmc *CommunityMetaCreate) SetNillableUpdatedAt(t *time.Time) *CommunityMetaCreate {
	if t != nil {
		cmc.SetUpdatedAt(*t)
	}
	return cmc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (cmc *CommunityMetaCreate) SetDeactivatedAt(t time.Time) *CommunityMetaCreate {
	cmc.mutation.SetDeactivatedAt(t)
	return cmc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (cmc *CommunityMetaCreate) SetNillableDeactivatedAt(t *time.Time) *CommunityMetaCreate {
	if t != nil {
		cmc.SetDeactivatedAt(*t)
	}
	return cmc
}

// SetCommunityUID sets the "community_uid" field.
func (cmc *CommunityMetaCreate) SetCommunityUID(s string) *CommunityMetaCreate {
	cmc.mutation.SetCommunityUID(s)
	return cmc
}

// SetUserUID sets the "user_uid" field.
func (cmc *CommunityMetaCreate) SetUserUID(s string) *CommunityMetaCreate {
	cmc.mutation.SetUserUID(s)
	return cmc
}

// SetHasPraise sets the "has_praise" field.
func (cmc *CommunityMetaCreate) SetHasPraise(b bool) *CommunityMetaCreate {
	cmc.mutation.SetHasPraise(b)
	return cmc
}

// SetNillableHasPraise sets the "has_praise" field if the given value is not nil.
func (cmc *CommunityMetaCreate) SetNillableHasPraise(b *bool) *CommunityMetaCreate {
	if b != nil {
		cmc.SetHasPraise(*b)
	}
	return cmc
}

// SetHasStar sets the "has_star" field.
func (cmc *CommunityMetaCreate) SetHasStar(b bool) *CommunityMetaCreate {
	cmc.mutation.SetHasStar(b)
	return cmc
}

// SetNillableHasStar sets the "has_star" field if the given value is not nil.
func (cmc *CommunityMetaCreate) SetNillableHasStar(b *bool) *CommunityMetaCreate {
	if b != nil {
		cmc.SetHasStar(*b)
	}
	return cmc
}

// SetHasView sets the "has_view" field.
func (cmc *CommunityMetaCreate) SetHasView(b bool) *CommunityMetaCreate {
	cmc.mutation.SetHasView(b)
	return cmc
}

// SetNillableHasView sets the "has_view" field if the given value is not nil.
func (cmc *CommunityMetaCreate) SetNillableHasView(b *bool) *CommunityMetaCreate {
	if b != nil {
		cmc.SetHasView(*b)
	}
	return cmc
}

// SetHasUsed sets the "has_used" field.
func (cmc *CommunityMetaCreate) SetHasUsed(b bool) *CommunityMetaCreate {
	cmc.mutation.SetHasUsed(b)
	return cmc
}

// SetNillableHasUsed sets the "has_used" field if the given value is not nil.
func (cmc *CommunityMetaCreate) SetNillableHasUsed(b *bool) *CommunityMetaCreate {
	if b != nil {
		cmc.SetHasUsed(*b)
	}
	return cmc
}

// SetID sets the "id" field.
func (cmc *CommunityMetaCreate) SetID(u uint64) *CommunityMetaCreate {
	cmc.mutation.SetID(u)
	return cmc
}

// Mutation returns the CommunityMetaMutation object of the builder.
func (cmc *CommunityMetaCreate) Mutation() *CommunityMetaMutation {
	return cmc.mutation
}

// Save creates the CommunityMeta in the database.
func (cmc *CommunityMetaCreate) Save(ctx context.Context) (*CommunityMeta, error) {
	var (
		err  error
		node *CommunityMeta
	)
	cmc.defaults()
	if len(cmc.hooks) == 0 {
		if err = cmc.check(); err != nil {
			return nil, err
		}
		node, err = cmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommunityMetaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmc.check(); err != nil {
				return nil, err
			}
			cmc.mutation = mutation
			if node, err = cmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cmc.hooks) - 1; i >= 0; i-- {
			if cmc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = cmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *CommunityMetaCreate) SaveX(ctx context.Context) *CommunityMeta {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *CommunityMetaCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *CommunityMetaCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmc *CommunityMetaCreate) defaults() {
	if _, ok := cmc.mutation.UID(); !ok {
		v := communitymeta.DefaultUID()
		cmc.mutation.SetUID(v)
	}
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		v := communitymeta.DefaultCreatedAt()
		cmc.mutation.SetCreatedAt(v)
	}
	if _, ok := cmc.mutation.UpdatedAt(); !ok {
		v := communitymeta.DefaultUpdatedAt()
		cmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cmc.mutation.HasPraise(); !ok {
		v := communitymeta.DefaultHasPraise
		cmc.mutation.SetHasPraise(v)
	}
	if _, ok := cmc.mutation.HasStar(); !ok {
		v := communitymeta.DefaultHasStar
		cmc.mutation.SetHasStar(v)
	}
	if _, ok := cmc.mutation.HasView(); !ok {
		v := communitymeta.DefaultHasView
		cmc.mutation.SetHasView(v)
	}
	if _, ok := cmc.mutation.HasUsed(); !ok {
		v := communitymeta.DefaultHasUsed
		cmc.mutation.SetHasUsed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *CommunityMetaCreate) check() error {
	if _, ok := cmc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "CommunityMeta.uid"`)}
	}
	if v, ok := cmc.mutation.UID(); ok {
		if err := communitymeta.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "CommunityMeta.uid": %w`, err)}
		}
	}
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "CommunityMeta.created_at"`)}
	}
	if _, ok := cmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "CommunityMeta.updated_at"`)}
	}
	if _, ok := cmc.mutation.CommunityUID(); !ok {
		return &ValidationError{Name: "community_uid", err: errors.New(`entschema: missing required field "CommunityMeta.community_uid"`)}
	}
	if _, ok := cmc.mutation.UserUID(); !ok {
		return &ValidationError{Name: "user_uid", err: errors.New(`entschema: missing required field "CommunityMeta.user_uid"`)}
	}
	if _, ok := cmc.mutation.HasPraise(); !ok {
		return &ValidationError{Name: "has_praise", err: errors.New(`entschema: missing required field "CommunityMeta.has_praise"`)}
	}
	if _, ok := cmc.mutation.HasStar(); !ok {
		return &ValidationError{Name: "has_star", err: errors.New(`entschema: missing required field "CommunityMeta.has_star"`)}
	}
	if _, ok := cmc.mutation.HasView(); !ok {
		return &ValidationError{Name: "has_view", err: errors.New(`entschema: missing required field "CommunityMeta.has_view"`)}
	}
	if _, ok := cmc.mutation.HasUsed(); !ok {
		return &ValidationError{Name: "has_used", err: errors.New(`entschema: missing required field "CommunityMeta.has_used"`)}
	}
	return nil
}

func (cmc *CommunityMetaCreate) sqlSave(ctx context.Context) (*CommunityMeta, error) {
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (cmc *CommunityMetaCreate) createSpec() (*CommunityMeta, *sqlgraph.CreateSpec) {
	var (
		_node = &CommunityMeta{config: cmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: communitymeta.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: communitymeta.FieldID,
			},
		}
	)
	_spec.OnConflict = cmc.conflict
	if id, ok := cmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cmc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: communitymeta.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := cmc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: communitymeta.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cmc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: communitymeta.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cmc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: communitymeta.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := cmc.mutation.CommunityUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: communitymeta.FieldCommunityUID,
		})
		_node.CommunityUID = value
	}
	if value, ok := cmc.mutation.UserUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: communitymeta.FieldUserUID,
		})
		_node.UserUID = value
	}
	if value, ok := cmc.mutation.HasPraise(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: communitymeta.FieldHasPraise,
		})
		_node.HasPraise = value
	}
	if value, ok := cmc.mutation.HasStar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: communitymeta.FieldHasStar,
		})
		_node.HasStar = value
	}
	if value, ok := cmc.mutation.HasView(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: communitymeta.FieldHasView,
		})
		_node.HasView = value
	}
	if value, ok := cmc.mutation.HasUsed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: communitymeta.FieldHasUsed,
		})
		_node.HasUsed = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CommunityMeta.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommunityMetaUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (cmc *CommunityMetaCreate) OnConflict(opts ...sql.ConflictOption) *CommunityMetaUpsertOne {
	cmc.conflict = opts
	return &CommunityMetaUpsertOne{
		create: cmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CommunityMeta.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cmc *CommunityMetaCreate) OnConflictColumns(columns ...string) *CommunityMetaUpsertOne {
	cmc.conflict = append(cmc.conflict, sql.ConflictColumns(columns...))
	return &CommunityMetaUpsertOne{
		create: cmc,
	}
}

type (
	// CommunityMetaUpsertOne is the builder for "upsert"-ing
	//  one CommunityMeta node.
	CommunityMetaUpsertOne struct {
		create *CommunityMetaCreate
	}

	// CommunityMetaUpsert is the "OnConflict" setter.
	CommunityMetaUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *CommunityMetaUpsert) SetUID(v string) *CommunityMetaUpsert {
	u.Set(communitymeta.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *CommunityMetaUpsert) UpdateUID() *CommunityMetaUpsert {
	u.SetExcluded(communitymeta.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CommunityMetaUpsert) SetCreatedAt(v time.Time) *CommunityMetaUpsert {
	u.Set(communitymeta.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CommunityMetaUpsert) UpdateCreatedAt() *CommunityMetaUpsert {
	u.SetExcluded(communitymeta.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommunityMetaUpsert) SetUpdatedAt(v time.Time) *CommunityMetaUpsert {
	u.Set(communitymeta.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommunityMetaUpsert) UpdateUpdatedAt() *CommunityMetaUpsert {
	u.SetExcluded(communitymeta.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *CommunityMetaUpsert) SetDeactivatedAt(v time.Time) *CommunityMetaUpsert {
	u.Set(communitymeta.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *CommunityMetaUpsert) UpdateDeactivatedAt() *CommunityMetaUpsert {
	u.SetExcluded(communitymeta.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *CommunityMetaUpsert) ClearDeactivatedAt() *CommunityMetaUpsert {
	u.SetNull(communitymeta.FieldDeactivatedAt)
	return u
}

// SetCommunityUID sets the "community_uid" field.
func (u *CommunityMetaUpsert) SetCommunityUID(v string) *CommunityMetaUpsert {
	u.Set(communitymeta.FieldCommunityUID, v)
	return u
}

// UpdateCommunityUID sets the "community_uid" field to the value that was provided on create.
func (u *CommunityMetaUpsert) UpdateCommunityUID() *CommunityMetaUpsert {
	u.SetExcluded(communitymeta.FieldCommunityUID)
	return u
}

// SetUserUID sets the "user_uid" field.
func (u *CommunityMetaUpsert) SetUserUID(v string) *CommunityMetaUpsert {
	u.Set(communitymeta.FieldUserUID, v)
	return u
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *CommunityMetaUpsert) UpdateUserUID() *CommunityMetaUpsert {
	u.SetExcluded(communitymeta.FieldUserUID)
	return u
}

// SetHasPraise sets the "has_praise" field.
func (u *CommunityMetaUpsert) SetHasPraise(v bool) *CommunityMetaUpsert {
	u.Set(communitymeta.FieldHasPraise, v)
	return u
}

// UpdateHasPraise sets the "has_praise" field to the value that was provided on create.
func (u *CommunityMetaUpsert) UpdateHasPraise() *CommunityMetaUpsert {
	u.SetExcluded(communitymeta.FieldHasPraise)
	return u
}

// SetHasStar sets the "has_star" field.
func (u *CommunityMetaUpsert) SetHasStar(v bool) *CommunityMetaUpsert {
	u.Set(communitymeta.FieldHasStar, v)
	return u
}

// UpdateHasStar sets the "has_star" field to the value that was provided on create.
func (u *CommunityMetaUpsert) UpdateHasStar() *CommunityMetaUpsert {
	u.SetExcluded(communitymeta.FieldHasStar)
	return u
}

// SetHasView sets the "has_view" field.
func (u *CommunityMetaUpsert) SetHasView(v bool) *CommunityMetaUpsert {
	u.Set(communitymeta.FieldHasView, v)
	return u
}

// UpdateHasView sets the "has_view" field to the value that was provided on create.
func (u *CommunityMetaUpsert) UpdateHasView() *CommunityMetaUpsert {
	u.SetExcluded(communitymeta.FieldHasView)
	return u
}

// SetHasUsed sets the "has_used" field.
func (u *CommunityMetaUpsert) SetHasUsed(v bool) *CommunityMetaUpsert {
	u.Set(communitymeta.FieldHasUsed, v)
	return u
}

// UpdateHasUsed sets the "has_used" field to the value that was provided on create.
func (u *CommunityMetaUpsert) UpdateHasUsed() *CommunityMetaUpsert {
	u.SetExcluded(communitymeta.FieldHasUsed)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CommunityMeta.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(communitymeta.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CommunityMetaUpsertOne) UpdateNewValues() *CommunityMetaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(communitymeta.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(communitymeta.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(communitymeta.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CommunityMeta.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CommunityMetaUpsertOne) Ignore() *CommunityMetaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommunityMetaUpsertOne) DoNothing() *CommunityMetaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommunityMetaCreate.OnConflict
// documentation for more info.
func (u *CommunityMetaUpsertOne) Update(set func(*CommunityMetaUpsert)) *CommunityMetaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommunityMetaUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *CommunityMetaUpsertOne) SetUID(v string) *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *CommunityMetaUpsertOne) UpdateUID() *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *CommunityMetaUpsertOne) SetCreatedAt(v time.Time) *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CommunityMetaUpsertOne) UpdateCreatedAt() *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommunityMetaUpsertOne) SetUpdatedAt(v time.Time) *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommunityMetaUpsertOne) UpdateUpdatedAt() *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *CommunityMetaUpsertOne) SetDeactivatedAt(v time.Time) *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *CommunityMetaUpsertOne) UpdateDeactivatedAt() *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *CommunityMetaUpsertOne) ClearDeactivatedAt() *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetCommunityUID sets the "community_uid" field.
func (u *CommunityMetaUpsertOne) SetCommunityUID(v string) *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetCommunityUID(v)
	})
}

// UpdateCommunityUID sets the "community_uid" field to the value that was provided on create.
func (u *CommunityMetaUpsertOne) UpdateCommunityUID() *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateCommunityUID()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *CommunityMetaUpsertOne) SetUserUID(v string) *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *CommunityMetaUpsertOne) UpdateUserUID() *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateUserUID()
	})
}

// SetHasPraise sets the "has_praise" field.
func (u *CommunityMetaUpsertOne) SetHasPraise(v bool) *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetHasPraise(v)
	})
}

// UpdateHasPraise sets the "has_praise" field to the value that was provided on create.
func (u *CommunityMetaUpsertOne) UpdateHasPraise() *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateHasPraise()
	})
}

// SetHasStar sets the "has_star" field.
func (u *CommunityMetaUpsertOne) SetHasStar(v bool) *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetHasStar(v)
	})
}

// UpdateHasStar sets the "has_star" field to the value that was provided on create.
func (u *CommunityMetaUpsertOne) UpdateHasStar() *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateHasStar()
	})
}

// SetHasView sets the "has_view" field.
func (u *CommunityMetaUpsertOne) SetHasView(v bool) *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetHasView(v)
	})
}

// UpdateHasView sets the "has_view" field to the value that was provided on create.
func (u *CommunityMetaUpsertOne) UpdateHasView() *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateHasView()
	})
}

// SetHasUsed sets the "has_used" field.
func (u *CommunityMetaUpsertOne) SetHasUsed(v bool) *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetHasUsed(v)
	})
}

// UpdateHasUsed sets the "has_used" field to the value that was provided on create.
func (u *CommunityMetaUpsertOne) UpdateHasUsed() *CommunityMetaUpsertOne {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateHasUsed()
	})
}

// Exec executes the query.
func (u *CommunityMetaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for CommunityMetaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommunityMetaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CommunityMetaUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CommunityMetaUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CommunityMetaCreateBulk is the builder for creating many CommunityMeta entities in bulk.
type CommunityMetaCreateBulk struct {
	config
	builders []*CommunityMetaCreate
	conflict []sql.ConflictOption
}

// Save creates the CommunityMeta entities in the database.
func (cmcb *CommunityMetaCreateBulk) Save(ctx context.Context) ([]*CommunityMeta, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*CommunityMeta, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommunityMetaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *CommunityMetaCreateBulk) SaveX(ctx context.Context) []*CommunityMeta {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *CommunityMetaCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *CommunityMetaCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CommunityMeta.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommunityMetaUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (cmcb *CommunityMetaCreateBulk) OnConflict(opts ...sql.ConflictOption) *CommunityMetaUpsertBulk {
	cmcb.conflict = opts
	return &CommunityMetaUpsertBulk{
		create: cmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CommunityMeta.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cmcb *CommunityMetaCreateBulk) OnConflictColumns(columns ...string) *CommunityMetaUpsertBulk {
	cmcb.conflict = append(cmcb.conflict, sql.ConflictColumns(columns...))
	return &CommunityMetaUpsertBulk{
		create: cmcb,
	}
}

// CommunityMetaUpsertBulk is the builder for "upsert"-ing
// a bulk of CommunityMeta nodes.
type CommunityMetaUpsertBulk struct {
	create *CommunityMetaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CommunityMeta.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(communitymeta.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CommunityMetaUpsertBulk) UpdateNewValues() *CommunityMetaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(communitymeta.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(communitymeta.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(communitymeta.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CommunityMeta.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CommunityMetaUpsertBulk) Ignore() *CommunityMetaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommunityMetaUpsertBulk) DoNothing() *CommunityMetaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommunityMetaCreateBulk.OnConflict
// documentation for more info.
func (u *CommunityMetaUpsertBulk) Update(set func(*CommunityMetaUpsert)) *CommunityMetaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommunityMetaUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *CommunityMetaUpsertBulk) SetUID(v string) *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *CommunityMetaUpsertBulk) UpdateUID() *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *CommunityMetaUpsertBulk) SetCreatedAt(v time.Time) *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CommunityMetaUpsertBulk) UpdateCreatedAt() *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommunityMetaUpsertBulk) SetUpdatedAt(v time.Time) *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommunityMetaUpsertBulk) UpdateUpdatedAt() *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *CommunityMetaUpsertBulk) SetDeactivatedAt(v time.Time) *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *CommunityMetaUpsertBulk) UpdateDeactivatedAt() *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *CommunityMetaUpsertBulk) ClearDeactivatedAt() *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetCommunityUID sets the "community_uid" field.
func (u *CommunityMetaUpsertBulk) SetCommunityUID(v string) *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetCommunityUID(v)
	})
}

// UpdateCommunityUID sets the "community_uid" field to the value that was provided on create.
func (u *CommunityMetaUpsertBulk) UpdateCommunityUID() *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateCommunityUID()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *CommunityMetaUpsertBulk) SetUserUID(v string) *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *CommunityMetaUpsertBulk) UpdateUserUID() *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateUserUID()
	})
}

// SetHasPraise sets the "has_praise" field.
func (u *CommunityMetaUpsertBulk) SetHasPraise(v bool) *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetHasPraise(v)
	})
}

// UpdateHasPraise sets the "has_praise" field to the value that was provided on create.
func (u *CommunityMetaUpsertBulk) UpdateHasPraise() *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateHasPraise()
	})
}

// SetHasStar sets the "has_star" field.
func (u *CommunityMetaUpsertBulk) SetHasStar(v bool) *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetHasStar(v)
	})
}

// UpdateHasStar sets the "has_star" field to the value that was provided on create.
func (u *CommunityMetaUpsertBulk) UpdateHasStar() *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateHasStar()
	})
}

// SetHasView sets the "has_view" field.
func (u *CommunityMetaUpsertBulk) SetHasView(v bool) *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetHasView(v)
	})
}

// UpdateHasView sets the "has_view" field to the value that was provided on create.
func (u *CommunityMetaUpsertBulk) UpdateHasView() *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateHasView()
	})
}

// SetHasUsed sets the "has_used" field.
func (u *CommunityMetaUpsertBulk) SetHasUsed(v bool) *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.SetHasUsed(v)
	})
}

// UpdateHasUsed sets the "has_used" field to the value that was provided on create.
func (u *CommunityMetaUpsertBulk) UpdateHasUsed() *CommunityMetaUpsertBulk {
	return u.Update(func(s *CommunityMetaUpsert) {
		s.UpdateHasUsed()
	})
}

// Exec executes the query.
func (u *CommunityMetaUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the CommunityMetaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for CommunityMetaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommunityMetaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
