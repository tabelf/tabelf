// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/teamgroup"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamGroupCreate is the builder for creating a TeamGroup entity.
type TeamGroupCreate struct {
	config
	mutation *TeamGroupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (tgc *TeamGroupCreate) SetUID(s string) *TeamGroupCreate {
	tgc.mutation.SetUID(s)
	return tgc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (tgc *TeamGroupCreate) SetNillableUID(s *string) *TeamGroupCreate {
	if s != nil {
		tgc.SetUID(*s)
	}
	return tgc
}

// SetCreatedAt sets the "created_at" field.
func (tgc *TeamGroupCreate) SetCreatedAt(t time.Time) *TeamGroupCreate {
	tgc.mutation.SetCreatedAt(t)
	return tgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tgc *TeamGroupCreate) SetNillableCreatedAt(t *time.Time) *TeamGroupCreate {
	if t != nil {
		tgc.SetCreatedAt(*t)
	}
	return tgc
}

// SetUpdatedAt sets the "updated_at" field.
func (tgc *TeamGroupCreate) SetUpdatedAt(t time.Time) *TeamGroupCreate {
	tgc.mutation.SetUpdatedAt(t)
	return tgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tgc *TeamGroupCreate) SetNillableUpdatedAt(t *time.Time) *TeamGroupCreate {
	if t != nil {
		tgc.SetUpdatedAt(*t)
	}
	return tgc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (tgc *TeamGroupCreate) SetDeactivatedAt(t time.Time) *TeamGroupCreate {
	tgc.mutation.SetDeactivatedAt(t)
	return tgc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (tgc *TeamGroupCreate) SetNillableDeactivatedAt(t *time.Time) *TeamGroupCreate {
	if t != nil {
		tgc.SetDeactivatedAt(*t)
	}
	return tgc
}

// SetUserUID sets the "user_uid" field.
func (tgc *TeamGroupCreate) SetUserUID(s string) *TeamGroupCreate {
	tgc.mutation.SetUserUID(s)
	return tgc
}

// SetTeamUID sets the "team_uid" field.
func (tgc *TeamGroupCreate) SetTeamUID(s string) *TeamGroupCreate {
	tgc.mutation.SetTeamUID(s)
	return tgc
}

// SetID sets the "id" field.
func (tgc *TeamGroupCreate) SetID(u uint64) *TeamGroupCreate {
	tgc.mutation.SetID(u)
	return tgc
}

// Mutation returns the TeamGroupMutation object of the builder.
func (tgc *TeamGroupCreate) Mutation() *TeamGroupMutation {
	return tgc.mutation
}

// Save creates the TeamGroup in the database.
func (tgc *TeamGroupCreate) Save(ctx context.Context) (*TeamGroup, error) {
	var (
		err  error
		node *TeamGroup
	)
	tgc.defaults()
	if len(tgc.hooks) == 0 {
		if err = tgc.check(); err != nil {
			return nil, err
		}
		node, err = tgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TeamGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tgc.check(); err != nil {
				return nil, err
			}
			tgc.mutation = mutation
			if node, err = tgc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tgc.hooks) - 1; i >= 0; i-- {
			if tgc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = tgc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tgc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tgc *TeamGroupCreate) SaveX(ctx context.Context) *TeamGroup {
	v, err := tgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tgc *TeamGroupCreate) Exec(ctx context.Context) error {
	_, err := tgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgc *TeamGroupCreate) ExecX(ctx context.Context) {
	if err := tgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tgc *TeamGroupCreate) defaults() {
	if _, ok := tgc.mutation.UID(); !ok {
		v := teamgroup.DefaultUID()
		tgc.mutation.SetUID(v)
	}
	if _, ok := tgc.mutation.CreatedAt(); !ok {
		v := teamgroup.DefaultCreatedAt()
		tgc.mutation.SetCreatedAt(v)
	}
	if _, ok := tgc.mutation.UpdatedAt(); !ok {
		v := teamgroup.DefaultUpdatedAt()
		tgc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tgc *TeamGroupCreate) check() error {
	if _, ok := tgc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "TeamGroup.uid"`)}
	}
	if v, ok := tgc.mutation.UID(); ok {
		if err := teamgroup.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "TeamGroup.uid": %w`, err)}
		}
	}
	if _, ok := tgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "TeamGroup.created_at"`)}
	}
	if _, ok := tgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "TeamGroup.updated_at"`)}
	}
	if _, ok := tgc.mutation.UserUID(); !ok {
		return &ValidationError{Name: "user_uid", err: errors.New(`entschema: missing required field "TeamGroup.user_uid"`)}
	}
	if _, ok := tgc.mutation.TeamUID(); !ok {
		return &ValidationError{Name: "team_uid", err: errors.New(`entschema: missing required field "TeamGroup.team_uid"`)}
	}
	return nil
}

func (tgc *TeamGroupCreate) sqlSave(ctx context.Context) (*TeamGroup, error) {
	_node, _spec := tgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (tgc *TeamGroupCreate) createSpec() (*TeamGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &TeamGroup{config: tgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: teamgroup.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: teamgroup.FieldID,
			},
		}
	)
	_spec.OnConflict = tgc.conflict
	if id, ok := tgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tgc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teamgroup.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := tgc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teamgroup.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tgc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teamgroup.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tgc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: teamgroup.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := tgc.mutation.UserUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teamgroup.FieldUserUID,
		})
		_node.UserUID = value
	}
	if value, ok := tgc.mutation.TeamUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: teamgroup.FieldTeamUID,
		})
		_node.TeamUID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TeamGroup.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeamGroupUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (tgc *TeamGroupCreate) OnConflict(opts ...sql.ConflictOption) *TeamGroupUpsertOne {
	tgc.conflict = opts
	return &TeamGroupUpsertOne{
		create: tgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TeamGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tgc *TeamGroupCreate) OnConflictColumns(columns ...string) *TeamGroupUpsertOne {
	tgc.conflict = append(tgc.conflict, sql.ConflictColumns(columns...))
	return &TeamGroupUpsertOne{
		create: tgc,
	}
}

type (
	// TeamGroupUpsertOne is the builder for "upsert"-ing
	//  one TeamGroup node.
	TeamGroupUpsertOne struct {
		create *TeamGroupCreate
	}

	// TeamGroupUpsert is the "OnConflict" setter.
	TeamGroupUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *TeamGroupUpsert) SetUID(v string) *TeamGroupUpsert {
	u.Set(teamgroup.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *TeamGroupUpsert) UpdateUID() *TeamGroupUpsert {
	u.SetExcluded(teamgroup.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TeamGroupUpsert) SetCreatedAt(v time.Time) *TeamGroupUpsert {
	u.Set(teamgroup.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TeamGroupUpsert) UpdateCreatedAt() *TeamGroupUpsert {
	u.SetExcluded(teamgroup.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeamGroupUpsert) SetUpdatedAt(v time.Time) *TeamGroupUpsert {
	u.Set(teamgroup.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeamGroupUpsert) UpdateUpdatedAt() *TeamGroupUpsert {
	u.SetExcluded(teamgroup.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *TeamGroupUpsert) SetDeactivatedAt(v time.Time) *TeamGroupUpsert {
	u.Set(teamgroup.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *TeamGroupUpsert) UpdateDeactivatedAt() *TeamGroupUpsert {
	u.SetExcluded(teamgroup.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *TeamGroupUpsert) ClearDeactivatedAt() *TeamGroupUpsert {
	u.SetNull(teamgroup.FieldDeactivatedAt)
	return u
}

// SetUserUID sets the "user_uid" field.
func (u *TeamGroupUpsert) SetUserUID(v string) *TeamGroupUpsert {
	u.Set(teamgroup.FieldUserUID, v)
	return u
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *TeamGroupUpsert) UpdateUserUID() *TeamGroupUpsert {
	u.SetExcluded(teamgroup.FieldUserUID)
	return u
}

// SetTeamUID sets the "team_uid" field.
func (u *TeamGroupUpsert) SetTeamUID(v string) *TeamGroupUpsert {
	u.Set(teamgroup.FieldTeamUID, v)
	return u
}

// UpdateTeamUID sets the "team_uid" field to the value that was provided on create.
func (u *TeamGroupUpsert) UpdateTeamUID() *TeamGroupUpsert {
	u.SetExcluded(teamgroup.FieldTeamUID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TeamGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(teamgroup.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TeamGroupUpsertOne) UpdateNewValues() *TeamGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(teamgroup.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(teamgroup.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(teamgroup.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TeamGroup.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TeamGroupUpsertOne) Ignore() *TeamGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeamGroupUpsertOne) DoNothing() *TeamGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeamGroupCreate.OnConflict
// documentation for more info.
func (u *TeamGroupUpsertOne) Update(set func(*TeamGroupUpsert)) *TeamGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeamGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *TeamGroupUpsertOne) SetUID(v string) *TeamGroupUpsertOne {
	return u.Update(func(s *TeamGroupUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *TeamGroupUpsertOne) UpdateUID() *TeamGroupUpsertOne {
	return u.Update(func(s *TeamGroupUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TeamGroupUpsertOne) SetCreatedAt(v time.Time) *TeamGroupUpsertOne {
	return u.Update(func(s *TeamGroupUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TeamGroupUpsertOne) UpdateCreatedAt() *TeamGroupUpsertOne {
	return u.Update(func(s *TeamGroupUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeamGroupUpsertOne) SetUpdatedAt(v time.Time) *TeamGroupUpsertOne {
	return u.Update(func(s *TeamGroupUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeamGroupUpsertOne) UpdateUpdatedAt() *TeamGroupUpsertOne {
	return u.Update(func(s *TeamGroupUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *TeamGroupUpsertOne) SetDeactivatedAt(v time.Time) *TeamGroupUpsertOne {
	return u.Update(func(s *TeamGroupUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *TeamGroupUpsertOne) UpdateDeactivatedAt() *TeamGroupUpsertOne {
	return u.Update(func(s *TeamGroupUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *TeamGroupUpsertOne) ClearDeactivatedAt() *TeamGroupUpsertOne {
	return u.Update(func(s *TeamGroupUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *TeamGroupUpsertOne) SetUserUID(v string) *TeamGroupUpsertOne {
	return u.Update(func(s *TeamGroupUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *TeamGroupUpsertOne) UpdateUserUID() *TeamGroupUpsertOne {
	return u.Update(func(s *TeamGroupUpsert) {
		s.UpdateUserUID()
	})
}

// SetTeamUID sets the "team_uid" field.
func (u *TeamGroupUpsertOne) SetTeamUID(v string) *TeamGroupUpsertOne {
	return u.Update(func(s *TeamGroupUpsert) {
		s.SetTeamUID(v)
	})
}

// UpdateTeamUID sets the "team_uid" field to the value that was provided on create.
func (u *TeamGroupUpsertOne) UpdateTeamUID() *TeamGroupUpsertOne {
	return u.Update(func(s *TeamGroupUpsert) {
		s.UpdateTeamUID()
	})
}

// Exec executes the query.
func (u *TeamGroupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for TeamGroupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeamGroupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TeamGroupUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TeamGroupUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TeamGroupCreateBulk is the builder for creating many TeamGroup entities in bulk.
type TeamGroupCreateBulk struct {
	config
	builders []*TeamGroupCreate
	conflict []sql.ConflictOption
}

// Save creates the TeamGroup entities in the database.
func (tgcb *TeamGroupCreateBulk) Save(ctx context.Context) ([]*TeamGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tgcb.builders))
	nodes := make([]*TeamGroup, len(tgcb.builders))
	mutators := make([]Mutator, len(tgcb.builders))
	for i := range tgcb.builders {
		func(i int, root context.Context) {
			builder := tgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeamGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tgcb *TeamGroupCreateBulk) SaveX(ctx context.Context) []*TeamGroup {
	v, err := tgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tgcb *TeamGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := tgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgcb *TeamGroupCreateBulk) ExecX(ctx context.Context) {
	if err := tgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TeamGroup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeamGroupUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (tgcb *TeamGroupCreateBulk) OnConflict(opts ...sql.ConflictOption) *TeamGroupUpsertBulk {
	tgcb.conflict = opts
	return &TeamGroupUpsertBulk{
		create: tgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TeamGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tgcb *TeamGroupCreateBulk) OnConflictColumns(columns ...string) *TeamGroupUpsertBulk {
	tgcb.conflict = append(tgcb.conflict, sql.ConflictColumns(columns...))
	return &TeamGroupUpsertBulk{
		create: tgcb,
	}
}

// TeamGroupUpsertBulk is the builder for "upsert"-ing
// a bulk of TeamGroup nodes.
type TeamGroupUpsertBulk struct {
	create *TeamGroupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TeamGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(teamgroup.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TeamGroupUpsertBulk) UpdateNewValues() *TeamGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(teamgroup.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(teamgroup.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(teamgroup.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TeamGroup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TeamGroupUpsertBulk) Ignore() *TeamGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeamGroupUpsertBulk) DoNothing() *TeamGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeamGroupCreateBulk.OnConflict
// documentation for more info.
func (u *TeamGroupUpsertBulk) Update(set func(*TeamGroupUpsert)) *TeamGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeamGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *TeamGroupUpsertBulk) SetUID(v string) *TeamGroupUpsertBulk {
	return u.Update(func(s *TeamGroupUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *TeamGroupUpsertBulk) UpdateUID() *TeamGroupUpsertBulk {
	return u.Update(func(s *TeamGroupUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TeamGroupUpsertBulk) SetCreatedAt(v time.Time) *TeamGroupUpsertBulk {
	return u.Update(func(s *TeamGroupUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TeamGroupUpsertBulk) UpdateCreatedAt() *TeamGroupUpsertBulk {
	return u.Update(func(s *TeamGroupUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TeamGroupUpsertBulk) SetUpdatedAt(v time.Time) *TeamGroupUpsertBulk {
	return u.Update(func(s *TeamGroupUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TeamGroupUpsertBulk) UpdateUpdatedAt() *TeamGroupUpsertBulk {
	return u.Update(func(s *TeamGroupUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *TeamGroupUpsertBulk) SetDeactivatedAt(v time.Time) *TeamGroupUpsertBulk {
	return u.Update(func(s *TeamGroupUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *TeamGroupUpsertBulk) UpdateDeactivatedAt() *TeamGroupUpsertBulk {
	return u.Update(func(s *TeamGroupUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *TeamGroupUpsertBulk) ClearDeactivatedAt() *TeamGroupUpsertBulk {
	return u.Update(func(s *TeamGroupUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *TeamGroupUpsertBulk) SetUserUID(v string) *TeamGroupUpsertBulk {
	return u.Update(func(s *TeamGroupUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *TeamGroupUpsertBulk) UpdateUserUID() *TeamGroupUpsertBulk {
	return u.Update(func(s *TeamGroupUpsert) {
		s.UpdateUserUID()
	})
}

// SetTeamUID sets the "team_uid" field.
func (u *TeamGroupUpsertBulk) SetTeamUID(v string) *TeamGroupUpsertBulk {
	return u.Update(func(s *TeamGroupUpsert) {
		s.SetTeamUID(v)
	})
}

// UpdateTeamUID sets the "team_uid" field to the value that was provided on create.
func (u *TeamGroupUpsertBulk) UpdateTeamUID() *TeamGroupUpsertBulk {
	return u.Update(func(s *TeamGroupUpsert) {
		s.UpdateTeamUID()
	})
}

// Exec executes the query.
func (u *TeamGroupUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the TeamGroupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for TeamGroupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeamGroupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
