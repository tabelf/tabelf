// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"fmt"
	"strings"
	"tabelf/backend/gen/entschema/stationmeta"
	"time"

	"entgo.io/ent/dialect/sql"
)

// StationMeta is the model entity for the StationMeta schema.
type StationMeta struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeactivatedAt holds the value of the "deactivated_at" field.
	DeactivatedAt *time.Time `json:"deactivated_at,omitempty"`
	// StationUID holds the value of the "station_uid" field.
	// 推荐uid
	StationUID string `json:"station_uid,omitempty"`
	// UserUID holds the value of the "user_uid" field.
	// 用户uid
	UserUID string `json:"user_uid,omitempty"`
	// HasPraise holds the value of the "has_praise" field.
	// 是否点赞
	HasPraise bool `json:"has_praise,omitempty"`
	// HasStar holds the value of the "has_star" field.
	// 是否收藏
	HasStar bool `json:"has_star,omitempty"`
	// HasView holds the value of the "has_view" field.
	// 是否查看
	HasView bool `json:"has_view,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StationMeta) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case stationmeta.FieldHasPraise, stationmeta.FieldHasStar, stationmeta.FieldHasView:
			values[i] = new(sql.NullBool)
		case stationmeta.FieldID:
			values[i] = new(sql.NullInt64)
		case stationmeta.FieldUID, stationmeta.FieldStationUID, stationmeta.FieldUserUID:
			values[i] = new(sql.NullString)
		case stationmeta.FieldCreatedAt, stationmeta.FieldUpdatedAt, stationmeta.FieldDeactivatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type StationMeta", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StationMeta fields.
func (sm *StationMeta) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stationmeta.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sm.ID = uint64(value.Int64)
		case stationmeta.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				sm.UID = value.String
			}
		case stationmeta.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sm.CreatedAt = value.Time
			}
		case stationmeta.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sm.UpdatedAt = value.Time
			}
		case stationmeta.FieldDeactivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deactivated_at", values[i])
			} else if value.Valid {
				sm.DeactivatedAt = new(time.Time)
				*sm.DeactivatedAt = value.Time
			}
		case stationmeta.FieldStationUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field station_uid", values[i])
			} else if value.Valid {
				sm.StationUID = value.String
			}
		case stationmeta.FieldUserUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_uid", values[i])
			} else if value.Valid {
				sm.UserUID = value.String
			}
		case stationmeta.FieldHasPraise:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_praise", values[i])
			} else if value.Valid {
				sm.HasPraise = value.Bool
			}
		case stationmeta.FieldHasStar:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_star", values[i])
			} else if value.Valid {
				sm.HasStar = value.Bool
			}
		case stationmeta.FieldHasView:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_view", values[i])
			} else if value.Valid {
				sm.HasView = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this StationMeta.
// Note that you need to call StationMeta.Unwrap() before calling this method if this StationMeta
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *StationMeta) Update() *StationMetaUpdateOne {
	return (&StationMetaClient{config: sm.config}).UpdateOne(sm)
}

// Unwrap unwraps the StationMeta entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *StationMeta) Unwrap() *StationMeta {
	tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("entschema: StationMeta is not a transactional entity")
	}
	sm.config.driver = tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *StationMeta) String() string {
	var builder strings.Builder
	builder.WriteString("StationMeta(")
	builder.WriteString(fmt.Sprintf("id=%v", sm.ID))
	builder.WriteString(", uid=")
	builder.WriteString(sm.UID)
	builder.WriteString(", created_at=")
	builder.WriteString(sm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(sm.UpdatedAt.Format(time.ANSIC))
	if v := sm.DeactivatedAt; v != nil {
		builder.WriteString(", deactivated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", station_uid=")
	builder.WriteString(sm.StationUID)
	builder.WriteString(", user_uid=")
	builder.WriteString(sm.UserUID)
	builder.WriteString(", has_praise=")
	builder.WriteString(fmt.Sprintf("%v", sm.HasPraise))
	builder.WriteString(", has_star=")
	builder.WriteString(fmt.Sprintf("%v", sm.HasStar))
	builder.WriteString(", has_view=")
	builder.WriteString(fmt.Sprintf("%v", sm.HasView))
	builder.WriteByte(')')
	return builder.String()
}

// StationMetaSlice is a parsable slice of StationMeta.
type StationMetaSlice []*StationMeta

func (sm StationMetaSlice) config(cfg config) {
	for _i := range sm {
		sm[_i].config = cfg
	}
}
