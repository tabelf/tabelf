// Code generated by entc, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"fmt"
	"tabelf/backend/gen/entschema/weblink"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WebLinkCreate is the builder for creating a WebLink entity.
type WebLinkCreate struct {
	config
	mutation *WebLinkMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUID sets the "uid" field.
func (wlc *WebLinkCreate) SetUID(s string) *WebLinkCreate {
	wlc.mutation.SetUID(s)
	return wlc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (wlc *WebLinkCreate) SetNillableUID(s *string) *WebLinkCreate {
	if s != nil {
		wlc.SetUID(*s)
	}
	return wlc
}

// SetCreatedAt sets the "created_at" field.
func (wlc *WebLinkCreate) SetCreatedAt(t time.Time) *WebLinkCreate {
	wlc.mutation.SetCreatedAt(t)
	return wlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wlc *WebLinkCreate) SetNillableCreatedAt(t *time.Time) *WebLinkCreate {
	if t != nil {
		wlc.SetCreatedAt(*t)
	}
	return wlc
}

// SetUpdatedAt sets the "updated_at" field.
func (wlc *WebLinkCreate) SetUpdatedAt(t time.Time) *WebLinkCreate {
	wlc.mutation.SetUpdatedAt(t)
	return wlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wlc *WebLinkCreate) SetNillableUpdatedAt(t *time.Time) *WebLinkCreate {
	if t != nil {
		wlc.SetUpdatedAt(*t)
	}
	return wlc
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (wlc *WebLinkCreate) SetDeactivatedAt(t time.Time) *WebLinkCreate {
	wlc.mutation.SetDeactivatedAt(t)
	return wlc
}

// SetNillableDeactivatedAt sets the "deactivated_at" field if the given value is not nil.
func (wlc *WebLinkCreate) SetNillableDeactivatedAt(t *time.Time) *WebLinkCreate {
	if t != nil {
		wlc.SetDeactivatedAt(*t)
	}
	return wlc
}

// SetTitle sets the "title" field.
func (wlc *WebLinkCreate) SetTitle(s string) *WebLinkCreate {
	wlc.mutation.SetTitle(s)
	return wlc
}

// SetImage sets the "image" field.
func (wlc *WebLinkCreate) SetImage(s string) *WebLinkCreate {
	wlc.mutation.SetImage(s)
	return wlc
}

// SetLink sets the "link" field.
func (wlc *WebLinkCreate) SetLink(s string) *WebLinkCreate {
	wlc.mutation.SetLink(s)
	return wlc
}

// SetDescription sets the "description" field.
func (wlc *WebLinkCreate) SetDescription(s string) *WebLinkCreate {
	wlc.mutation.SetDescription(s)
	return wlc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wlc *WebLinkCreate) SetNillableDescription(s *string) *WebLinkCreate {
	if s != nil {
		wlc.SetDescription(*s)
	}
	return wlc
}

// SetFileType sets the "file_type" field.
func (wlc *WebLinkCreate) SetFileType(s string) *WebLinkCreate {
	wlc.mutation.SetFileType(s)
	return wlc
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (wlc *WebLinkCreate) SetNillableFileType(s *string) *WebLinkCreate {
	if s != nil {
		wlc.SetFileType(*s)
	}
	return wlc
}

// SetSequence sets the "sequence" field.
func (wlc *WebLinkCreate) SetSequence(i int) *WebLinkCreate {
	wlc.mutation.SetSequence(i)
	return wlc
}

// SetNillableSequence sets the "sequence" field if the given value is not nil.
func (wlc *WebLinkCreate) SetNillableSequence(i *int) *WebLinkCreate {
	if i != nil {
		wlc.SetSequence(*i)
	}
	return wlc
}

// SetForeverDelete sets the "forever_delete" field.
func (wlc *WebLinkCreate) SetForeverDelete(b bool) *WebLinkCreate {
	wlc.mutation.SetForeverDelete(b)
	return wlc
}

// SetNillableForeverDelete sets the "forever_delete" field if the given value is not nil.
func (wlc *WebLinkCreate) SetNillableForeverDelete(b *bool) *WebLinkCreate {
	if b != nil {
		wlc.SetForeverDelete(*b)
	}
	return wlc
}

// SetUserUID sets the "user_uid" field.
func (wlc *WebLinkCreate) SetUserUID(s string) *WebLinkCreate {
	wlc.mutation.SetUserUID(s)
	return wlc
}

// SetWorkspaceUID sets the "workspace_uid" field.
func (wlc *WebLinkCreate) SetWorkspaceUID(s string) *WebLinkCreate {
	wlc.mutation.SetWorkspaceUID(s)
	return wlc
}

// SetFolderUID sets the "folder_uid" field.
func (wlc *WebLinkCreate) SetFolderUID(s string) *WebLinkCreate {
	wlc.mutation.SetFolderUID(s)
	return wlc
}

// SetID sets the "id" field.
func (wlc *WebLinkCreate) SetID(u uint64) *WebLinkCreate {
	wlc.mutation.SetID(u)
	return wlc
}

// Mutation returns the WebLinkMutation object of the builder.
func (wlc *WebLinkCreate) Mutation() *WebLinkMutation {
	return wlc.mutation
}

// Save creates the WebLink in the database.
func (wlc *WebLinkCreate) Save(ctx context.Context) (*WebLink, error) {
	var (
		err  error
		node *WebLink
	)
	wlc.defaults()
	if len(wlc.hooks) == 0 {
		if err = wlc.check(); err != nil {
			return nil, err
		}
		node, err = wlc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WebLinkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wlc.check(); err != nil {
				return nil, err
			}
			wlc.mutation = mutation
			if node, err = wlc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wlc.hooks) - 1; i >= 0; i-- {
			if wlc.hooks[i] == nil {
				return nil, fmt.Errorf("entschema: uninitialized hook (forgotten import entschema/runtime?)")
			}
			mut = wlc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wlc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wlc *WebLinkCreate) SaveX(ctx context.Context) *WebLink {
	v, err := wlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wlc *WebLinkCreate) Exec(ctx context.Context) error {
	_, err := wlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wlc *WebLinkCreate) ExecX(ctx context.Context) {
	if err := wlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wlc *WebLinkCreate) defaults() {
	if _, ok := wlc.mutation.UID(); !ok {
		v := weblink.DefaultUID()
		wlc.mutation.SetUID(v)
	}
	if _, ok := wlc.mutation.CreatedAt(); !ok {
		v := weblink.DefaultCreatedAt()
		wlc.mutation.SetCreatedAt(v)
	}
	if _, ok := wlc.mutation.UpdatedAt(); !ok {
		v := weblink.DefaultUpdatedAt()
		wlc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wlc.mutation.Description(); !ok {
		v := weblink.DefaultDescription
		wlc.mutation.SetDescription(v)
	}
	if _, ok := wlc.mutation.FileType(); !ok {
		v := weblink.DefaultFileType
		wlc.mutation.SetFileType(v)
	}
	if _, ok := wlc.mutation.Sequence(); !ok {
		v := weblink.DefaultSequence
		wlc.mutation.SetSequence(v)
	}
	if _, ok := wlc.mutation.ForeverDelete(); !ok {
		v := weblink.DefaultForeverDelete
		wlc.mutation.SetForeverDelete(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wlc *WebLinkCreate) check() error {
	if _, ok := wlc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`entschema: missing required field "WebLink.uid"`)}
	}
	if v, ok := wlc.mutation.UID(); ok {
		if err := weblink.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`entschema: validator failed for field "WebLink.uid": %w`, err)}
		}
	}
	if _, ok := wlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entschema: missing required field "WebLink.created_at"`)}
	}
	if _, ok := wlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entschema: missing required field "WebLink.updated_at"`)}
	}
	if _, ok := wlc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`entschema: missing required field "WebLink.title"`)}
	}
	if _, ok := wlc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`entschema: missing required field "WebLink.image"`)}
	}
	if _, ok := wlc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`entschema: missing required field "WebLink.link"`)}
	}
	if _, ok := wlc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`entschema: missing required field "WebLink.description"`)}
	}
	if _, ok := wlc.mutation.FileType(); !ok {
		return &ValidationError{Name: "file_type", err: errors.New(`entschema: missing required field "WebLink.file_type"`)}
	}
	if _, ok := wlc.mutation.Sequence(); !ok {
		return &ValidationError{Name: "sequence", err: errors.New(`entschema: missing required field "WebLink.sequence"`)}
	}
	if _, ok := wlc.mutation.ForeverDelete(); !ok {
		return &ValidationError{Name: "forever_delete", err: errors.New(`entschema: missing required field "WebLink.forever_delete"`)}
	}
	if _, ok := wlc.mutation.UserUID(); !ok {
		return &ValidationError{Name: "user_uid", err: errors.New(`entschema: missing required field "WebLink.user_uid"`)}
	}
	if _, ok := wlc.mutation.WorkspaceUID(); !ok {
		return &ValidationError{Name: "workspace_uid", err: errors.New(`entschema: missing required field "WebLink.workspace_uid"`)}
	}
	if _, ok := wlc.mutation.FolderUID(); !ok {
		return &ValidationError{Name: "folder_uid", err: errors.New(`entschema: missing required field "WebLink.folder_uid"`)}
	}
	return nil
}

func (wlc *WebLinkCreate) sqlSave(ctx context.Context) (*WebLink, error) {
	_node, _spec := wlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (wlc *WebLinkCreate) createSpec() (*WebLink, *sqlgraph.CreateSpec) {
	var (
		_node = &WebLink{config: wlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: weblink.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: weblink.FieldID,
			},
		}
	)
	_spec.OnConflict = wlc.conflict
	if id, ok := wlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wlc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := wlc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: weblink.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := wlc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: weblink.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := wlc.mutation.DeactivatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: weblink.FieldDeactivatedAt,
		})
		_node.DeactivatedAt = &value
	}
	if value, ok := wlc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := wlc.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := wlc.mutation.Link(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldLink,
		})
		_node.Link = value
	}
	if value, ok := wlc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := wlc.mutation.FileType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldFileType,
		})
		_node.FileType = value
	}
	if value, ok := wlc.mutation.Sequence(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weblink.FieldSequence,
		})
		_node.Sequence = value
	}
	if value, ok := wlc.mutation.ForeverDelete(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: weblink.FieldForeverDelete,
		})
		_node.ForeverDelete = value
	}
	if value, ok := wlc.mutation.UserUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldUserUID,
		})
		_node.UserUID = value
	}
	if value, ok := wlc.mutation.WorkspaceUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldWorkspaceUID,
		})
		_node.WorkspaceUID = value
	}
	if value, ok := wlc.mutation.FolderUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weblink.FieldFolderUID,
		})
		_node.FolderUID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WebLink.Create().
//		SetUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WebLinkUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (wlc *WebLinkCreate) OnConflict(opts ...sql.ConflictOption) *WebLinkUpsertOne {
	wlc.conflict = opts
	return &WebLinkUpsertOne{
		create: wlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WebLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (wlc *WebLinkCreate) OnConflictColumns(columns ...string) *WebLinkUpsertOne {
	wlc.conflict = append(wlc.conflict, sql.ConflictColumns(columns...))
	return &WebLinkUpsertOne{
		create: wlc,
	}
}

type (
	// WebLinkUpsertOne is the builder for "upsert"-ing
	//  one WebLink node.
	WebLinkUpsertOne struct {
		create *WebLinkCreate
	}

	// WebLinkUpsert is the "OnConflict" setter.
	WebLinkUpsert struct {
		*sql.UpdateSet
	}
)

// SetUID sets the "uid" field.
func (u *WebLinkUpsert) SetUID(v string) *WebLinkUpsert {
	u.Set(weblink.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *WebLinkUpsert) UpdateUID() *WebLinkUpsert {
	u.SetExcluded(weblink.FieldUID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *WebLinkUpsert) SetCreatedAt(v time.Time) *WebLinkUpsert {
	u.Set(weblink.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WebLinkUpsert) UpdateCreatedAt() *WebLinkUpsert {
	u.SetExcluded(weblink.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WebLinkUpsert) SetUpdatedAt(v time.Time) *WebLinkUpsert {
	u.Set(weblink.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WebLinkUpsert) UpdateUpdatedAt() *WebLinkUpsert {
	u.SetExcluded(weblink.FieldUpdatedAt)
	return u
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *WebLinkUpsert) SetDeactivatedAt(v time.Time) *WebLinkUpsert {
	u.Set(weblink.FieldDeactivatedAt, v)
	return u
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *WebLinkUpsert) UpdateDeactivatedAt() *WebLinkUpsert {
	u.SetExcluded(weblink.FieldDeactivatedAt)
	return u
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *WebLinkUpsert) ClearDeactivatedAt() *WebLinkUpsert {
	u.SetNull(weblink.FieldDeactivatedAt)
	return u
}

// SetTitle sets the "title" field.
func (u *WebLinkUpsert) SetTitle(v string) *WebLinkUpsert {
	u.Set(weblink.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *WebLinkUpsert) UpdateTitle() *WebLinkUpsert {
	u.SetExcluded(weblink.FieldTitle)
	return u
}

// SetImage sets the "image" field.
func (u *WebLinkUpsert) SetImage(v string) *WebLinkUpsert {
	u.Set(weblink.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *WebLinkUpsert) UpdateImage() *WebLinkUpsert {
	u.SetExcluded(weblink.FieldImage)
	return u
}

// SetLink sets the "link" field.
func (u *WebLinkUpsert) SetLink(v string) *WebLinkUpsert {
	u.Set(weblink.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *WebLinkUpsert) UpdateLink() *WebLinkUpsert {
	u.SetExcluded(weblink.FieldLink)
	return u
}

// SetDescription sets the "description" field.
func (u *WebLinkUpsert) SetDescription(v string) *WebLinkUpsert {
	u.Set(weblink.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WebLinkUpsert) UpdateDescription() *WebLinkUpsert {
	u.SetExcluded(weblink.FieldDescription)
	return u
}

// SetFileType sets the "file_type" field.
func (u *WebLinkUpsert) SetFileType(v string) *WebLinkUpsert {
	u.Set(weblink.FieldFileType, v)
	return u
}

// UpdateFileType sets the "file_type" field to the value that was provided on create.
func (u *WebLinkUpsert) UpdateFileType() *WebLinkUpsert {
	u.SetExcluded(weblink.FieldFileType)
	return u
}

// SetSequence sets the "sequence" field.
func (u *WebLinkUpsert) SetSequence(v int) *WebLinkUpsert {
	u.Set(weblink.FieldSequence, v)
	return u
}

// UpdateSequence sets the "sequence" field to the value that was provided on create.
func (u *WebLinkUpsert) UpdateSequence() *WebLinkUpsert {
	u.SetExcluded(weblink.FieldSequence)
	return u
}

// AddSequence adds v to the "sequence" field.
func (u *WebLinkUpsert) AddSequence(v int) *WebLinkUpsert {
	u.Add(weblink.FieldSequence, v)
	return u
}

// SetForeverDelete sets the "forever_delete" field.
func (u *WebLinkUpsert) SetForeverDelete(v bool) *WebLinkUpsert {
	u.Set(weblink.FieldForeverDelete, v)
	return u
}

// UpdateForeverDelete sets the "forever_delete" field to the value that was provided on create.
func (u *WebLinkUpsert) UpdateForeverDelete() *WebLinkUpsert {
	u.SetExcluded(weblink.FieldForeverDelete)
	return u
}

// SetUserUID sets the "user_uid" field.
func (u *WebLinkUpsert) SetUserUID(v string) *WebLinkUpsert {
	u.Set(weblink.FieldUserUID, v)
	return u
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *WebLinkUpsert) UpdateUserUID() *WebLinkUpsert {
	u.SetExcluded(weblink.FieldUserUID)
	return u
}

// SetWorkspaceUID sets the "workspace_uid" field.
func (u *WebLinkUpsert) SetWorkspaceUID(v string) *WebLinkUpsert {
	u.Set(weblink.FieldWorkspaceUID, v)
	return u
}

// UpdateWorkspaceUID sets the "workspace_uid" field to the value that was provided on create.
func (u *WebLinkUpsert) UpdateWorkspaceUID() *WebLinkUpsert {
	u.SetExcluded(weblink.FieldWorkspaceUID)
	return u
}

// SetFolderUID sets the "folder_uid" field.
func (u *WebLinkUpsert) SetFolderUID(v string) *WebLinkUpsert {
	u.Set(weblink.FieldFolderUID, v)
	return u
}

// UpdateFolderUID sets the "folder_uid" field to the value that was provided on create.
func (u *WebLinkUpsert) UpdateFolderUID() *WebLinkUpsert {
	u.SetExcluded(weblink.FieldFolderUID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WebLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(weblink.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *WebLinkUpsertOne) UpdateNewValues() *WebLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(weblink.FieldID)
		}
		if _, exists := u.create.mutation.UID(); exists {
			s.SetIgnore(weblink.FieldUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(weblink.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.WebLink.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *WebLinkUpsertOne) Ignore() *WebLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WebLinkUpsertOne) DoNothing() *WebLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WebLinkCreate.OnConflict
// documentation for more info.
func (u *WebLinkUpsertOne) Update(set func(*WebLinkUpsert)) *WebLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WebLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *WebLinkUpsertOne) SetUID(v string) *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *WebLinkUpsertOne) UpdateUID() *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *WebLinkUpsertOne) SetCreatedAt(v time.Time) *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WebLinkUpsertOne) UpdateCreatedAt() *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WebLinkUpsertOne) SetUpdatedAt(v time.Time) *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WebLinkUpsertOne) UpdateUpdatedAt() *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *WebLinkUpsertOne) SetDeactivatedAt(v time.Time) *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *WebLinkUpsertOne) UpdateDeactivatedAt() *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *WebLinkUpsertOne) ClearDeactivatedAt() *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetTitle sets the "title" field.
func (u *WebLinkUpsertOne) SetTitle(v string) *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *WebLinkUpsertOne) UpdateTitle() *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateTitle()
	})
}

// SetImage sets the "image" field.
func (u *WebLinkUpsertOne) SetImage(v string) *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *WebLinkUpsertOne) UpdateImage() *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateImage()
	})
}

// SetLink sets the "link" field.
func (u *WebLinkUpsertOne) SetLink(v string) *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *WebLinkUpsertOne) UpdateLink() *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateLink()
	})
}

// SetDescription sets the "description" field.
func (u *WebLinkUpsertOne) SetDescription(v string) *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WebLinkUpsertOne) UpdateDescription() *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateDescription()
	})
}

// SetFileType sets the "file_type" field.
func (u *WebLinkUpsertOne) SetFileType(v string) *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetFileType(v)
	})
}

// UpdateFileType sets the "file_type" field to the value that was provided on create.
func (u *WebLinkUpsertOne) UpdateFileType() *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateFileType()
	})
}

// SetSequence sets the "sequence" field.
func (u *WebLinkUpsertOne) SetSequence(v int) *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetSequence(v)
	})
}

// AddSequence adds v to the "sequence" field.
func (u *WebLinkUpsertOne) AddSequence(v int) *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.AddSequence(v)
	})
}

// UpdateSequence sets the "sequence" field to the value that was provided on create.
func (u *WebLinkUpsertOne) UpdateSequence() *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateSequence()
	})
}

// SetForeverDelete sets the "forever_delete" field.
func (u *WebLinkUpsertOne) SetForeverDelete(v bool) *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetForeverDelete(v)
	})
}

// UpdateForeverDelete sets the "forever_delete" field to the value that was provided on create.
func (u *WebLinkUpsertOne) UpdateForeverDelete() *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateForeverDelete()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *WebLinkUpsertOne) SetUserUID(v string) *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *WebLinkUpsertOne) UpdateUserUID() *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateUserUID()
	})
}

// SetWorkspaceUID sets the "workspace_uid" field.
func (u *WebLinkUpsertOne) SetWorkspaceUID(v string) *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetWorkspaceUID(v)
	})
}

// UpdateWorkspaceUID sets the "workspace_uid" field to the value that was provided on create.
func (u *WebLinkUpsertOne) UpdateWorkspaceUID() *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateWorkspaceUID()
	})
}

// SetFolderUID sets the "folder_uid" field.
func (u *WebLinkUpsertOne) SetFolderUID(v string) *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetFolderUID(v)
	})
}

// UpdateFolderUID sets the "folder_uid" field to the value that was provided on create.
func (u *WebLinkUpsertOne) UpdateFolderUID() *WebLinkUpsertOne {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateFolderUID()
	})
}

// Exec executes the query.
func (u *WebLinkUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for WebLinkCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WebLinkUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WebLinkUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WebLinkUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WebLinkCreateBulk is the builder for creating many WebLink entities in bulk.
type WebLinkCreateBulk struct {
	config
	builders []*WebLinkCreate
	conflict []sql.ConflictOption
}

// Save creates the WebLink entities in the database.
func (wlcb *WebLinkCreateBulk) Save(ctx context.Context) ([]*WebLink, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wlcb.builders))
	nodes := make([]*WebLink, len(wlcb.builders))
	mutators := make([]Mutator, len(wlcb.builders))
	for i := range wlcb.builders {
		func(i int, root context.Context) {
			builder := wlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WebLinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wlcb *WebLinkCreateBulk) SaveX(ctx context.Context) []*WebLink {
	v, err := wlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wlcb *WebLinkCreateBulk) Exec(ctx context.Context) error {
	_, err := wlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wlcb *WebLinkCreateBulk) ExecX(ctx context.Context) {
	if err := wlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WebLink.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WebLinkUpsert) {
//			SetUID(v+v).
//		}).
//		Exec(ctx)
//
func (wlcb *WebLinkCreateBulk) OnConflict(opts ...sql.ConflictOption) *WebLinkUpsertBulk {
	wlcb.conflict = opts
	return &WebLinkUpsertBulk{
		create: wlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WebLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (wlcb *WebLinkCreateBulk) OnConflictColumns(columns ...string) *WebLinkUpsertBulk {
	wlcb.conflict = append(wlcb.conflict, sql.ConflictColumns(columns...))
	return &WebLinkUpsertBulk{
		create: wlcb,
	}
}

// WebLinkUpsertBulk is the builder for "upsert"-ing
// a bulk of WebLink nodes.
type WebLinkUpsertBulk struct {
	create *WebLinkCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WebLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(weblink.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *WebLinkUpsertBulk) UpdateNewValues() *WebLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(weblink.FieldID)
				return
			}
			if _, exists := b.mutation.UID(); exists {
				s.SetIgnore(weblink.FieldUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(weblink.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WebLink.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *WebLinkUpsertBulk) Ignore() *WebLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WebLinkUpsertBulk) DoNothing() *WebLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WebLinkCreateBulk.OnConflict
// documentation for more info.
func (u *WebLinkUpsertBulk) Update(set func(*WebLinkUpsert)) *WebLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WebLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetUID sets the "uid" field.
func (u *WebLinkUpsertBulk) SetUID(v string) *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *WebLinkUpsertBulk) UpdateUID() *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateUID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *WebLinkUpsertBulk) SetCreatedAt(v time.Time) *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WebLinkUpsertBulk) UpdateCreatedAt() *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WebLinkUpsertBulk) SetUpdatedAt(v time.Time) *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WebLinkUpsertBulk) UpdateUpdatedAt() *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeactivatedAt sets the "deactivated_at" field.
func (u *WebLinkUpsertBulk) SetDeactivatedAt(v time.Time) *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetDeactivatedAt(v)
	})
}

// UpdateDeactivatedAt sets the "deactivated_at" field to the value that was provided on create.
func (u *WebLinkUpsertBulk) UpdateDeactivatedAt() *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateDeactivatedAt()
	})
}

// ClearDeactivatedAt clears the value of the "deactivated_at" field.
func (u *WebLinkUpsertBulk) ClearDeactivatedAt() *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.ClearDeactivatedAt()
	})
}

// SetTitle sets the "title" field.
func (u *WebLinkUpsertBulk) SetTitle(v string) *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *WebLinkUpsertBulk) UpdateTitle() *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateTitle()
	})
}

// SetImage sets the "image" field.
func (u *WebLinkUpsertBulk) SetImage(v string) *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *WebLinkUpsertBulk) UpdateImage() *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateImage()
	})
}

// SetLink sets the "link" field.
func (u *WebLinkUpsertBulk) SetLink(v string) *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *WebLinkUpsertBulk) UpdateLink() *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateLink()
	})
}

// SetDescription sets the "description" field.
func (u *WebLinkUpsertBulk) SetDescription(v string) *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WebLinkUpsertBulk) UpdateDescription() *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateDescription()
	})
}

// SetFileType sets the "file_type" field.
func (u *WebLinkUpsertBulk) SetFileType(v string) *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetFileType(v)
	})
}

// UpdateFileType sets the "file_type" field to the value that was provided on create.
func (u *WebLinkUpsertBulk) UpdateFileType() *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateFileType()
	})
}

// SetSequence sets the "sequence" field.
func (u *WebLinkUpsertBulk) SetSequence(v int) *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetSequence(v)
	})
}

// AddSequence adds v to the "sequence" field.
func (u *WebLinkUpsertBulk) AddSequence(v int) *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.AddSequence(v)
	})
}

// UpdateSequence sets the "sequence" field to the value that was provided on create.
func (u *WebLinkUpsertBulk) UpdateSequence() *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateSequence()
	})
}

// SetForeverDelete sets the "forever_delete" field.
func (u *WebLinkUpsertBulk) SetForeverDelete(v bool) *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetForeverDelete(v)
	})
}

// UpdateForeverDelete sets the "forever_delete" field to the value that was provided on create.
func (u *WebLinkUpsertBulk) UpdateForeverDelete() *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateForeverDelete()
	})
}

// SetUserUID sets the "user_uid" field.
func (u *WebLinkUpsertBulk) SetUserUID(v string) *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetUserUID(v)
	})
}

// UpdateUserUID sets the "user_uid" field to the value that was provided on create.
func (u *WebLinkUpsertBulk) UpdateUserUID() *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateUserUID()
	})
}

// SetWorkspaceUID sets the "workspace_uid" field.
func (u *WebLinkUpsertBulk) SetWorkspaceUID(v string) *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetWorkspaceUID(v)
	})
}

// UpdateWorkspaceUID sets the "workspace_uid" field to the value that was provided on create.
func (u *WebLinkUpsertBulk) UpdateWorkspaceUID() *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateWorkspaceUID()
	})
}

// SetFolderUID sets the "folder_uid" field.
func (u *WebLinkUpsertBulk) SetFolderUID(v string) *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.SetFolderUID(v)
	})
}

// UpdateFolderUID sets the "folder_uid" field to the value that was provided on create.
func (u *WebLinkUpsertBulk) UpdateFolderUID() *WebLinkUpsertBulk {
	return u.Update(func(s *WebLinkUpsert) {
		s.UpdateFolderUID()
	})
}

// Exec executes the query.
func (u *WebLinkUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the WebLinkCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for WebLinkCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WebLinkUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
