// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	anonymousaccount "tabelf/backend/service/api/internal/handler/anonymous/account"
	anonymousarticle "tabelf/backend/service/api/internal/handler/anonymous/article"
	anonymouscommunity "tabelf/backend/service/api/internal/handler/anonymous/community"
	anonymousstation "tabelf/backend/service/api/internal/handler/anonymous/station"
	anonymousupgrade "tabelf/backend/service/api/internal/handler/anonymous/upgrade"
	article "tabelf/backend/service/api/internal/handler/article"
	community "tabelf/backend/service/api/internal/handler/community"
	communityaudit "tabelf/backend/service/api/internal/handler/community/audit"
	customeraccount "tabelf/backend/service/api/internal/handler/customer/account"
	customerfolder "tabelf/backend/service/api/internal/handler/customer/folder"
	customerweblink "tabelf/backend/service/api/internal/handler/customer/weblink"
	customerworkspace "tabelf/backend/service/api/internal/handler/customer/workspace"
	feedback "tabelf/backend/service/api/internal/handler/feedback"
	global "tabelf/backend/service/api/internal/handler/global"
	message "tabelf/backend/service/api/internal/handler/message"
	sharefolder "tabelf/backend/service/api/internal/handler/share/folder"
	sharelink "tabelf/backend/service/api/internal/handler/share/link"
	station "tabelf/backend/service/api/internal/handler/station"
	stationaudit "tabelf/backend/service/api/internal/handler/station/audit"
	swagger "tabelf/backend/service/api/internal/handler/swagger"
	"tabelf/backend/service/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/hello/:name",
				Handler: global.SayHelloHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/global/datetime",
				Handler: global.GetTimeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/global/error",
				Handler: global.GetErrorHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/swagger",
				Handler: swagger.SwagHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/swagger-json",
				Handler: swagger.SwagJSONHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/anonymous/account/auth/login/qr_code",
				Handler: anonymousaccount.GetAuthLoginQrCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/anonymous/account/auth/login",
				Handler: anonymousaccount.AuthLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/anonymous/account/wechat/auth",
				Handler: anonymousaccount.GetAuthLoginWechatAuthorityHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/anonymous/account/wechat/auth",
				Handler: anonymousaccount.WechatMessageCallbackHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/anonymous/station/category",
				Handler: anonymousstation.GetGoodStationCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/anonymous/station/recommend",
				Handler: anonymousstation.GetGoodStationRecommendHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/anonymous/community/category",
				Handler: anonymouscommunity.GetPublicCommunityCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/anonymous/community/public",
				Handler: anonymouscommunity.GetPublicCommunityHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/anonymous/community/:community_uid/detail",
				Handler: anonymouscommunity.GetPublicCommunityDetailHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/anonymous/article/category",
				Handler: anonymousarticle.GetGoodArticleCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/anonymous/article/recommend",
				Handler: anonymousarticle.GetGoodArticleRecommendHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/anonymous/article/norm",
				Handler: anonymousarticle.GetGoodArticleMenuDataHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/anonymous/article/hot",
				Handler: anonymousarticle.GetHotGoodArticleHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/anonymous/article/:article_uid/view",
				Handler: anonymousarticle.ViewGoodArticleHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWT},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/personal/teams",
					Handler: customeraccount.GetPersonalTeamsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/personal/weblink/info",
					Handler: customeraccount.GetPersonalWebLinkInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/personal/info",
					Handler: customeraccount.GetPersonalAccountInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/personal/info",
					Handler: customeraccount.UpdatePersonalAccountInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/personal/upload",
					Handler: customeraccount.UpdatePersonalAccountImageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/personal/search",
					Handler: customeraccount.SearchWebLinksHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/personal/invite",
					Handler: customeraccount.GetPersonalInviteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customer/:user_uid/personal/focus",
					Handler: customeraccount.FocusPersonalAccountHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWT},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/personal/folders",
					Handler: customerfolder.GetPersonalFoldersHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customer/:user_uid/personal/folders",
					Handler: customerfolder.AddPersonalFolderHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/personal/folders/:folder_uid",
					Handler: customerfolder.UpdatePersonalFolderHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/customer/:user_uid/personal/folders/:folder_uid",
					Handler: customerfolder.DeletePersonalFolderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customer/:user_uid/personal/folders/:folder_uid/copy",
					Handler: customerfolder.CopyPersonalFolderHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWT},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/personal/folders/workspace/content",
					Handler: customerworkspace.GetFolderNumberWorkspaceContentHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/personal/folders/workspace/content/share",
					Handler: customerworkspace.GetFolderNumberShareWorkspaceContentHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/personal/folders/:folder_uid/workspace/content",
					Handler: customerworkspace.GetWorkspaceContentHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customer/:user_uid/personal/folder/:folder_uid/workspace",
					Handler: customerworkspace.AddWorkspaceHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/personal/folder/:folder_uid/workspace/:workspace_uid",
					Handler: customerworkspace.UpdateWorkspaceHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/customer/:user_uid/personal/folder/:folder_uid/workspace/:workspace_uid",
					Handler: customerworkspace.DeleteWorkspaceHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/personal/folder/:folder_uid/workspace/switch",
					Handler: customerworkspace.UpdateWorkspaceSwitchHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWT},
			[]rest.Route{
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/personal/folder/:folder_uid/workspace/:workspace_uid/sort",
					Handler: customerweblink.UpdateWorkspaceWebLinksHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/personal/weblink/recent",
					Handler: customerweblink.GetRecentPersonalWebLinkHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/personal/weblink/recycling",
					Handler: customerweblink.GetRecyclingPersonalWebLinkHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/customer/:user_uid/personal/weblink/:link_uid/forever",
					Handler: customerweblink.DeleteForeverPersonalWebLinkHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/personal/weblink/:link_uid/restore",
					Handler: customerweblink.RestoreDeletePersonalWebLinkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customer/:user_uid/personal/folder/:folder_uid/workspace/:workspace_uid/weblink",
					Handler: customerweblink.AddPersonalWebLinkHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/personal/folder/:folder_uid/workspace/:workspace_uid/weblink/:link_uid",
					Handler: customerweblink.UpdatePersonalWebLinkHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/customer/:user_uid/personal/folder/:folder_uid/workspace/:workspace_uid/weblink/:link_uid",
					Handler: customerweblink.DeletePersonalWebLinkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customer/:user_uid/personal/folder/:folder_uid/workspace/:workspace_uid/local",
					Handler: customerweblink.AddPersonalLocalFileLinkHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWT},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/customer/:user_uid/personal/folders/share/:share_uid/workspace/:workspace_uid/weblink",
					Handler: sharelink.AddSharePersonalWebLinkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customer/:user_uid/personal/folders/:folder_uid/share",
					Handler: sharelink.ShareFolderLinkHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/personal/folders/:folder_uid/share/:share_uid",
					Handler: sharelink.UpdateShareLinkHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customer/:user_uid/personal/folders/share/:share_uid/join",
					Handler: sharelink.JoinShareLinkHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWT},
			[]rest.Route{
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/personal/folders/:folder_uid/share",
					Handler: sharefolder.SharePersonalFolderHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/personal/folders/:folder_uid/share/:share_uid/coll/:coll_uid",
					Handler: sharefolder.UpdateSharePersonnelHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customer/:user_uid/personal/folders/share/:share_uid/friend",
					Handler: sharefolder.ShareFriendFolderHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/personal/folders/share",
					Handler: sharefolder.GetSharePersonalFolderHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/personal/folders/share/:share_uid",
					Handler: sharefolder.UpdateSharePersonalFolderHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/customer/:user_uid/personal/folders/share/:share_uid",
					Handler: sharefolder.DeleteSharePersonalFolderHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customer/:user_uid/personal/folders/share/:share_uid/copy",
					Handler: sharefolder.CopySharePersonalFolderHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/personal/folders/share/:share_uid/personnel",
					Handler: sharefolder.GetShareAllPersonnelHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/personal/folders/share/:share_uid/personnel",
					Handler: sharefolder.UpdateManageSharePersonnelHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/customer/:user_uid/personal/folders/share/:share_uid/personnel",
					Handler: sharefolder.DeleteSharePersonnelHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/customer/:user_uid/personal/folders/share/:share_uid/exit",
					Handler: sharefolder.ExitSharePersonalFolderHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/anonymous/upgrade/recharge",
				Handler: anonymousupgrade.GetUpgradeRechargesHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWT},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/customer/:user_uid/personal/feedback",
					Handler: feedback.CreateFeedbackHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWT},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/personal/message",
					Handler: message.GetMessagesHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/personal/message/:message_uid",
					Handler: message.ReadMessageHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/personal/message",
					Handler: message.ReadAllMessageHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/customer/:user_uid/personal/message/:message_uid",
					Handler: message.DelMessageHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/customer/:user_uid/personal/message",
					Handler: message.DelAllMessageHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWT},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/station/:station_uid/detail",
					Handler: station.GetGoodStationHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/station/:station_uid/detail",
					Handler: station.UpdateGoodStationHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customer/:user_uid/station/recommend",
					Handler: station.AddGoodStationRecommendHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/station/image",
					Handler: station.UploadStationImageHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/station/:station_uid/meta",
					Handler: station.UpdateGoodStationMetaHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/station/:station_uid/star",
					Handler: station.GoodStationStarHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWT},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/station/audit",
					Handler: stationaudit.GetAuditGoodStationHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/station/:station_uid",
					Handler: stationaudit.UpdateAuditGoodStationHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWT},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/customer/:user_uid/community/public",
					Handler: community.CreatePublicCommunityHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/community/:community_uid/meta",
					Handler: community.UpdatePublicCommunityMetaHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/community/image",
					Handler: community.UpdatePublicCommunityImageHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/customer/:user_uid/community/:community_uid/close",
					Handler: community.ClosePublicCommunityHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/community/self",
					Handler: community.GetSelfPublicCommunityHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWT},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/community/audit",
					Handler: communityaudit.GetAuditPublicCommunityHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/community/:community_uid/audit",
					Handler: communityaudit.UpdateAuditPublicCommunityHandler(serverCtx),
				},
			}...,
		),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JWT},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/article/:article_uid/detail",
					Handler: article.GetGoodArticleHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/article/:article_uid/detail",
					Handler: article.UpdateGoodArticleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/customer/:user_uid/article/recommend",
					Handler: article.AddGoodArticleRecommendHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/article/image",
					Handler: article.UploadGoodArticleImageHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/article/:article_uid/meta",
					Handler: article.UpdateGoodArticleMetaHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/article/:article_uid/collection",
					Handler: article.GoodArticleCollectionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/article/collection",
					Handler: article.GetGoodArticleCollectionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/article/audit",
					Handler: article.GetGoodArticleAuditHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/customer/:user_uid/article/:article_uid/audit",
					Handler: article.UpdateGoodArticleAuditHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/customer/:user_uid/article/submit",
					Handler: article.GetGoodArticleSubmitHandler(serverCtx),
				},
			}...,
		),
	)
}
